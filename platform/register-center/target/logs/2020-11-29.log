[15:49:54.250] DEBUG [main]o.s.b.c.l.ClasspathLoggingApplicationListener - Application started with classpath: [jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/classes!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-starter-netflix-eureka-server-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-starter-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-starter-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-autoconfigure-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-starter-logging-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/logback-classic-1.2.3.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/logback-core-1.2.3.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/log4j-to-slf4j-2.11.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/log4j-api-2.11.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jul-to-slf4j-1.7.26.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/javax.annotation-api-1.3.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-core-5.1.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-jcl-5.1.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/snakeyaml-1.23.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-context-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-security-crypto-5.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-commons-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-security-rsa-1.0.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/bcpkix-jdk15on-1.60.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/bcprov-jdk15on-1.60.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-netflix-eureka-server-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-starter-web-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-starter-json-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jackson-datatype-jdk8-2.9.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jackson-datatype-jsr310-2.9.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jackson-module-parameter-names-2.9.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-starter-tomcat-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/tomcat-embed-core-9.0.19.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/tomcat-embed-el-9.0.19.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/tomcat-embed-websocket-9.0.19.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/hibernate-validator-6.0.16.Final.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/validation-api-2.0.1.Final.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jboss-logging-3.3.2.Final.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-web-5.1.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-webmvc-5.1.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-starter-actuator-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-actuator-autoconfigure-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-actuator-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/micrometer-core-1.1.4.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/HdrHistogram-2.1.9.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/LatencyUtils-2.0.3.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-starter-freemarker-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/freemarker-2.3.28.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-context-support-5.1.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-netflix-hystrix-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-starter-aop-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/aspectjweaver-1.9.4.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-netflix-eureka-client-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/eureka-client-1.9.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jettison-1.3.7.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/stax-api-1.0.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/netflix-eventbus-0.3.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/netflix-infix-0.3.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/commons-jxpath-1.3.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/joda-time-2.10.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/antlr-runtime-3.4.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/stringtemplate-3.2.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/antlr-2.7.7.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/gson-2.8.5.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/commons-math-2.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jsr311-api-1.1.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/servo-core-0.12.21.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jersey-core-1.19.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jersey-client-1.19.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jersey-apache-client4-1.19.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/httpclient-4.5.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/httpcore-4.4.11.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/guice-4.1.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/aopalliance-1.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/compactmap-1.2.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/dexx-collections-0.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jackson-core-2.9.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jackson-databind-2.9.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jersey-servlet-1.19.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jersey-server-1.19.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/eureka-core-1.9.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/woodstox-core-asl-4.4.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/stax-api-1.0-2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/archaius-core-0.7.6.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jsr305-3.0.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/javax.inject-1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jackson-dataformat-xml-2.9.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jackson-module-jaxb-annotations-2.9.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/stax2-api-3.1.4.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/woodstox-core-5.0.3.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/xstream-1.4.10.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/xmlpull-1.1.3.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/xpp3_min-1.1.4c.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-starter-netflix-archaius-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-netflix-ribbon-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-netflix-archaius-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/commons-configuration-1.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/commons-lang-2.6.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-starter-netflix-ribbon-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/ribbon-2.3.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/ribbon-transport-2.3.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/rxnetty-contexts-0.4.9.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/rxnetty-servo-0.4.9.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/hystrix-core-1.5.18.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/rxnetty-0.4.9.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/ribbon-core-2.3.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/ribbon-httpclient-2.3.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/commons-collections-3.2.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/netflix-commons-util-0.3.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/ribbon-loadbalancer-2.3.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/netflix-statistics-0.1.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/rxjava-1.2.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/ribbon-eureka-2.3.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/lombok-1.18.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/commons-codec-1.11.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/commons-lang3-3.4.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/commons-io-1.3.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/springfox-swagger2-2.9.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/swagger-annotations-1.5.20.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/swagger-models-1.5.20.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jackson-annotations-2.9.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/springfox-spi-2.9.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/springfox-core-2.9.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/byte-buddy-1.9.12.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/springfox-schema-2.9.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/springfox-swagger-common-2.9.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/springfox-spring-web-2.9.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/guava-20.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/classmate-1.4.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-plugin-core-1.2.0.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-beans-5.1.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-context-5.1.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-expression-5.1.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-aop-5.1.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-plugin-metadata-1.2.0.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/mapstruct-1.2.0.Final.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/knife4j-spring-ui-2.0.4.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/slf4j-api-1.7.21.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/slf4j-log4j12-1.7.21.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/log4j-1.2.17.jar!/]
[15:49:54.438] DEBUG [main]o.s.b.SpringApplication - Loading source class org.springframework.cloud.bootstrap.BootstrapImportSelectorConfiguration
[15:49:54.522] DEBUG [main]o.s.c.a.AnnotationConfigApplicationContext - Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@6ad5c04e
[15:49:54.552] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
[15:49:54.579] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory'
[15:49:54.720] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.condition.BeanTypeRegistry'
[15:49:54.833] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'propertySourcesPlaceholderConfigurer'
[15:49:54.839] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.event.internalEventListenerProcessor'
[15:49:54.841] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.context.properties.ConfigurationBeanFactoryMetadata'
[15:49:54.841] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.event.internalEventListenerFactory'
[15:49:54.843] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'
[15:49:54.844] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'
[15:49:54.855] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor'
[15:49:54.858] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'configurationPropertiesBeans'
[15:49:54.858] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration'
[15:49:54.863] INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$77f5049f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[15:49:54.878] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'bootstrapImportSelectorConfiguration'
[15:49:54.880] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration'
[15:49:54.887] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'spring.cloud.config-org.springframework.cloud.bootstrap.config.PropertySourceBootstrapProperties'
[15:49:54.898] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.bootstrap.encrypt.EncryptionBootstrapConfiguration'
[15:49:54.900] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'encrypt-org.springframework.cloud.bootstrap.encrypt.KeyProperties'
[15:49:54.902] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'environmentDecryptApplicationListener'
[15:49:54.909] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'configurationPropertiesRebinder'
[15:49:54.912] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'configurationPropertiesRebinder' via factory method to bean named 'configurationPropertiesBeans'
[15:49:54.918] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration'
[15:49:54.931] DEBUG [main]o.s.b.a.l.ConditionEvaluationReportLoggingListener - 


============================
CONDITIONS EVALUATION REPORT
============================


Positive matches:
-----------------

   ConfigurationPropertiesRebinderAutoConfiguration matched:
      - @ConditionalOnBean (types: org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor; SearchStrategy: all) found bean 'org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor' (OnBeanCondition)

   ConfigurationPropertiesRebinderAutoConfiguration#configurationPropertiesBeans matched:
      - @ConditionalOnMissingBean (types: org.springframework.cloud.context.properties.ConfigurationPropertiesBeans; SearchStrategy: current) did not find any beans (OnBeanCondition)

   ConfigurationPropertiesRebinderAutoConfiguration#configurationPropertiesRebinder matched:
      - @ConditionalOnMissingBean (types: org.springframework.cloud.context.properties.ConfigurationPropertiesRebinder; SearchStrategy: current) did not find any beans (OnBeanCondition)

   EncryptionBootstrapConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.security.crypto.encrypt.TextEncryptor' (OnClassCondition)

   PropertyPlaceholderAutoConfiguration#propertySourcesPlaceholderConfigurer matched:
      - @ConditionalOnMissingBean (types: org.springframework.context.support.PropertySourcesPlaceholderConfigurer; SearchStrategy: current) did not find any beans (OnBeanCondition)


Negative matches:
-----------------

   EncryptionBootstrapConfiguration.RsaEncryptionConfiguration:
      Did not match:
         - Keystore nor key found in Environment (EncryptionBootstrapConfiguration.KeyCondition)
      Matched:
         - @ConditionalOnClass found required class 'org.springframework.security.rsa.crypto.RsaSecretEncryptor' (OnClassCondition)

   EncryptionBootstrapConfiguration.VanillaEncryptionConfiguration:
      Did not match:
         - @ConditionalOnMissingClass found unwanted class 'org.springframework.security.rsa.crypto.RsaSecretEncryptor' (OnClassCondition)

   EurekaDiscoveryClientConfigServiceBootstrapConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.cloud.config.client.ConfigServicePropertySourceLocator' (OnClassCondition)


Exclusions:
-----------

    None


Unconditional classes:
----------------------

    None



[15:49:55.048] DEBUG [main]o.s.b.c.l.ClasspathLoggingApplicationListener - Application started with classpath: [jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/classes!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-starter-netflix-eureka-server-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-starter-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-starter-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-autoconfigure-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-starter-logging-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/logback-classic-1.2.3.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/logback-core-1.2.3.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/log4j-to-slf4j-2.11.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/log4j-api-2.11.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jul-to-slf4j-1.7.26.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/javax.annotation-api-1.3.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-core-5.1.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-jcl-5.1.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/snakeyaml-1.23.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-context-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-security-crypto-5.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-commons-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-security-rsa-1.0.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/bcpkix-jdk15on-1.60.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/bcprov-jdk15on-1.60.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-netflix-eureka-server-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-starter-web-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-starter-json-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jackson-datatype-jdk8-2.9.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jackson-datatype-jsr310-2.9.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jackson-module-parameter-names-2.9.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-starter-tomcat-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/tomcat-embed-core-9.0.19.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/tomcat-embed-el-9.0.19.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/tomcat-embed-websocket-9.0.19.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/hibernate-validator-6.0.16.Final.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/validation-api-2.0.1.Final.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jboss-logging-3.3.2.Final.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-web-5.1.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-webmvc-5.1.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-starter-actuator-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-actuator-autoconfigure-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-actuator-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/micrometer-core-1.1.4.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/HdrHistogram-2.1.9.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/LatencyUtils-2.0.3.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-starter-freemarker-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/freemarker-2.3.28.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-context-support-5.1.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-netflix-hystrix-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-starter-aop-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/aspectjweaver-1.9.4.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-netflix-eureka-client-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/eureka-client-1.9.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jettison-1.3.7.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/stax-api-1.0.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/netflix-eventbus-0.3.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/netflix-infix-0.3.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/commons-jxpath-1.3.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/joda-time-2.10.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/antlr-runtime-3.4.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/stringtemplate-3.2.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/antlr-2.7.7.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/gson-2.8.5.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/commons-math-2.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jsr311-api-1.1.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/servo-core-0.12.21.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jersey-core-1.19.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jersey-client-1.19.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jersey-apache-client4-1.19.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/httpclient-4.5.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/httpcore-4.4.11.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/guice-4.1.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/aopalliance-1.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/compactmap-1.2.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/dexx-collections-0.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jackson-core-2.9.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jackson-databind-2.9.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jersey-servlet-1.19.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jersey-server-1.19.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/eureka-core-1.9.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/woodstox-core-asl-4.4.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/stax-api-1.0-2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/archaius-core-0.7.6.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jsr305-3.0.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/javax.inject-1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jackson-dataformat-xml-2.9.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jackson-module-jaxb-annotations-2.9.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/stax2-api-3.1.4.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/woodstox-core-5.0.3.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/xstream-1.4.10.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/xmlpull-1.1.3.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/xpp3_min-1.1.4c.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-starter-netflix-archaius-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-netflix-ribbon-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-netflix-archaius-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/commons-configuration-1.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/commons-lang-2.6.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-starter-netflix-ribbon-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/ribbon-2.3.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/ribbon-transport-2.3.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/rxnetty-contexts-0.4.9.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/rxnetty-servo-0.4.9.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/hystrix-core-1.5.18.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/rxnetty-0.4.9.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/ribbon-core-2.3.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/ribbon-httpclient-2.3.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/commons-collections-3.2.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/netflix-commons-util-0.3.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/ribbon-loadbalancer-2.3.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/netflix-statistics-0.1.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/rxjava-1.2.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/ribbon-eureka-2.3.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/lombok-1.18.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/commons-codec-1.11.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/commons-lang3-3.4.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/commons-io-1.3.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/springfox-swagger2-2.9.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/swagger-annotations-1.5.20.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/swagger-models-1.5.20.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jackson-annotations-2.9.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/springfox-spi-2.9.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/springfox-core-2.9.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/byte-buddy-1.9.12.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/springfox-schema-2.9.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/springfox-swagger-common-2.9.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/springfox-spring-web-2.9.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/guava-20.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/classmate-1.4.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-plugin-core-1.2.0.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-beans-5.1.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-context-5.1.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-expression-5.1.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-aop-5.1.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-plugin-metadata-1.2.0.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/mapstruct-1.2.0.Final.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/knife4j-spring-ui-2.0.4.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/slf4j-api-1.7.21.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/slf4j-log4j12-1.7.21.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/log4j-1.2.17.jar!/]
[15:49:55.077] INFO  [main]c.m.EurekaServerApplication - The following profiles are active: dev
[15:49:55.077] DEBUG [main]o.s.b.SpringApplication - Loading source class cn.mtianyan.EurekaServerApplication
[15:49:55.100] DEBUG [main]o.s.b.c.c.ConfigFileApplicationListener - Activated activeProfiles dev
[15:49:55.100] DEBUG [main]o.s.b.c.c.ConfigFileApplicationListener - Loaded config file 'jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/classes!/application.yml' (classpath:/application.yml)
[15:49:55.100] DEBUG [main]o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@731a74c
[15:49:55.116] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
[15:49:55.117] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory'
[15:49:55.797] DEBUG [main]o.s.c.e.PropertySourcesPropertyResolver - Found key 'server.port' in PropertySource 'configurationProperties' with value of type Integer
[15:49:55.798] DEBUG [main]o.s.c.e.PropertySourcesPropertyResolver - Found key 'server.port' in PropertySource 'configurationProperties' with value of type Integer
[15:49:55.834] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.condition.BeanTypeRegistry'
[15:49:56.308] WARN  [main]o.s.b.a.e.EndpointId - Endpoint ID 'service-registry' contains invalid characters, please migrate to a valid format.
[15:49:56.359] DEBUG [main]o.s.c.e.PropertySourcesPropertyResolver - Found key 'server.port' in PropertySource 'configurationProperties' with value of type Integer
[15:49:56.397] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'refreshScope'
[15:49:56.402] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.autoconfigure.RefreshAutoConfiguration$RefreshScopeBeanDefinitionEnhancer'
[15:49:56.636] DEBUG [main]o.s.c.c.s.GenericScope - Generating bean factory id from names: [apacheHttpClientBuilder, apacheHttpClientFactory, applicationTaskExecutor, archaiusEndpoint, asyncLoadBalancerInterceptor, asyncRestTemplateCustomizer, auditEventRepository, auditEventsEndpoint, auditListener, basicErrorController, beanNameHandlerMapping, beanNameViewResolver, beansEndpoint, cachesEndpoint, cachesEndpointWebExtension, characterEncodingFilter, classLoaderMetrics, commonsFeatures, compositeCompatibilityVerifier, compositeDiscoveryClient, conditionsReportEndpoint, configurableEnvironmentConfiguration, configurationPropertiesBeans, configurationPropertiesRebinder, configurationPropertiesReportEndpoint, connManFactory, contextRefresher, controllerEndpointDiscoverer, controllerEndpointHandlerMapping, controllerExposeExcludePropertyEndpointFilter, conventionErrorViewResolver, createHealthStatusHttpMapper, default.org.springframework.cloud.netflix.ribbon.RibbonAutoConfiguration.RibbonClientSpecification, default.org.springframework.cloud.netflix.ribbon.eureka.RibbonEurekaAutoConfiguration.RibbonClientSpecification, defaultServletHandlerMapping, defaultValidator, defaultViewResolver, discoveryClient, discoveryClientHealthIndicator, discoveryClientOptionalArgs, discoveryCompositeHealthIndicator, diskSpaceHealthIndicator, diskSpaceHealthIndicatorProperties, dispatcherServlet, dispatcherServletMappingDescriptionProvider, dispatcherServletRegistration, dumpEndpoint, endpointCachingOperationInvokerAdvisor, endpointMediaTypes, endpointOperationParameterMapper, envInfoContributor, environmentEndpoint, environmentEndpointWebExtension, environmentManager, error, errorAttributes, errorPageCustomizer, errorPageRegistrarBeanPostProcessor, eureka.dashboard-org.springframework.cloud.netflix.eureka.server.EurekaDashboardProperties, eureka.instance.registry-org.springframework.cloud.netflix.eureka.server.InstanceRegistryProperties, eurekaApplicationInfoManager, eurekaAutoServiceRegistration, eurekaClient, eurekaClientConfigBean, eurekaController, eurekaDiscoverClientMarker, eurekaFeature, eurekaHealthIndicator, eurekaInstanceConfigBean, eurekaRegistration, eurekaServerApplication, eurekaServerBootstrap, eurekaServerConfig, eurekaServerContext, eurekaServerFeature, eurekaServerMarkerBean, eurekaServiceRegistry, faviconHandlerMapping, faviconRequestHandler, featuresEndpoint, fileDescriptorMetrics, filterMappingDescriptionProvider, formContentFilter, freeMarkerConfiguration, freeMarkerConfigurer, freeMarkerViewResolver, gson, gsonBuilder, handlerExceptionResolver, healthAggregator, healthEndpoint, healthEndpointWebExtension, healthIndicatorRegistry, healthWebEndpointResponseMapper, heapDumpWebEndpoint, hiddenHttpMethodFilter, httpExchangeTracer, httpRequestHandlerAdapter, httpTraceEndpoint, httpTraceFilter, hystrixHealthIndicator, hystrixMetricsBinder, inetUtils, inetUtilsProperties, infoEndpoint, jacksonCodecCustomizer, jacksonObjectMapper, jacksonObjectMapperBuilder, jerseyApplication, jerseyFilterRegistration, jmxAnnotationEndpointDiscoverer, jmxIncludeExcludePropertyEndpointFilter, jmxMBeanExporter, jsonComponentModule, jvmGcMetrics, jvmMemoryMetrics, jvmThreadMetrics, loadBalancedAsyncRestTemplateInitializer, loadBalancedRestTemplateInitializerDeprecated, loadBalancerClient, loadBalancerRequestFactory, localeCharsetMappingsCustomizer, logbackMetrics, loggersEndpoint, loggingCodecCustomizer, loggingRebinder, management.endpoint.configprops-org.springframework.boot.actuate.autoconfigure.context.properties.ConfigurationPropertiesReportEndpointProperties, management.endpoint.env-org.springframework.boot.actuate.autoconfigure.env.EnvironmentEndpointProperties, management.endpoint.health-org.springframework.boot.actuate.autoconfigure.health.HealthEndpointProperties, management.endpoint.logfile-org.springframework.boot.actuate.autoconfigure.logging.LogFileWebEndpointProperties, management.endpoints.jmx-org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointProperties, management.endpoints.web-org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties, management.endpoints.web.cors-org.springframework.boot.actuate.autoconfigure.endpoint.web.CorsEndpointProperties, management.health.status-org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorProperties, management.info-org.springframework.boot.actuate.autoconfigure.info.InfoContributorProperties, management.metrics-org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties, management.metrics.export.simple-org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleProperties, management.server-org.springframework.boot.actuate.autoconfigure.web.server.ManagementServerProperties, management.trace.http-org.springframework.boot.actuate.autoconfigure.trace.http.HttpTraceProperties, managementServletContext, mappingJackson2HttpMessageConverter, mappingJackson2XmlHttpMessageConverter, mappingsEndpoint, mbeanExporter, mbeanServer, messageConverters, meterRegistryPostProcessor, methodValidationPostProcessor, metricsEndpoint, metricsHttpClientUriTagFilter, metricsHttpServerUriTagFilter, metricsRestTemplateCustomizer, metricsWebMvcConfigurer, micrometerClock, multipartConfigElement, multipartResolver, mvcContentNegotiationManager, mvcConversionService, mvcHandlerMappingIntrospector, mvcPathMatcher, mvcResourceUrlProvider, mvcUriComponentsContributor, mvcUrlPathHelper, mvcValidator, mvcViewResolver, objectNamingStrategy, org.springframework.aop.config.internalAutoProxyCreator, org.springframework.boot.actuate.autoconfigure.audit.AuditAutoConfiguration, org.springframework.boot.actuate.autoconfigure.audit.AuditAutoConfiguration$AuditEventRepositoryConfiguration, org.springframework.boot.actuate.autoconfigure.audit.AuditEventsEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.beans.BeansEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.cache.CachesEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.condition.ConditionsReportEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.context.properties.ConfigurationPropertiesReportEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.EndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointAutoConfiguration$WebEndpointServletConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.web.servlet.WebMvcEndpointManagementContextConfiguration, org.springframework.boot.actuate.autoconfigure.env.EnvironmentEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.health.HealthEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.health.HealthEndpointConfiguration, org.springframework.boot.actuate.autoconfigure.health.HealthEndpointWebExtensionConfiguration, org.springframework.boot.actuate.autoconfigure.health.HealthEndpointWebExtensionConfiguration$ServletWebHealthConfiguration, org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration, org.springframework.boot.actuate.autoconfigure.info.InfoContributorAutoConfiguration, org.springframework.boot.actuate.autoconfigure.info.InfoEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.logging.LogFileWebEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.logging.LoggersEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.management.HeapDumpWebEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.management.ThreadDumpEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.CompositeMeterRegistryAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.JvmMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.LogbackMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.MetricsEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.SystemMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.web.client.HttpClientMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.web.client.RestTemplateMetricsConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.web.servlet.WebMvcMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.web.tomcat.TomcatMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.scheduling.ScheduledTasksEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.system.DiskSpaceHealthIndicatorAutoConfiguration, org.springframework.boot.actuate.autoconfigure.trace.http.HttpTraceAutoConfiguration, org.springframework.boot.actuate.autoconfigure.trace.http.HttpTraceAutoConfiguration$ServletTraceFilterConfiguration, org.springframework.boot.actuate.autoconfigure.trace.http.HttpTraceEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.web.mappings.MappingsEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.web.mappings.MappingsEndpointAutoConfiguration$ServletWebConfiguration, org.springframework.boot.actuate.autoconfigure.web.mappings.MappingsEndpointAutoConfiguration$ServletWebConfiguration$SpringMvcConfiguration, org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration, org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$SameManagementContextConfiguration, org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$SameManagementContextConfiguration$EnableSameManagementContextConfiguration, org.springframework.boot.actuate.autoconfigure.web.servlet.ServletManagementContextAutoConfiguration, org.springframework.boot.autoconfigure.AutoConfigurationPackages, org.springframework.boot.autoconfigure.aop.AopAutoConfiguration, org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$CglibAutoProxyConfiguration, org.springframework.boot.autoconfigure.condition.BeanTypeRegistry, org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration, org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration, org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration, org.springframework.boot.autoconfigure.freemarker.FreeMarkerServletWebConfiguration, org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration, org.springframework.boot.autoconfigure.http.GsonHttpMessageConvertersConfiguration, org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration, org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration, org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration, org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration, org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2XmlHttpMessageConverterConfiguration, org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration, org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration$JacksonCodecConfiguration, org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration$LoggingCodecConfiguration, org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration, org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration, org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration, org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration, org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration, org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration, org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration, org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration, org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration$TomcatWebServerFactoryCustomizerConfiguration, org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration, org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration, org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration$EmbeddedTomcat, org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration, org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter, org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter$FaviconConfiguration, org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$DefaultErrorViewResolverConfiguration, org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration, org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration, org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration$TomcatWebSocketConfiguration, org.springframework.boot.context.properties.ConfigurationBeanFactoryMetadata, org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor, org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration, org.springframework.cloud.autoconfigure.LifecycleMvcEndpointAutoConfiguration, org.springframework.cloud.autoconfigure.PauseResumeEndpointsConfiguration, org.springframework.cloud.autoconfigure.RefreshAutoConfiguration, org.springframework.cloud.autoconfigure.RefreshAutoConfiguration$RefreshScopeBeanDefinitionEnhancer, org.springframework.cloud.autoconfigure.RefreshEndpointAutoConfiguration, org.springframework.cloud.autoconfigure.RefreshEndpointAutoConfiguration$RefreshEndpointConfiguration, org.springframework.cloud.autoconfigure.RestartEndpointWithoutIntegrationConfiguration, org.springframework.cloud.autoconfigure.WritableEnvironmentEndpointAutoConfiguration, org.springframework.cloud.client.CommonsClientAutoConfiguration, org.springframework.cloud.client.CommonsClientAutoConfiguration$ActuatorConfiguration, org.springframework.cloud.client.CommonsClientAutoConfiguration$DiscoveryLoadBalancerConfiguration, org.springframework.cloud.client.discovery.composite.CompositeDiscoveryClientAutoConfiguration, org.springframework.cloud.client.discovery.simple.SimpleDiscoveryClientAutoConfiguration, org.springframework.cloud.client.loadbalancer.AsyncLoadBalancerAutoConfiguration, org.springframework.cloud.client.loadbalancer.AsyncLoadBalancerAutoConfiguration$AsyncRestTemplateCustomizerConfig, org.springframework.cloud.client.loadbalancer.AsyncLoadBalancerAutoConfiguration$LoadBalancerInterceptorConfig, org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration, org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration$LoadBalancerInterceptorConfig, org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationAutoConfiguration, org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationConfiguration, org.springframework.cloud.client.serviceregistry.ServiceRegistryAutoConfiguration, org.springframework.cloud.client.serviceregistry.ServiceRegistryAutoConfiguration$ServiceRegistryEndpointConfiguration, org.springframework.cloud.commons.httpclient.HttpClientConfiguration, org.springframework.cloud.commons.httpclient.HttpClientConfiguration$ApacheHttpClientConfiguration, org.springframework.cloud.commons.util.UtilAutoConfiguration, org.springframework.cloud.configuration.CompatibilityVerifierAutoConfiguration, org.springframework.cloud.netflix.archaius.ArchaiusAutoConfiguration, org.springframework.cloud.netflix.archaius.ArchaiusAutoConfiguration$ArchaiusEndpointConfiguration, org.springframework.cloud.netflix.archaius.ArchaiusAutoConfiguration$PropagateEventsConfiguration, org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration, org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$EurekaHealthIndicatorConfiguration, org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration, org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration, org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration$EurekaClientConfigurationRefresher, org.springframework.cloud.netflix.eureka.config.DiscoveryClientOptionalArgsConfiguration, org.springframework.cloud.netflix.eureka.server.EurekaServerAutoConfiguration, org.springframework.cloud.netflix.eureka.server.EurekaServerAutoConfiguration$EurekaServerConfigBeanConfiguration, org.springframework.cloud.netflix.eureka.server.EurekaServerInitializerConfiguration, org.springframework.cloud.netflix.eureka.server.EurekaServerMarkerConfiguration, org.springframework.cloud.netflix.hystrix.HystrixAutoConfiguration, org.springframework.cloud.netflix.hystrix.HystrixAutoConfiguration$HystrixMetricsConfiguration, org.springframework.cloud.netflix.ribbon.RibbonAutoConfiguration, org.springframework.cloud.netflix.ribbon.eureka.RibbonEurekaAutoConfiguration, org.springframework.context.annotation.internalAutowiredAnnotationProcessor, org.springframework.context.annotation.internalCommonAnnotationProcessor, org.springframework.context.annotation.internalConfigurationAnnotationProcessor, org.springframework.context.event.internalEventListenerFactory, org.springframework.context.event.internalEventListenerProcessor, parameterNamesModule, pathMappedEndpoints, peerAwareInstanceRegistry, peerEurekaNodes, preserveErrorControllerTargetClassPostProcessor, processorMetrics, propertiesFactory, propertiesMeterFilter, propertySourcesPlaceholderConfigurer, refreshEndpoint, refreshEventListener, refreshScope, refreshScopeHealthIndicator, requestContextFilter, requestMappingHandlerAdapter, requestMappingHandlerMapping, resourceHandlerMapping, restTemplateBuilder, restTemplateCustomizer, restTemplateTagConfigurer, ribbon-org.springframework.cloud.netflix.ribbon.ServerIntrospectorProperties, ribbon.eager-load-org.springframework.cloud.netflix.ribbon.RibbonEagerLoadProperties, ribbonFeature, ribbonInterceptor, scheduledTasksEndpoint, scopedTarget.eurekaApplicationInfoManager, scopedTarget.eurekaClient, scopedTarget.eurekaRegistration, server-org.springframework.boot.autoconfigure.web.ServerProperties, serverCodecs, serviceManagementMetadataProvider, serviceRegistryEndpoint, servletEndpointDiscoverer, servletEndpointRegistrar, servletExposeExcludePropertyEndpointFilter, servletMappingDescriptionProvider, servletWebChildContextFactory, servletWebServerFactoryCustomizer, simpleConfig, simpleControllerHandlerAdapter, simpleDiscoveryClient, simpleDiscoveryProperties, simpleMeterRegistry, spring.cloud.compatibility-verifier-org.springframework.cloud.configuration.CompatibilityVerifierProperties, spring.cloud.discovery.client.health-indicator-org.springframework.cloud.client.discovery.health.DiscoveryClientHealthIndicatorProperties, spring.cloud.loadbalancer.retry-org.springframework.cloud.client.loadbalancer.LoadBalancerRetryProperties, spring.cloud.service-registry.auto-registration-org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationProperties, spring.freemarker-org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties, spring.gson-org.springframework.boot.autoconfigure.gson.GsonProperties, spring.http-org.springframework.boot.autoconfigure.http.HttpProperties, spring.info-org.springframework.boot.autoconfigure.info.ProjectInfoProperties, spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties, spring.mvc-org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties, spring.resources-org.springframework.boot.autoconfigure.web.ResourceProperties, spring.servlet.multipart-org.springframework.boot.autoconfigure.web.servlet.MultipartProperties, spring.task.execution-org.springframework.boot.autoconfigure.task.TaskExecutionProperties, spring.task.scheduling-org.springframework.boot.autoconfigure.task.TaskSchedulingProperties, springBootVersionVerifier, springClientFactory, standardGsonBuilderCustomizer, standardJacksonObjectMapperBuilderCustomizer, stringHttpMessageConverter, taskExecutorBuilder, taskSchedulerBuilder, tomcatMetricsBinder, tomcatServletWebServerFactory, tomcatServletWebServerFactoryCustomizer, tomcatWebServerFactoryCustomizer, traceFilterRegistration, traceRepository, uptimeMetrics, viewControllerHandlerMapping, viewResolver, webEndpointDiscoverer, webEndpointPathMapper, webEndpointServletHandlerMapping, webExposeExcludePropertyEndpointFilter, webMvcMetricsFilter, webMvcTagsProvider, webServerFactoryCustomizerBeanPostProcessor, websocketServletWebServerCustomizer, welcomePageHandlerMapping]
[15:49:56.654] INFO  [main]o.s.c.c.s.GenericScope - BeanFactory id=70732503-b5f4-38d3-8aa5-7fe93f9c0d3b
[15:49:56.655] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'propertySourcesPlaceholderConfigurer'
[15:49:56.658] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.event.internalEventListenerProcessor'
[15:49:56.659] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.context.properties.ConfigurationBeanFactoryMetadata'
[15:49:56.659] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'preserveErrorControllerTargetClassPostProcessor'
[15:49:56.661] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.event.internalEventListenerFactory'
[15:49:56.667] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'
[15:49:56.667] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'
[15:49:56.667] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor'
[15:49:56.669] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'methodValidationPostProcessor'
[15:49:56.693] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'methodValidationPostProcessor' via factory method to bean named 'environment'
[15:49:56.709] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.aop.config.internalAutoProxyCreator'
[15:49:56.771] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'webServerFactoryCustomizerBeanPostProcessor'
[15:49:56.771] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'errorPageRegistrarBeanPostProcessor'
[15:49:56.772] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'meterRegistryPostProcessor'
[15:49:56.830] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'meterRegistryPostProcessor' via factory method to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@731a74c'
[15:49:56.835] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'configurationPropertiesBeans'
[15:49:56.835] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration'
[15:49:56.836] INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$77f5049f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[15:49:56.891] DEBUG [main]o.s.u.c.s.UiApplicationContextUtils - Unable to locate ThemeSource with name 'themeSource': using default [org.springframework.ui.context.support.ResourceBundleThemeSource@3b74ac8]
[15:49:56.892] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'tomcatServletWebServerFactory'
[15:49:56.892] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration$EmbeddedTomcat'
[15:49:56.930] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'websocketServletWebServerCustomizer'
[15:49:56.930] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration$TomcatWebSocketConfiguration'
[15:49:56.935] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'servletWebServerFactoryCustomizer'
[15:49:56.935] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration'
[15:49:56.937] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'server-org.springframework.boot.autoconfigure.web.ServerProperties'
[15:49:56.946] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'servletWebServerFactoryCustomizer' via factory method to bean named 'server-org.springframework.boot.autoconfigure.web.ServerProperties'
[15:49:56.948] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'tomcatServletWebServerFactoryCustomizer'
[15:49:56.949] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'tomcatServletWebServerFactoryCustomizer' via factory method to bean named 'server-org.springframework.boot.autoconfigure.web.ServerProperties'
[15:49:56.950] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'tomcatWebServerFactoryCustomizer'
[15:49:56.950] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration$TomcatWebServerFactoryCustomizerConfiguration'
[15:49:56.952] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'tomcatWebServerFactoryCustomizer' via factory method to bean named 'environment'
[15:49:56.952] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'tomcatWebServerFactoryCustomizer' via factory method to bean named 'server-org.springframework.boot.autoconfigure.web.ServerProperties'
[15:49:56.955] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'localeCharsetMappingsCustomizer'
[15:49:56.955] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration'
[15:49:56.956] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration$$EnhancerBySpringCGLIB$$2f2fb844] - unable to determine constructor/method parameter names
[15:49:56.957] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'spring.http-org.springframework.boot.autoconfigure.http.HttpProperties'
[15:49:56.961] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration' via constructor to bean named 'spring.http-org.springframework.boot.autoconfigure.http.HttpProperties'
[15:49:57.032] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'errorPageCustomizer'
[15:49:57.033] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration'
[15:49:57.033] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$$EnhancerBySpringCGLIB$$87870727] - unable to determine constructor/method parameter names
[15:49:57.035] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'dispatcherServletRegistration'
[15:49:57.035] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration'
[15:49:57.036] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration$$EnhancerBySpringCGLIB$$de22612] - unable to determine constructor/method parameter names
[15:49:57.037] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'spring.mvc-org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties'
[15:49:57.038] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration' via constructor to bean named 'spring.mvc-org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties'
[15:49:57.039] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'multipartConfigElement'
[15:49:57.039] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration'
[15:49:57.040] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration$$EnhancerBySpringCGLIB$$9e204051] - unable to determine constructor/method parameter names
[15:49:57.041] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'spring.servlet.multipart-org.springframework.boot.autoconfigure.web.servlet.MultipartProperties'
[15:49:57.044] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration' via constructor to bean named 'spring.servlet.multipart-org.springframework.boot.autoconfigure.web.servlet.MultipartProperties'
[15:49:57.051] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'dispatcherServlet'
[15:49:57.051] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration'
[15:49:57.052] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration$$EnhancerBySpringCGLIB$$abda916b] - unable to determine constructor/method parameter names
[15:49:57.054] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration' via constructor to bean named 'spring.http-org.springframework.boot.autoconfigure.http.HttpProperties'
[15:49:57.054] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration' via constructor to bean named 'spring.mvc-org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties'
[15:49:57.075] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'dispatcherServletRegistration' via factory method to bean named 'dispatcherServlet'
[15:49:57.080] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration' via constructor to bean named 'server-org.springframework.boot.autoconfigure.web.ServerProperties'
[15:49:57.081] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration' via constructor to bean named 'dispatcherServletRegistration'
[15:49:57.082] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'conventionErrorViewResolver'
[15:49:57.082] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$DefaultErrorViewResolverConfiguration'
[15:49:57.082] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$DefaultErrorViewResolverConfiguration$$EnhancerBySpringCGLIB$$9c1bdbc7] - unable to determine constructor/method parameter names
[15:49:57.084] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'spring.resources-org.springframework.boot.autoconfigure.web.ResourceProperties'
[15:49:57.088] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$DefaultErrorViewResolverConfiguration' via constructor to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@731a74c'
[15:49:57.088] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$DefaultErrorViewResolverConfiguration' via constructor to bean named 'spring.resources-org.springframework.boot.autoconfigure.web.ResourceProperties'
[15:49:57.206] DEBUG [main]o.s.b.w.e.t.TomcatServletWebServerFactory - Code archive: /Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar
[15:49:57.206] DEBUG [main]o.s.b.w.e.t.TomcatServletWebServerFactory - Code archive: /Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar
[15:49:57.206] DEBUG [main]o.s.b.w.e.t.TomcatServletWebServerFactory - None of the document roots [src/main/webapp, public, static] point to a directory and will be ignored.
[15:49:57.248] INFO  [main]o.s.b.w.e.t.TomcatWebServer - Tomcat initialized with port(s): 20000 (http)
[15:49:57.270] INFO  [main]o.a.c.h.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-20000"]
[15:49:57.284] INFO  [main]o.a.c.c.StandardService - Starting service [Tomcat]
[15:49:57.285] INFO  [main]o.a.c.c.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.19]
[15:49:57.413] INFO  [main]o.a.c.c.C.[.[.[/] - Initializing Spring embedded WebApplicationContext
[15:49:57.413] DEBUG [main]o.s.w.c.ContextLoader - Published root WebApplicationContext as ServletContext attribute with name [org.springframework.web.context.WebApplicationContext.ROOT]
[15:49:57.413] INFO  [main]o.s.w.c.ContextLoader - Root WebApplicationContext: initialization completed in 2313 ms
[15:49:57.416] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'webMvcMetricsFilter'
[15:49:57.417] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.metrics.web.servlet.WebMvcMetricsAutoConfiguration'
[15:49:57.417] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.actuate.autoconfigure.metrics.web.servlet.WebMvcMetricsAutoConfiguration$$EnhancerBySpringCGLIB$$6f7cbb4a] - unable to determine constructor/method parameter names
[15:49:57.418] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'management.metrics-org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties'
[15:49:57.420] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.actuate.autoconfigure.metrics.web.servlet.WebMvcMetricsAutoConfiguration' via constructor to bean named 'management.metrics-org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties'
[15:49:57.422] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'simpleMeterRegistry'
[15:49:57.422] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration'
[15:49:57.424] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'simpleConfig'
[15:49:57.426] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'management.metrics.export.simple-org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleProperties'
[15:49:57.427] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'simpleConfig' via factory method to bean named 'management.metrics.export.simple-org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleProperties'
[15:49:57.433] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'micrometerClock'
[15:49:57.433] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration'
[15:49:57.438] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'simpleMeterRegistry' via factory method to bean named 'simpleConfig'
[15:49:57.438] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'simpleMeterRegistry' via factory method to bean named 'micrometerClock'
[15:49:57.471] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'propertiesMeterFilter'
[15:49:57.472] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'propertiesMeterFilter' via factory method to bean named 'management.metrics-org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties'
[15:49:57.475] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'metricsHttpClientUriTagFilter'
[15:49:57.475] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.metrics.web.client.HttpClientMetricsAutoConfiguration'
[15:49:57.476] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.actuate.autoconfigure.metrics.web.client.HttpClientMetricsAutoConfiguration$$EnhancerBySpringCGLIB$$9cb1f111] - unable to determine constructor/method parameter names
[15:49:57.477] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.actuate.autoconfigure.metrics.web.client.HttpClientMetricsAutoConfiguration' via constructor to bean named 'management.metrics-org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties'
[15:49:57.484] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'metricsHttpServerUriTagFilter'
[15:49:57.489] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'jvmGcMetrics'
[15:49:57.489] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.metrics.JvmMetricsAutoConfiguration'
[15:49:57.493] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'jvmMemoryMetrics'
[15:49:57.495] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'jvmThreadMetrics'
[15:49:57.496] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'classLoaderMetrics'
[15:49:57.498] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'logbackMetrics'
[15:49:57.498] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.metrics.LogbackMetricsAutoConfiguration'
[15:49:57.501] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'uptimeMetrics'
[15:49:57.501] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.metrics.SystemMetricsAutoConfiguration'
[15:49:57.505] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'processorMetrics'
[15:49:57.507] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'fileDescriptorMetrics'
[15:49:57.508] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'hystrixMetricsBinder'
[15:49:57.508] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.netflix.hystrix.HystrixAutoConfiguration$HystrixMetricsConfiguration'
[15:49:57.575] WARN  [main]c.n.c.s.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
[15:49:57.575] INFO  [main]c.n.c.s.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[15:49:57.583] DEBUG [main]c.n.h.s.HystrixPlugins - Created HystrixDynamicProperties. Using class : com.netflix.hystrix.strategy.properties.archaius.HystrixDynamicPropertiesArchaius
[15:49:57.609] INFO  [main]c.n.c.DynamicPropertyFactory - DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@5ba88be8
[15:49:57.631] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'webMvcTagsProvider'
[15:49:57.632] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'webMvcMetricsFilter' via factory method to bean named 'simpleMeterRegistry'
[15:49:57.632] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'webMvcMetricsFilter' via factory method to bean named 'webMvcTagsProvider'
[15:49:57.634] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'jerseyFilterRegistration'
[15:49:57.634] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.netflix.eureka.server.EurekaServerAutoConfiguration'
[15:49:57.636] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'eurekaApplicationInfoManager'
[15:49:57.677] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'eurekaServerConfig'
[15:49:57.678] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.netflix.eureka.server.EurekaServerAutoConfiguration$EurekaServerConfigBeanConfiguration'
[15:49:57.679] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'eurekaClientConfigBean'
[15:49:57.679] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration'
[15:49:57.679] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$$EnhancerBySpringCGLIB$$dd04d71] - unable to determine constructor/method parameter names
[15:49:57.680] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration' via constructor to bean named 'environment'
[15:49:57.682] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'eurekaClientConfigBean' via factory method to bean named 'environment'
[15:49:57.695] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'eurekaServerConfig' via factory method to bean named 'eurekaClientConfigBean'
[15:49:57.707] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'eurekaClient'
[15:49:57.712] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'eureka.instance.registry-org.springframework.cloud.netflix.eureka.server.InstanceRegistryProperties'
[15:49:57.718] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'jerseyApplication'
[15:49:57.721] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'jerseyApplication' via factory method to bean named 'environment'
[15:49:57.721] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'jerseyApplication' via factory method to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@731a74c'
[15:49:57.791] DEBUG [main]o.s.c.a.ClassPathScanningCandidateComponentProvider - Identified candidate component class: URL [jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/eureka-client-1.9.8.jar!/com/netflix/discovery/provider/DiscoveryJerseyProvider.class]
[15:49:57.814] DEBUG [main]o.s.c.a.ClassPathScanningCandidateComponentProvider - Identified candidate component class: URL [jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/eureka-core-1.9.8.jar!/com/netflix/eureka/resources/ASGResource.class]
[15:49:57.816] DEBUG [main]o.s.c.a.ClassPathScanningCandidateComponentProvider - Identified candidate component class: URL [jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/eureka-core-1.9.8.jar!/com/netflix/eureka/resources/ApplicationsResource.class]
[15:49:57.817] DEBUG [main]o.s.c.a.ClassPathScanningCandidateComponentProvider - Identified candidate component class: URL [jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/eureka-core-1.9.8.jar!/com/netflix/eureka/resources/InstancesResource.class]
[15:49:57.818] DEBUG [main]o.s.c.a.ClassPathScanningCandidateComponentProvider - Identified candidate component class: URL [jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/eureka-core-1.9.8.jar!/com/netflix/eureka/resources/PeerReplicationResource.class]
[15:49:57.818] DEBUG [main]o.s.c.a.ClassPathScanningCandidateComponentProvider - Identified candidate component class: URL [jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/eureka-core-1.9.8.jar!/com/netflix/eureka/resources/SecureVIPResource.class]
[15:49:57.818] DEBUG [main]o.s.c.a.ClassPathScanningCandidateComponentProvider - Identified candidate component class: URL [jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/eureka-core-1.9.8.jar!/com/netflix/eureka/resources/ServerInfoResource.class]
[15:49:57.818] DEBUG [main]o.s.c.a.ClassPathScanningCandidateComponentProvider - Identified candidate component class: URL [jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/eureka-core-1.9.8.jar!/com/netflix/eureka/resources/StatusResource.class]
[15:49:57.819] DEBUG [main]o.s.c.a.ClassPathScanningCandidateComponentProvider - Identified candidate component class: URL [jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/eureka-core-1.9.8.jar!/com/netflix/eureka/resources/VIPResource.class]
[15:49:57.838] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'jerseyFilterRegistration' via factory method to bean named 'jerseyApplication'
[15:49:57.853] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'traceFilterRegistration'
[15:49:57.855] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'httpTraceFilter'
[15:49:57.855] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.trace.http.HttpTraceAutoConfiguration$ServletTraceFilterConfiguration'
[15:49:57.856] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'traceRepository'
[15:49:57.856] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.trace.http.HttpTraceAutoConfiguration'
[15:49:57.860] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'httpExchangeTracer'
[15:49:57.861] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'management.trace.http-org.springframework.boot.actuate.autoconfigure.trace.http.HttpTraceProperties'
[15:49:57.862] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'httpExchangeTracer' via factory method to bean named 'management.trace.http-org.springframework.boot.actuate.autoconfigure.trace.http.HttpTraceProperties'
[15:49:57.864] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'httpTraceFilter' via factory method to bean named 'traceRepository'
[15:49:57.864] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'httpTraceFilter' via factory method to bean named 'httpExchangeTracer'
[15:49:57.866] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'traceFilterRegistration' via factory method to bean named 'httpTraceFilter'
[15:49:57.867] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'servletEndpointRegistrar'
[15:49:57.867] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration'
[15:49:57.867] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration$$EnhancerBySpringCGLIB$$120f597d] - unable to determine constructor/method parameter names
[15:49:57.869] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration' via constructor to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@731a74c'
[15:49:57.870] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'management.endpoints.web-org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties'
[15:49:57.872] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'servletEndpointDiscoverer'
[15:49:57.872] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointAutoConfiguration$WebEndpointServletConfiguration'
[15:49:57.873] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'servletEndpointDiscoverer' via factory method to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@731a74c'
[15:49:57.877] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'webEndpointPathMapper'
[15:49:57.877] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointAutoConfiguration'
[15:49:57.878] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointAutoConfiguration$$EnhancerBySpringCGLIB$$ed539f8d] - unable to determine constructor/method parameter names
[15:49:57.879] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointAutoConfiguration' via constructor to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@731a74c'
[15:49:57.879] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointAutoConfiguration' via constructor to bean named 'management.endpoints.web-org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties'
[15:49:57.884] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'servletExposeExcludePropertyEndpointFilter'
[15:49:57.884] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration'
[15:49:57.886] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'servletExposeExcludePropertyEndpointFilter' via factory method to bean named 'management.endpoints.web-org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties'
[15:49:57.894] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'servletEndpointRegistrar' via factory method to bean named 'management.endpoints.web-org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties'
[15:49:57.894] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'servletEndpointRegistrar' via factory method to bean named 'servletEndpointDiscoverer'
[15:49:57.900] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'archaiusEndpoint'
[15:49:57.900] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.netflix.archaius.ArchaiusAutoConfiguration$ArchaiusEndpointConfiguration'
[15:49:57.905] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'auditEventsEndpoint'
[15:49:57.905] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.audit.AuditEventsEndpointAutoConfiguration'
[15:49:57.906] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'auditEventRepository'
[15:49:57.906] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.audit.AuditAutoConfiguration$AuditEventRepositoryConfiguration'
[15:49:57.909] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'auditEventsEndpoint' via factory method to bean named 'auditEventRepository'
[15:49:57.912] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'beansEndpoint'
[15:49:57.912] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.beans.BeansEndpointAutoConfiguration'
[15:49:57.913] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'beansEndpoint' via factory method to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@731a74c'
[15:49:57.915] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'cachesEndpoint'
[15:49:57.916] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.cache.CachesEndpointAutoConfiguration'
[15:49:57.922] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'healthEndpoint'
[15:49:57.923] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.health.HealthEndpointConfiguration'
[15:49:57.924] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'healthAggregator'
[15:49:57.924] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration'
[15:49:57.925] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration$$EnhancerBySpringCGLIB$$655d1d62] - unable to determine constructor/method parameter names
[15:49:57.926] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'management.health.status-org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorProperties'
[15:49:57.927] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration' via constructor to bean named 'management.health.status-org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorProperties'
[15:49:57.931] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'healthIndicatorRegistry'
[15:49:57.932] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'healthIndicatorRegistry' via factory method to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@731a74c'
[15:49:57.934] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'diskSpaceHealthIndicator'
[15:49:57.934] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.system.DiskSpaceHealthIndicatorAutoConfiguration'
[15:49:57.935] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'diskSpaceHealthIndicatorProperties'
[15:49:57.939] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'diskSpaceHealthIndicator' via factory method to bean named 'diskSpaceHealthIndicatorProperties'
[15:49:57.940] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'refreshScopeHealthIndicator'
[15:49:57.941] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.autoconfigure.RefreshEndpointAutoConfiguration'
[15:49:57.942] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'configurationPropertiesRebinder'
[15:49:57.943] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'configurationPropertiesRebinder' via factory method to bean named 'configurationPropertiesBeans'
[15:49:57.944] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'refreshScopeHealthIndicator' via factory method to bean named 'configurationPropertiesRebinder'
[15:49:57.946] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'discoveryCompositeHealthIndicator'
[15:49:57.946] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.client.CommonsClientAutoConfiguration$DiscoveryLoadBalancerConfiguration'
[15:49:57.948] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'eurekaHealthIndicator'
[15:49:57.948] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$EurekaHealthIndicatorConfiguration'
[15:49:57.950] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'eurekaInstanceConfigBean'
[15:49:57.952] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'inetUtils'
[15:49:57.952] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.commons.util.UtilAutoConfiguration'
[15:49:57.953] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'inetUtilsProperties'
[15:49:57.959] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'inetUtils' via factory method to bean named 'inetUtilsProperties'
[15:49:57.961] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'serviceManagementMetadataProvider'
[15:49:57.962] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'eurekaInstanceConfigBean' via factory method to bean named 'inetUtils'
[15:49:57.962] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'eurekaInstanceConfigBean' via factory method to bean named 'serviceManagementMetadataProvider'
[15:49:57.962] DEBUG [main]o.s.c.e.PropertySourcesPropertyResolver - Found key 'eureka.instance.hostname' in PropertySource 'configurationProperties' with value of type String
[15:49:57.963] DEBUG [main]o.s.c.e.PropertySourcesPropertyResolver - Found key 'server.port' in PropertySource 'configurationProperties' with value of type Integer
[15:49:57.967] DEBUG [main]o.s.c.e.PropertySourcesPropertyResolver - Found key 'spring.cloud.client.hostname' in PropertySource 'configurationProperties' with value of type String
[15:49:57.967] DEBUG [main]o.s.c.e.PropertySourcesPropertyResolver - Found key 'spring.application.name' in PropertySource 'configurationProperties' with value of type String
[15:49:57.967] DEBUG [main]o.s.c.e.PropertySourcesPropertyResolver - Found key 'server.port' in PropertySource 'configurationProperties' with value of type Integer
[15:49:57.969] DEBUG [main]o.s.c.n.e.m.DefaultManagementMetadataProvider - Constructed eureka meta-data healthcheckUrl: http://localhost:20000/actuator/health
[15:49:57.969] DEBUG [main]o.s.c.n.e.m.DefaultManagementMetadataProvider - Constructed eureka meta-data statusPageUrl: http://localhost:20000/actuator/info
[15:49:57.970] DEBUG [main]o.s.c.e.PropertySourcesPropertyResolver - Found key 'spring.application.name' in PropertySource 'configurationProperties' with value of type String
[15:49:57.975] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'eurekaHealthIndicator' via factory method to bean named 'eurekaClient'
[15:49:57.975] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'eurekaHealthIndicator' via factory method to bean named 'eurekaInstanceConfigBean'
[15:49:57.975] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'eurekaHealthIndicator' via factory method to bean named 'eurekaClientConfigBean'
[15:49:57.978] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'discoveryClientHealthIndicator'
[15:49:57.979] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'spring.cloud.discovery.client.health-indicator-org.springframework.cloud.client.discovery.health.DiscoveryClientHealthIndicatorProperties'
[15:49:57.980] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'discoveryClientHealthIndicator' via factory method to bean named 'spring.cloud.discovery.client.health-indicator-org.springframework.cloud.client.discovery.health.DiscoveryClientHealthIndicatorProperties'
[15:49:57.984] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'discoveryCompositeHealthIndicator' via factory method to bean named 'healthAggregator'
[15:49:57.984] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'discoveryCompositeHealthIndicator' via factory method to bean named 'eurekaHealthIndicator'
[15:49:57.984] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'discoveryCompositeHealthIndicator' via factory method to bean named 'discoveryClientHealthIndicator'
[15:49:57.986] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'hystrixHealthIndicator'
[15:49:57.986] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.netflix.hystrix.HystrixAutoConfiguration'
[15:49:57.994] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'healthEndpoint' via factory method to bean named 'healthAggregator'
[15:49:57.994] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'healthEndpoint' via factory method to bean named 'healthIndicatorRegistry'
[15:49:57.996] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'conditionsReportEndpoint'
[15:49:57.997] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.condition.ConditionsReportEndpointAutoConfiguration'
[15:49:57.998] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'conditionsReportEndpoint' via factory method to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@731a74c'
[15:49:58.001] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'configurationPropertiesReportEndpoint'
[15:49:58.001] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.context.properties.ConfigurationPropertiesReportEndpointAutoConfiguration'
[15:49:58.001] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.actuate.autoconfigure.context.properties.ConfigurationPropertiesReportEndpointAutoConfiguration$$EnhancerBySpringCGLIB$$b85dbaad] - unable to determine constructor/method parameter names
[15:49:58.003] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'management.endpoint.configprops-org.springframework.boot.actuate.autoconfigure.context.properties.ConfigurationPropertiesReportEndpointProperties'
[15:49:58.004] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.actuate.autoconfigure.context.properties.ConfigurationPropertiesReportEndpointAutoConfiguration' via constructor to bean named 'management.endpoint.configprops-org.springframework.boot.actuate.autoconfigure.context.properties.ConfigurationPropertiesReportEndpointProperties'
[15:49:58.014] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'environmentEndpoint'
[15:49:58.014] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.autoconfigure.WritableEnvironmentEndpointAutoConfiguration'
[15:49:58.015] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.cloud.autoconfigure.WritableEnvironmentEndpointAutoConfiguration$$EnhancerBySpringCGLIB$$fb90ec9d] - unable to determine constructor/method parameter names
[15:49:58.017] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'management.endpoint.env-org.springframework.boot.actuate.autoconfigure.env.EnvironmentEndpointProperties'
[15:49:58.019] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.cloud.autoconfigure.WritableEnvironmentEndpointAutoConfiguration' via constructor to bean named 'management.endpoint.env-org.springframework.boot.actuate.autoconfigure.env.EnvironmentEndpointProperties'
[15:49:58.020] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'environmentEndpoint' via factory method to bean named 'environment'
[15:49:58.025] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'infoEndpoint'
[15:49:58.026] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.info.InfoEndpointAutoConfiguration'
[15:49:58.028] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'envInfoContributor'
[15:49:58.029] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.info.InfoContributorAutoConfiguration'
[15:49:58.029] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.actuate.autoconfigure.info.InfoContributorAutoConfiguration$$EnhancerBySpringCGLIB$$82405416] - unable to determine constructor/method parameter names
[15:49:58.030] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'management.info-org.springframework.boot.actuate.autoconfigure.info.InfoContributorProperties'
[15:49:58.032] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.actuate.autoconfigure.info.InfoContributorAutoConfiguration' via constructor to bean named 'management.info-org.springframework.boot.actuate.autoconfigure.info.InfoContributorProperties'
[15:49:58.034] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'envInfoContributor' via factory method to bean named 'environment'
[15:49:58.037] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'loggersEndpoint'
[15:49:58.037] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.logging.LoggersEndpointAutoConfiguration'
[15:49:58.039] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'loggersEndpoint' via factory method to bean named 'springBootLoggingSystem'
[15:49:58.043] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'heapDumpWebEndpoint'
[15:49:58.043] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.management.HeapDumpWebEndpointAutoConfiguration'
[15:49:58.047] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'dumpEndpoint'
[15:49:58.048] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.management.ThreadDumpEndpointAutoConfiguration'
[15:49:58.050] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'metricsEndpoint'
[15:49:58.050] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.metrics.MetricsEndpointAutoConfiguration'
[15:49:58.052] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'metricsEndpoint' via factory method to bean named 'simpleMeterRegistry'
[15:49:58.056] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'scheduledTasksEndpoint'
[15:49:58.056] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.scheduling.ScheduledTasksEndpointAutoConfiguration'
[15:49:58.067] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'httpTraceEndpoint'
[15:49:58.067] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.trace.http.HttpTraceEndpointAutoConfiguration'
[15:49:58.070] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'httpTraceEndpoint' via factory method to bean named 'traceRepository'
[15:49:58.073] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'mappingsEndpoint'
[15:49:58.073] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.web.mappings.MappingsEndpointAutoConfiguration'
[15:49:58.075] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'mappingsEndpoint' via factory method to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@731a74c'
[15:49:58.078] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'dispatcherServletMappingDescriptionProvider'
[15:49:58.078] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.web.mappings.MappingsEndpointAutoConfiguration$ServletWebConfiguration$SpringMvcConfiguration'
[15:49:58.087] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'servletMappingDescriptionProvider'
[15:49:58.088] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.web.mappings.MappingsEndpointAutoConfiguration$ServletWebConfiguration'
[15:49:58.091] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'filterMappingDescriptionProvider'
[15:49:58.093] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'refreshEndpoint'
[15:49:58.093] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.autoconfigure.RefreshEndpointAutoConfiguration$RefreshEndpointConfiguration'
[15:49:58.095] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'contextRefresher'
[15:49:58.095] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.autoconfigure.RefreshAutoConfiguration'
[15:49:58.098] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'contextRefresher' via factory method to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@731a74c'
[15:49:58.098] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'contextRefresher' via factory method to bean named 'refreshScope'
[15:49:58.101] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'refreshEndpoint' via factory method to bean named 'contextRefresher'
[15:49:58.103] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'featuresEndpoint'
[15:49:58.103] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.client.CommonsClientAutoConfiguration$ActuatorConfiguration'
[15:49:58.105] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'eurekaFeature'
[15:49:58.107] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'commonsFeatures'
[15:49:58.107] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'ribbonFeature'
[15:49:58.108] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.netflix.ribbon.RibbonAutoConfiguration'
[15:49:58.109] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'default.org.springframework.cloud.netflix.ribbon.RibbonAutoConfiguration.RibbonClientSpecification'
[15:49:58.113] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'default.org.springframework.cloud.netflix.ribbon.eureka.RibbonEurekaAutoConfiguration.RibbonClientSpecification'
[15:49:58.115] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'ribbon.eager-load-org.springframework.cloud.netflix.ribbon.RibbonEagerLoadProperties'
[15:49:58.119] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'eurekaServerFeature'
[15:49:58.122] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'serviceRegistryEndpoint'
[15:49:58.122] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.client.serviceregistry.ServiceRegistryAutoConfiguration$ServiceRegistryEndpointConfiguration'
[15:49:58.124] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.client.serviceregistry.ServiceRegistryAutoConfiguration'
[15:49:58.124] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.cloud.client.serviceregistry.ServiceRegistryAutoConfiguration$ServiceRegistryEndpointConfiguration' via constructor to bean named 'org.springframework.cloud.client.serviceregistry.ServiceRegistryAutoConfiguration'
[15:49:58.125] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'eurekaRegistration'
[15:49:58.137] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'eurekaServiceRegistry'
[15:49:58.138] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'serviceRegistryEndpoint' via factory method to bean named 'eurekaServiceRegistry'
[15:49:58.144] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'cachesEndpointWebExtension'
[15:49:58.145] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'cachesEndpointWebExtension' via factory method to bean named 'cachesEndpoint'
[15:49:58.147] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'healthEndpointWebExtension'
[15:49:58.147] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.health.HealthEndpointWebExtensionConfiguration$ServletWebHealthConfiguration'
[15:49:58.149] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'healthWebEndpointResponseMapper'
[15:49:58.149] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.health.HealthEndpointWebExtensionConfiguration'
[15:49:58.150] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'createHealthStatusHttpMapper'
[15:49:58.151] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'createHealthStatusHttpMapper' via factory method to bean named 'management.health.status-org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorProperties'
[15:49:58.154] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'management.endpoint.health-org.springframework.boot.actuate.autoconfigure.health.HealthEndpointProperties'
[15:49:58.155] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'healthWebEndpointResponseMapper' via factory method to bean named 'createHealthStatusHttpMapper'
[15:49:58.156] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'healthWebEndpointResponseMapper' via factory method to bean named 'management.endpoint.health-org.springframework.boot.actuate.autoconfigure.health.HealthEndpointProperties'
[15:49:58.156] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'healthEndpointWebExtension' via factory method to bean named 'healthEndpoint'
[15:49:58.156] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'healthEndpointWebExtension' via factory method to bean named 'healthWebEndpointResponseMapper'
[15:49:58.158] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'environmentEndpointWebExtension'
[15:49:58.160] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'environmentManager'
[15:49:58.160] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.autoconfigure.LifecycleMvcEndpointAutoConfiguration'
[15:49:58.161] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'environmentManager' via factory method to bean named 'environment'
[15:49:58.163] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'environmentEndpointWebExtension' via factory method to bean named 'environmentEndpoint'
[15:49:58.163] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'environmentEndpointWebExtension' via factory method to bean named 'environmentManager'
[15:49:58.169] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'requestContextFilter'
[15:49:58.170] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'hiddenHttpMethodFilter'
[15:49:58.170] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration'
[15:49:58.173] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'formContentFilter'
[15:49:58.184] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'characterEncodingFilter'
[15:49:58.194] DEBUG [main]o.s.b.w.s.ServletContextInitializerBeans - Mapping filters: filterRegistrationBean urls=[/*], filterRegistrationBean urls=[/*], filterRegistrationBean urls=[/eureka/*], characterEncodingFilter urls=[/*], hiddenHttpMethodFilter urls=[/*], formContentFilter urls=[/*], requestContextFilter urls=[/*]
[15:49:58.194] DEBUG [main]o.s.b.w.s.ServletContextInitializerBeans - Mapping servlets: dispatcherServlet urls=[/]
[15:49:58.234] DEBUG [main]o.s.b.a.m.w.s.WebMvcMetricsFilter - Filter 'webMvcMetricsFilter' configured for use
[15:49:58.234] DEBUG [main]o.s.b.w.s.f.OrderedRequestContextFilter - Filter 'requestContextFilter' configured for use
[15:49:58.235] DEBUG [main]o.s.b.w.s.f.OrderedHiddenHttpMethodFilter - Filter 'hiddenHttpMethodFilter' configured for use
[15:49:58.235] DEBUG [main]o.s.b.w.s.f.OrderedCharacterEncodingFilter - Filter 'characterEncodingFilter' configured for use
[15:49:58.235] DEBUG [main]o.s.b.a.w.t.s.HttpTraceFilter - Filter 'httpTraceFilter' configured for use
[15:49:58.363] INFO  [main]c.s.j.s.i.a.WebApplicationImpl - Initiating Jersey application, version 'Jersey: 1.19.1 03/11/2016 02:08 PM'
[15:49:58.466] INFO  [main]c.n.d.p.DiscoveryJerseyProvider - Using JSON encoding codec LegacyJacksonJson
[15:49:58.466] INFO  [main]c.n.d.p.DiscoveryJerseyProvider - Using JSON decoding codec LegacyJacksonJson
[15:49:58.716] INFO  [main]c.n.d.p.DiscoveryJerseyProvider - Using XML encoding codec XStreamXml
[15:49:58.716] INFO  [main]c.n.d.p.DiscoveryJerseyProvider - Using XML decoding codec XStreamXml
[15:49:59.154] DEBUG [main]o.s.b.w.s.f.OrderedFormContentFilter - Filter 'formContentFilter' configured for use
[15:49:59.167] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'eurekaServerApplication'
[15:49:59.168] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.netflix.eureka.server.EurekaServerMarkerConfiguration'
[15:49:59.168] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'eurekaServerMarkerBean'
[15:49:59.171] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.AutoConfigurationPackages'
[15:49:59.171] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration'
[15:49:59.171] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration'
[15:49:59.172] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration'
[15:49:59.172] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.netflix.archaius.ArchaiusAutoConfiguration$PropagateEventsConfiguration'
[15:49:59.174] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.netflix.archaius.ArchaiusAutoConfiguration'
[15:49:59.177] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'configurableEnvironmentConfiguration'
[15:49:59.178] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'configurableEnvironmentConfiguration' via factory method to bean named 'environment'
[15:49:59.178] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'configurableEnvironmentConfiguration' via factory method to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@731a74c'
[15:49:59.179] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'configurableEnvironmentConfiguration'
[15:49:59.180] DEBUG [main]o.s.c.e.PropertySourcesPropertyResolver - Found key 'spring.application.name' in PropertySource 'configurationProperties' with value of type String
[15:49:59.181] WARN  [main]c.n.c.s.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
[15:49:59.181] INFO  [main]c.n.c.s.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[15:49:59.188] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration'
[15:49:59.189] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration$$EnhancerBySpringCGLIB$$e77a9a78] - unable to determine constructor/method parameter names
[15:49:59.191] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'spring.task.execution-org.springframework.boot.autoconfigure.task.TaskExecutionProperties'
[15:49:59.193] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration' via constructor to bean named 'spring.task.execution-org.springframework.boot.autoconfigure.task.TaskExecutionProperties'
[15:49:59.194] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'taskExecutorBuilder'
[15:49:59.203] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration'
[15:49:59.204] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'defaultValidator'
[15:49:59.220] DEBUG [main]o.h.v.i.e.r.TraversableResolvers - Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
[15:49:59.220] DEBUG [main]o.h.v.m.ResourceBundleMessageInterpolator - Loaded expression factory via original TCCL
[15:49:59.230] DEBUG [main]o.h.v.i.e.r.TraversableResolvers - Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
[15:49:59.232] DEBUG [main]o.h.v.i.e.ConfigurationImpl - Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
[15:49:59.232] DEBUG [main]o.h.v.i.e.ConfigurationImpl - Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
[15:49:59.233] DEBUG [main]o.h.v.i.e.ConfigurationImpl - Setting custom ParameterNameProvider of type org.springframework.validation.beanvalidation.LocalValidatorFactoryBean$1
[15:49:59.235] DEBUG [main]o.h.v.i.x.c.ValidationXmlParser - Trying to load META-INF/validation.xml for XML based Validator configuration.
[15:49:59.235] DEBUG [main]o.h.v.i.x.c.ResourceLoaderHelper - Trying to load META-INF/validation.xml via user class loader
[15:49:59.236] DEBUG [main]o.h.v.i.x.c.ResourceLoaderHelper - Trying to load META-INF/validation.xml via TCCL
[15:49:59.237] DEBUG [main]o.h.v.i.x.c.ResourceLoaderHelper - Trying to load META-INF/validation.xml via Hibernate Validator's class loader
[15:49:59.237] DEBUG [main]o.h.v.i.x.c.ValidationXmlParser - No META-INF/validation.xml found. Using annotation based configuration only.
[15:49:59.255] DEBUG [main]o.h.v.i.e.ValidatorFactoryImpl - HV000234: Using org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator as ValidatorFactory-scoped message interpolator.
[15:49:59.255] DEBUG [main]o.h.v.i.e.ValidatorFactoryImpl - HV000234: Using org.hibernate.validator.internal.engine.resolver.TraverseAllTraversableResolver as ValidatorFactory-scoped traversable resolver.
[15:49:59.255] DEBUG [main]o.h.v.i.e.ValidatorFactoryImpl - HV000234: Using org.hibernate.validator.internal.util.ExecutableParameterNameProvider as ValidatorFactory-scoped parameter name provider.
[15:49:59.255] DEBUG [main]o.h.v.i.e.ValidatorFactoryImpl - HV000234: Using org.hibernate.validator.internal.engine.DefaultClockProvider as ValidatorFactory-scoped clock provider.
[15:49:59.255] DEBUG [main]o.h.v.i.e.ValidatorFactoryImpl - HV000234: Using org.hibernate.validator.internal.engine.scripting.DefaultScriptEvaluatorFactory as ValidatorFactory-scoped script evaluator factory.
[15:49:59.256] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration'
[15:49:59.257] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'error'
[15:49:59.260] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'beanNameViewResolver'
[15:49:59.262] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'errorAttributes'
[15:49:59.263] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'basicErrorController'
[15:49:59.264] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'basicErrorController' via factory method to bean named 'errorAttributes'
[15:49:59.265] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter$FaviconConfiguration'
[15:49:59.266] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter$FaviconConfiguration$$EnhancerBySpringCGLIB$$2509254d] - unable to determine constructor/method parameter names
[15:49:59.267] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter$FaviconConfiguration' via constructor to bean named 'spring.resources-org.springframework.boot.autoconfigure.web.ResourceProperties'
[15:49:59.267] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'faviconHandlerMapping'
[15:49:59.275] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'faviconRequestHandler'
[15:49:59.295] DEBUG [main]o.s.w.s.h.SimpleUrlHandlerMapping - Patterns [/**/favicon.ico] in 'faviconHandlerMapping'
[15:49:59.295] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration'
[15:49:59.296] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration$$EnhancerBySpringCGLIB$$c6c85222] - unable to determine constructor/method parameter names
[15:49:59.298] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration' via constructor to bean named 'org.springframework.beans.factory.support.DefaultListableBeanFactory@50b494a6'
[15:49:59.320] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter'
[15:49:59.321] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter$$EnhancerBySpringCGLIB$$68cc1d07] - unable to determine constructor/method parameter names
[15:49:59.322] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter' via constructor to bean named 'spring.resources-org.springframework.boot.autoconfigure.web.ResourceProperties'
[15:49:59.322] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter' via constructor to bean named 'spring.mvc-org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties'
[15:49:59.322] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter' via constructor to bean named 'org.springframework.beans.factory.support.DefaultListableBeanFactory@50b494a6'
[15:49:59.324] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'metricsWebMvcConfigurer'
[15:49:59.325] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'metricsWebMvcConfigurer' via factory method to bean named 'simpleMeterRegistry'
[15:49:59.325] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'metricsWebMvcConfigurer' via factory method to bean named 'webMvcTagsProvider'
[15:49:59.326] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'requestMappingHandlerAdapter'
[15:49:59.368] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'mvcContentNegotiationManager'
[15:49:59.372] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'messageConverters'
[15:49:59.372] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration'
[15:49:59.373] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$$EnhancerBySpringCGLIB$$760ecd36] - unable to determine constructor/method parameter names
[15:49:59.375] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'stringHttpMessageConverter'
[15:49:59.375] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration'
[15:49:59.376] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration$$EnhancerBySpringCGLIB$$a91c93d6] - unable to determine constructor/method parameter names
[15:49:59.376] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration' via constructor to bean named 'spring.http-org.springframework.boot.autoconfigure.http.HttpProperties'
[15:49:59.381] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'mappingJackson2XmlHttpMessageConverter'
[15:49:59.381] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2XmlHttpMessageConverterConfiguration'
[15:49:59.383] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'jacksonObjectMapperBuilder'
[15:49:59.383] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration'
[15:49:59.384] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration$$EnhancerBySpringCGLIB$$69bb434c] - unable to determine constructor/method parameter names
[15:49:59.384] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration' via constructor to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@731a74c'
[15:49:59.385] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'standardJacksonObjectMapperBuilderCustomizer'
[15:49:59.385] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration'
[15:49:59.387] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties'
[15:49:59.387] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'standardJacksonObjectMapperBuilderCustomizer' via factory method to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@731a74c'
[15:49:59.388] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'standardJacksonObjectMapperBuilderCustomizer' via factory method to bean named 'spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties'
[15:49:59.390] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'jacksonObjectMapperBuilder' via factory method to bean named 'standardJacksonObjectMapperBuilderCustomizer'
[15:49:59.395] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'parameterNamesModule'
[15:49:59.395] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration'
[15:49:59.399] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'jsonComponentModule'
[15:49:59.400] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration'
[15:49:59.407] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'mappingJackson2XmlHttpMessageConverter' via factory method to bean named 'jacksonObjectMapperBuilder'
[15:49:59.419] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'mappingJackson2HttpMessageConverter'
[15:49:59.419] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration'
[15:49:59.420] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'jacksonObjectMapper'
[15:49:59.421] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration'
[15:49:59.422] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'jacksonObjectMapper' via factory method to bean named 'jacksonObjectMapperBuilder'
[15:49:59.441] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'mappingJackson2HttpMessageConverter' via factory method to bean named 'jacksonObjectMapper'
[15:49:59.472] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'mvcConversionService'
[15:49:59.481] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'mvcValidator'
[15:49:59.487] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'applicationTaskExecutor'
[15:49:59.488] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'applicationTaskExecutor' via factory method to bean named 'taskExecutorBuilder'
[15:49:59.493] INFO  [main]o.s.s.c.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
[15:49:59.506] DEBUG [main]o.s.w.s.m.m.a.RequestMappingHandlerAdapter - ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
[15:49:59.557] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'requestMappingHandlerMapping'
[15:49:59.569] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'mvcResourceUrlProvider'
[15:49:59.606] DEBUG [main]o.s.w.s.m.m.a.RequestMappingHandlerMapping - 4 mappings in 'requestMappingHandlerMapping'
[15:49:59.606] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'mvcPathMatcher'
[15:49:59.607] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'mvcUrlPathHelper'
[15:49:59.608] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'viewControllerHandlerMapping'
[15:49:59.608] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'beanNameHandlerMapping'
[15:49:59.612] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'resourceHandlerMapping'
[15:49:59.618] DEBUG [main]o.s.w.s.h.SimpleUrlHandlerMapping - Patterns [/webjars/**, /**] in 'resourceHandlerMapping'
[15:49:59.618] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'defaultServletHandlerMapping'
[15:49:59.618] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'mvcUriComponentsContributor'
[15:49:59.621] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'httpRequestHandlerAdapter'
[15:49:59.622] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'simpleControllerHandlerAdapter'
[15:49:59.622] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'handlerExceptionResolver'
[15:49:59.636] DEBUG [main]o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - ControllerAdvice beans: 0 @ExceptionHandler, 1 ResponseBodyAdvice
[15:49:59.639] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'mvcViewResolver'
[15:49:59.647] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'defaultViewResolver'
[15:49:59.660] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'viewResolver'
[15:49:59.661] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'viewResolver' via factory method to bean named 'org.springframework.beans.factory.support.DefaultListableBeanFactory@50b494a6'
[15:49:59.665] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'freeMarkerViewResolver'
[15:49:59.665] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.freemarker.FreeMarkerServletWebConfiguration'
[15:49:59.666] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.autoconfigure.freemarker.FreeMarkerServletWebConfiguration$$EnhancerBySpringCGLIB$$6ef37c8c] - unable to determine constructor/method parameter names
[15:49:59.667] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'spring.freemarker-org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties'
[15:49:59.668] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.freemarker.FreeMarkerServletWebConfiguration' via constructor to bean named 'spring.freemarker-org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties'
[15:49:59.673] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'welcomePageHandlerMapping'
[15:49:59.673] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'welcomePageHandlerMapping' via factory method to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@731a74c'
[15:49:59.748] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.audit.AuditAutoConfiguration'
[15:49:59.748] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.actuate.autoconfigure.audit.AuditAutoConfiguration$$EnhancerBySpringCGLIB$$fd900a11] - unable to determine constructor/method parameter names
[15:49:59.750] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'auditListener'
[15:49:59.753] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'loggingRebinder'
[15:49:59.754] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'refreshEventListener'
[15:49:59.755] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'refreshEventListener' via factory method to bean named 'contextRefresher'
[15:49:59.757] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.web.servlet.ServletManagementContextAutoConfiguration'
[15:49:59.757] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'servletWebChildContextFactory'
[15:49:59.759] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'managementServletContext'
[15:49:59.760] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'managementServletContext' via factory method to bean named 'management.endpoints.web-org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties'
[15:49:59.762] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.health.HealthEndpointAutoConfiguration'
[15:49:59.762] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.endpoint.EndpointAutoConfiguration'
[15:49:59.763] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'endpointOperationParameterMapper'
[15:49:59.767] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'endpointCachingOperationInvokerAdvisor'
[15:49:59.767] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'endpointCachingOperationInvokerAdvisor' via factory method to bean named 'environment'
[15:49:59.769] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration'
[15:49:59.771] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'mbeanExporter'
[15:49:59.772] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'objectNamingStrategy'
[15:49:59.778] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'mbeanExporter' via factory method to bean named 'objectNamingStrategy'
[15:49:59.795] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'mbeanServer'
[15:49:59.855] DEBUG [main]o.s.j.s.JmxUtils - Found MBeanServer: com.sun.jmx.mbeanserver.JmxMBeanServer@b2ee393
[15:49:59.860] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointAutoConfiguration'
[15:49:59.862] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointAutoConfiguration$$EnhancerBySpringCGLIB$$ca4ef8b] - unable to determine constructor/method parameter names
[15:49:59.864] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'management.endpoints.jmx-org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointProperties'
[15:49:59.864] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'management.endpoints.jmx-org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointProperties' via constructor to bean named 'environment'
[15:49:59.866] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointAutoConfiguration' via constructor to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@731a74c'
[15:49:59.866] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointAutoConfiguration' via constructor to bean named 'management.endpoints.jmx-org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointProperties'
[15:49:59.867] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'jmxAnnotationEndpointDiscoverer'
[15:49:59.868] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'jmxAnnotationEndpointDiscoverer' via factory method to bean named 'endpointOperationParameterMapper'
[15:49:59.873] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'jmxIncludeExcludePropertyEndpointFilter'
[15:49:59.874] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'jmxMBeanExporter'
[15:49:59.876] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'jmxMBeanExporter' via factory method to bean named 'mbeanServer'
[15:49:59.876] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'jmxMBeanExporter' via factory method to bean named 'environment'
[15:49:59.876] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'jmxMBeanExporter' via factory method to bean named 'jmxAnnotationEndpointDiscoverer'
[15:49:59.931] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'endpointMediaTypes'
[15:49:59.932] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'webEndpointDiscoverer'
[15:49:59.933] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'webEndpointDiscoverer' via factory method to bean named 'endpointOperationParameterMapper'
[15:49:59.933] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'webEndpointDiscoverer' via factory method to bean named 'endpointMediaTypes'
[15:49:59.935] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'webExposeExcludePropertyEndpointFilter'
[15:49:59.937] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'controllerEndpointDiscoverer'
[15:49:59.939] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'controllerExposeExcludePropertyEndpointFilter'
[15:49:59.940] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'pathMappedEndpoints'
[15:49:59.942] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'pathMappedEndpoints' via factory method to bean named 'jmxAnnotationEndpointDiscoverer'
[15:49:59.942] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'pathMappedEndpoints' via factory method to bean named 'servletEndpointDiscoverer'
[15:49:59.942] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'pathMappedEndpoints' via factory method to bean named 'webEndpointDiscoverer'
[15:49:59.942] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'pathMappedEndpoints' via factory method to bean named 'controllerEndpointDiscoverer'
[15:49:59.942] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'pathMappedEndpoints' via factory method to bean named 'management.endpoints.web-org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties'
[15:49:59.969] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.env.EnvironmentEndpointAutoConfiguration'
[15:49:59.970] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.actuate.autoconfigure.env.EnvironmentEndpointAutoConfiguration$$EnhancerBySpringCGLIB$$68195452] - unable to determine constructor/method parameter names
[15:49:59.971] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.actuate.autoconfigure.env.EnvironmentEndpointAutoConfiguration' via constructor to bean named 'management.endpoint.env-org.springframework.boot.actuate.autoconfigure.env.EnvironmentEndpointProperties'
[15:49:59.971] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration'
[15:49:59.972] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration$$EnhancerBySpringCGLIB$$97d50ebb] - unable to determine constructor/method parameter names
[15:49:59.973] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'spring.info-org.springframework.boot.autoconfigure.info.ProjectInfoProperties'
[15:49:59.974] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration' via constructor to bean named 'spring.info-org.springframework.boot.autoconfigure.info.ProjectInfoProperties'
[15:49:59.974] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.logging.LogFileWebEndpointAutoConfiguration'
[15:49:59.975] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.actuate.autoconfigure.logging.LogFileWebEndpointAutoConfiguration$$EnhancerBySpringCGLIB$$55c78a2b] - unable to determine constructor/method parameter names
[15:49:59.977] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'management.endpoint.logfile-org.springframework.boot.actuate.autoconfigure.logging.LogFileWebEndpointProperties'
[15:49:59.978] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.actuate.autoconfigure.logging.LogFileWebEndpointAutoConfiguration' via constructor to bean named 'management.endpoint.logfile-org.springframework.boot.actuate.autoconfigure.logging.LogFileWebEndpointProperties'
[15:49:59.979] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.metrics.CompositeMeterRegistryAutoConfiguration'
[15:49:59.979] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.metrics.web.client.RestTemplateMetricsConfiguration'
[15:49:59.980] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.actuate.autoconfigure.metrics.web.client.RestTemplateMetricsConfiguration$$EnhancerBySpringCGLIB$$119ac0fb] - unable to determine constructor/method parameter names
[15:49:59.981] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.actuate.autoconfigure.metrics.web.client.RestTemplateMetricsConfiguration' via constructor to bean named 'management.metrics-org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties'
[15:49:59.982] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'restTemplateTagConfigurer'
[15:49:59.985] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'metricsRestTemplateCustomizer'
[15:49:59.986] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'metricsRestTemplateCustomizer' via factory method to bean named 'simpleMeterRegistry'
[15:49:59.987] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'metricsRestTemplateCustomizer' via factory method to bean named 'restTemplateTagConfigurer'
[15:49:59.989] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.metrics.web.tomcat.TomcatMetricsAutoConfiguration'
[15:49:59.989] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'tomcatMetricsBinder'
[15:49:59.990] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'tomcatMetricsBinder' via factory method to bean named 'simpleMeterRegistry'
[15:49:59.992] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$CglibAutoProxyConfiguration'
[15:49:59.993] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.aop.AopAutoConfiguration'
[15:49:59.993] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration'
[15:49:59.994] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'freeMarkerConfigurer'
[15:50:00.161] DEBUG [main]o.s.w.s.v.f.FreeMarkerConfigurer - Cannot resolve template loader path [classpath:/templates/] to [java.io.File]: using SpringTemplateLoader as fallback
java.io.FileNotFoundException: class path resource [templates/] cannot be resolved to absolute file path because it does not reside in the file system: jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-netflix-eureka-server-2.1.1.RELEASE.jar!/templates/
	at org.springframework.util.ResourceUtils.getFile(ResourceUtils.java:217)
	at org.springframework.core.io.AbstractFileResolvingResource.getFile(AbstractFileResolvingResource.java:154)
	at org.springframework.ui.freemarker.FreeMarkerConfigurationFactory.getTemplateLoaderForPath(FreeMarkerConfigurationFactory.java:345)
	at org.springframework.ui.freemarker.FreeMarkerConfigurationFactory.createConfiguration(FreeMarkerConfigurationFactory.java:297)
	at org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer.afterPropertiesSet(FreeMarkerConfigurer.java:120)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1837)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1774)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:843)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:877)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316)
	at org.springframework.boot.builder.SpringApplicationBuilder.run(SpringApplicationBuilder.java:139)
	at cn.mtianyan.EurekaServerApplication.main(EurekaServerApplication.java:19)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:49)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:109)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:58)
	at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:88)
[15:50:00.163] DEBUG [main]o.s.u.f.SpringTemplateLoader - SpringTemplateLoader for FreeMarker: using resource loader [org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@731a74c, started on Sun Nov 29 15:49:55 CST 2020, parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@6ad5c04e] and template loader path [classpath:/templates/]
[15:50:00.165] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'freeMarkerConfiguration'
[15:50:00.166] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'freeMarkerConfiguration' via factory method to bean named 'freeMarkerConfigurer'
[15:50:00.177] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration'
[15:50:00.177] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration$$EnhancerBySpringCGLIB$$e25c342c] - unable to determine constructor/method parameter names
[15:50:00.178] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration' via constructor to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@731a74c'
[15:50:00.178] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration' via constructor to bean named 'spring.freemarker-org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties'
[15:50:00.179] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration'
[15:50:00.179] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'gsonBuilder'
[15:50:00.181] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'standardGsonBuilderCustomizer'
[15:50:00.182] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'spring.gson-org.springframework.boot.autoconfigure.gson.GsonProperties'
[15:50:00.183] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'standardGsonBuilderCustomizer' via factory method to bean named 'spring.gson-org.springframework.boot.autoconfigure.gson.GsonProperties'
[15:50:00.186] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'gsonBuilder' via factory method to bean named 'standardGsonBuilderCustomizer'
[15:50:00.202] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'gson'
[15:50:00.204] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'gson' via factory method to bean named 'gsonBuilder'
[15:50:00.261] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration'
[15:50:00.263] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.http.GsonHttpMessageConvertersConfiguration'
[15:50:00.264] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration$LoggingCodecConfiguration'
[15:50:00.265] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'loggingCodecCustomizer'
[15:50:00.265] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'loggingCodecCustomizer' via factory method to bean named 'spring.http-org.springframework.boot.autoconfigure.http.HttpProperties'
[15:50:00.267] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration$JacksonCodecConfiguration'
[15:50:00.268] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'jacksonCodecCustomizer'
[15:50:00.268] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'jacksonCodecCustomizer' via factory method to bean named 'jacksonObjectMapper'
[15:50:00.271] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration'
[15:50:00.271] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration'
[15:50:00.272] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'taskSchedulerBuilder'
[15:50:00.274] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'spring.task.scheduling-org.springframework.boot.autoconfigure.task.TaskSchedulingProperties'
[15:50:00.274] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'taskSchedulerBuilder' via factory method to bean named 'spring.task.scheduling-org.springframework.boot.autoconfigure.task.TaskSchedulingProperties'
[15:50:00.278] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration'
[15:50:00.279] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration$$EnhancerBySpringCGLIB$$f6f0fb23] - unable to determine constructor/method parameter names
[15:50:00.279] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'restTemplateBuilder'
[15:50:00.286] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration'
[15:50:00.286] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'multipartResolver'
[15:50:00.288] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.autoconfigure.RestartEndpointWithoutIntegrationConfiguration'
[15:50:00.288] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.autoconfigure.PauseResumeEndpointsConfiguration'
[15:50:00.289] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration$EurekaClientConfigurationRefresher'
[15:50:00.292] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'eurekaAutoServiceRegistration'
[15:50:00.293] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'eurekaAutoServiceRegistration' via factory method to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@731a74c'
[15:50:00.294] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'eurekaAutoServiceRegistration' via factory method to bean named 'eurekaServiceRegistry'
[15:50:00.294] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'eurekaAutoServiceRegistration' via factory method to bean named 'eurekaRegistration'
[15:50:00.295] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration'
[15:50:00.295] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'eurekaDiscoverClientMarker'
[15:50:00.297] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationConfiguration'
[15:50:00.298] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'spring.cloud.service-registry.auto-registration-org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationProperties'
[15:50:00.299] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationAutoConfiguration'
[15:50:00.302] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration'
[15:50:00.303] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'discoveryClientOptionalArgs'
[15:50:00.303] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.netflix.eureka.config.DiscoveryClientOptionalArgsConfiguration'
[15:50:00.311] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'discoveryClient'
[15:50:00.312] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'discoveryClient' via factory method to bean named 'eurekaClient'
[15:50:00.312] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'discoveryClient' via factory method to bean named 'eurekaClientConfigBean'
[15:50:00.314] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.client.CommonsClientAutoConfiguration'
[15:50:00.314] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.client.discovery.composite.CompositeDiscoveryClientAutoConfiguration'
[15:50:00.314] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'compositeDiscoveryClient'
[15:50:00.315] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'simpleDiscoveryClient'
[15:50:00.316] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.client.discovery.simple.SimpleDiscoveryClientAutoConfiguration'
[15:50:00.318] DEBUG [main]o.s.c.e.PropertySourcesPropertyResolver - Found key 'spring.application.name' in PropertySource 'configurationProperties' with value of type String
[15:50:00.318] DEBUG [main]o.s.c.e.PropertySourcesPropertyResolver - Found key 'spring.application.name' in PropertySource 'environmentProperties' with value of type String
[15:50:00.322] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'simpleDiscoveryProperties'
[15:50:00.328] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'compositeDiscoveryClient' via factory method to bean named 'discoveryClient'
[15:50:00.328] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'compositeDiscoveryClient' via factory method to bean named 'simpleDiscoveryClient'
[15:50:00.330] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'springClientFactory'
[15:50:00.338] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'loadBalancerClient'
[15:50:00.342] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'propertiesFactory'
[15:50:00.344] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'ribbon-org.springframework.cloud.netflix.ribbon.ServerIntrospectorProperties'
[15:50:00.345] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.client.loadbalancer.AsyncLoadBalancerAutoConfiguration$LoadBalancerInterceptorConfig'
[15:50:00.345] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'asyncLoadBalancerInterceptor'
[15:50:00.346] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'asyncLoadBalancerInterceptor' via factory method to bean named 'loadBalancerClient'
[15:50:00.349] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'asyncRestTemplateCustomizer'
[15:50:00.350] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'asyncRestTemplateCustomizer' via factory method to bean named 'asyncLoadBalancerInterceptor'
[15:50:00.351] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.client.loadbalancer.AsyncLoadBalancerAutoConfiguration$AsyncRestTemplateCustomizerConfig'
[15:50:00.354] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'loadBalancedAsyncRestTemplateInitializer'
[15:50:00.355] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'loadBalancedAsyncRestTemplateInitializer' via factory method to bean named 'asyncRestTemplateCustomizer'
[15:50:00.357] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.client.loadbalancer.AsyncLoadBalancerAutoConfiguration'
[15:50:00.358] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration$LoadBalancerInterceptorConfig'
[15:50:00.358] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'ribbonInterceptor'
[15:50:00.359] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'loadBalancerRequestFactory'
[15:50:00.360] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration'
[15:50:00.363] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'loadBalancerRequestFactory' via factory method to bean named 'loadBalancerClient'
[15:50:00.366] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'ribbonInterceptor' via factory method to bean named 'loadBalancerClient'
[15:50:00.366] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'ribbonInterceptor' via factory method to bean named 'loadBalancerRequestFactory'
[15:50:00.367] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'restTemplateCustomizer'
[15:50:00.369] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'restTemplateCustomizer' via factory method to bean named 'ribbonInterceptor'
[15:50:00.370] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'loadBalancedRestTemplateInitializerDeprecated'
[15:50:00.371] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'spring.cloud.loadbalancer.retry-org.springframework.cloud.client.loadbalancer.LoadBalancerRetryProperties'
[15:50:00.372] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.commons.httpclient.HttpClientConfiguration$ApacheHttpClientConfiguration'
[15:50:00.373] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'connManFactory'
[15:50:00.380] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'apacheHttpClientBuilder'
[15:50:00.410] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'apacheHttpClientFactory'
[15:50:00.411] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'apacheHttpClientFactory' via factory method to bean named 'apacheHttpClientBuilder'
[15:50:00.412] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.commons.httpclient.HttpClientConfiguration'
[15:50:00.412] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.configuration.CompatibilityVerifierAutoConfiguration'
[15:50:00.413] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'compositeCompatibilityVerifier'
[15:50:00.414] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'springBootVersionVerifier'
[15:50:00.415] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'spring.cloud.compatibility-verifier-org.springframework.cloud.configuration.CompatibilityVerifierProperties'
[15:50:00.416] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'springBootVersionVerifier' via factory method to bean named 'spring.cloud.compatibility-verifier-org.springframework.cloud.configuration.CompatibilityVerifierProperties'
[15:50:00.420] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'compositeCompatibilityVerifier' via factory method to bean named 'springBootVersionVerifier'
[15:50:00.420] DEBUG [main]o.s.c.c.SpringBootVersionVerifier - Version found in Boot manifest [2.1.5.RELEASE]
[15:50:00.420] DEBUG [main]o.s.c.c.SpringBootVersionVerifier - Predicate [Predicate for Boot 2.1] was matched
[15:50:00.420] DEBUG [main]o.s.c.c.CompositeCompatibilityVerifier - All conditions are passing
[15:50:00.420] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.netflix.eureka.server.EurekaServerInitializerConfiguration'
[15:50:00.422] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'eurekaServerBootstrap'
[15:50:00.423] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'peerAwareInstanceRegistry'
[15:50:00.424] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'serverCodecs'
[15:50:00.439] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'peerAwareInstanceRegistry' via factory method to bean named 'serverCodecs'
[15:50:00.443] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'scopedTarget.eurekaClient' via factory method to bean named 'eurekaApplicationInfoManager'
[15:50:00.443] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'scopedTarget.eurekaClient' via factory method to bean named 'eurekaClientConfigBean'
[15:50:00.443] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'scopedTarget.eurekaClient' via factory method to bean named 'eurekaInstanceConfigBean'
[15:50:00.447] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'scopedTarget.eurekaApplicationInfoManager' via factory method to bean named 'eurekaInstanceConfigBean'
[15:50:00.455] INFO  [main]o.s.c.n.e.InstanceInfoFactory - Setting initial instance status as: STARTING
[15:50:00.518] INFO  [main]c.n.d.DiscoveryClient - Initializing Eureka in region us-east-1
[15:50:00.518] INFO  [main]c.n.d.DiscoveryClient - Client configured to neither register nor query for data.
[15:50:00.544] INFO  [main]c.n.d.DiscoveryClient - Discovery Client initialized at timestamp 1606636200539 with initial instances count: 0
[15:50:00.605] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'eurekaServerContext'
[15:50:00.606] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'peerEurekaNodes'
[15:50:00.606] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'peerEurekaNodes' via factory method to bean named 'peerAwareInstanceRegistry'
[15:50:00.606] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'peerEurekaNodes' via factory method to bean named 'serverCodecs'
[15:50:00.608] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'eurekaServerContext' via factory method to bean named 'serverCodecs'
[15:50:00.608] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'eurekaServerContext' via factory method to bean named 'peerAwareInstanceRegistry'
[15:50:00.608] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'eurekaServerContext' via factory method to bean named 'peerEurekaNodes'
[15:50:00.609] INFO  [main]c.n.e.DefaultEurekaServerContext - Initializing ...
[15:50:00.612] DEBUG [main]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[15:50:00.612] WARN  [main]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[15:50:00.633] INFO  [main]c.n.e.r.AbstractInstanceRegistry - Finished initializing remote region registries. All known remote regions: []
[15:50:00.634] INFO  [main]c.n.e.DefaultEurekaServerContext - Initialized
[15:50:00.634] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'eurekaServerBootstrap' via factory method to bean named 'peerAwareInstanceRegistry'
[15:50:00.634] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'eurekaServerBootstrap' via factory method to bean named 'eurekaServerContext'
[15:50:00.635] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'eurekaController'
[15:50:00.636] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'eureka.dashboard-org.springframework.cloud.netflix.eureka.server.EurekaDashboardProperties'
[15:50:00.636] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.netflix.ribbon.eureka.RibbonEurekaAutoConfiguration'
[15:50:00.637] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.endpoint.web.servlet.WebMvcEndpointManagementContextConfiguration'
[15:50:00.637] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'webEndpointServletHandlerMapping'
[15:50:00.640] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'management.endpoints.web.cors-org.springframework.boot.actuate.autoconfigure.endpoint.web.CorsEndpointProperties'
[15:50:00.642] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'webEndpointServletHandlerMapping' via factory method to bean named 'webEndpointDiscoverer'
[15:50:00.642] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'webEndpointServletHandlerMapping' via factory method to bean named 'servletEndpointDiscoverer'
[15:50:00.642] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'webEndpointServletHandlerMapping' via factory method to bean named 'controllerEndpointDiscoverer'
[15:50:00.642] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'webEndpointServletHandlerMapping' via factory method to bean named 'endpointMediaTypes'
[15:50:00.642] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'webEndpointServletHandlerMapping' via factory method to bean named 'management.endpoints.web.cors-org.springframework.boot.actuate.autoconfigure.endpoint.web.CorsEndpointProperties'
[15:50:00.642] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'webEndpointServletHandlerMapping' via factory method to bean named 'management.endpoints.web-org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties'
[15:50:00.646] INFO  [main]o.s.b.a.e.w.EndpointLinksResolver - Exposing 2 endpoint(s) beneath base path '/actuator'
[15:50:00.655] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'controllerEndpointHandlerMapping'
[15:50:00.655] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'controllerEndpointHandlerMapping' via factory method to bean named 'controllerEndpointDiscoverer'
[15:50:00.655] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'controllerEndpointHandlerMapping' via factory method to bean named 'management.endpoints.web.cors-org.springframework.boot.actuate.autoconfigure.endpoint.web.CorsEndpointProperties'
[15:50:00.655] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'controllerEndpointHandlerMapping' via factory method to bean named 'management.endpoints.web-org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties'
[15:50:00.659] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$SameManagementContextConfiguration$EnableSameManagementContextConfiguration'
[15:50:00.659] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$SameManagementContextConfiguration'
[15:50:00.660] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$SameManagementContextConfiguration$$EnhancerBySpringCGLIB$$3650d6da] - unable to determine constructor/method parameter names
[15:50:00.661] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$SameManagementContextConfiguration' via constructor to bean named 'environment'
[15:50:00.661] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration'
[15:50:00.661] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'management.server-org.springframework.boot.actuate.autoconfigure.web.server.ManagementServerProperties'
[15:50:00.674] DEBUG [main]o.s.j.e.a.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
[15:50:00.674] DEBUG [main]o.s.j.e.a.AnnotationMBeanExporter - Autodetecting user-defined JMX MBeans
[15:50:00.685] DEBUG [main]o.s.j.e.a.AnnotationMBeanExporter - Bean with name 'refreshScope' has been autodetected for JMX exposure
[15:50:00.685] DEBUG [main]o.s.j.e.a.AnnotationMBeanExporter - Bean with name 'environmentManager' has been autodetected for JMX exposure
[15:50:00.686] DEBUG [main]o.s.j.e.a.AnnotationMBeanExporter - Bean with name 'configurationPropertiesRebinder' has been autodetected for JMX exposure
[15:50:00.690] DEBUG [main]o.s.j.e.a.AnnotationMBeanExporter - Located managed bean 'environmentManager': registering with JMX server as MBean [org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager]
[15:50:00.702] DEBUG [main]o.s.j.e.a.AnnotationMBeanExporter - Located managed bean 'refreshScope': registering with JMX server as MBean [org.springframework.cloud.context.scope.refresh:name=refreshScope,type=RefreshScope]
[15:50:00.720] DEBUG [main]o.s.j.e.a.AnnotationMBeanExporter - Located managed bean 'configurationPropertiesRebinder': registering with JMX server as MBean [org.springframework.cloud.context.properties:name=configurationPropertiesRebinder,context=731a74c,type=ConfigurationPropertiesRebinder]
[15:50:00.734] DEBUG [main]o.s.c.s.DefaultLifecycleProcessor - Starting beans in phase 0
[15:50:00.736] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'scopedTarget.eurekaRegistration' via factory method to bean named 'eurekaClient'
[15:50:00.736] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'scopedTarget.eurekaRegistration' via factory method to bean named 'eurekaInstanceConfigBean'
[15:50:00.736] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'scopedTarget.eurekaRegistration' via factory method to bean named 'eurekaApplicationInfoManager'
[15:50:00.737] INFO  [main]o.s.c.n.e.s.EurekaServiceRegistry - Registering application EUREKA-SERVER with eureka with status UP
[15:50:00.739] DEBUG [main]o.s.c.c.d.h.DiscoveryClientHealthIndicator - Discovery Client has been initialized
[15:50:00.739] DEBUG [main]o.s.c.s.DefaultLifecycleProcessor - Successfully started bean 'eurekaAutoServiceRegistration'
[15:50:00.740] DEBUG [main]o.s.c.s.DefaultLifecycleProcessor - Successfully started bean 'org.springframework.cloud.netflix.eureka.server.EurekaServerInitializerConfiguration'
[15:50:00.740] INFO  [Thread-11]o.s.c.n.e.s.EurekaServerBootstrap - Setting the eureka configuration..
[15:50:00.741] INFO  [Thread-11]o.s.c.n.e.s.EurekaServerBootstrap - Eureka data center value eureka.datacenter is not set, defaulting to default
[15:50:00.742] INFO  [Thread-11]o.s.c.n.e.s.EurekaServerBootstrap - Eureka environment value eureka.environment is not set, defaulting to test
[15:50:00.763] INFO  [Thread-11]o.s.c.n.e.s.EurekaServerBootstrap - isAws returned false
[15:50:00.764] INFO  [Thread-11]o.s.c.n.e.s.EurekaServerBootstrap - Initialized server context
[15:50:00.764] INFO  [Thread-11]c.n.e.r.PeerAwareInstanceRegistryImpl - Got 1 instances from neighboring DS node
[15:50:00.764] INFO  [Thread-11]c.n.e.r.PeerAwareInstanceRegistryImpl - Renew threshold is: 1
[15:50:00.764] INFO  [Thread-11]c.n.e.r.PeerAwareInstanceRegistryImpl - Changing status to UP
[15:50:00.774] INFO  [Thread-11]o.s.c.n.e.s.EurekaServerInitializerConfiguration - Started Eureka Server
[15:50:00.780] DEBUG [main]o.s.b.a.l.ConditionEvaluationReportLoggingListener - 


============================
CONDITIONS EVALUATION REPORT
============================


Positive matches:
-----------------

   AopAutoConfiguration matched:
      - @ConditionalOnClass found required classes 'org.springframework.context.annotation.EnableAspectJAutoProxy', 'org.aspectj.lang.annotation.Aspect', 'org.aspectj.lang.reflect.Advice', 'org.aspectj.weaver.AnnotatedElement' (OnClassCondition)
      - @ConditionalOnProperty (spring.aop.auto=true) matched (OnPropertyCondition)

   AopAutoConfiguration.CglibAutoProxyConfiguration matched:
      - @ConditionalOnProperty (spring.aop.proxy-target-class=true) matched (OnPropertyCondition)

   ArchaiusAutoConfiguration matched:
      - @ConditionalOnClass found required classes 'com.netflix.config.ConcurrentCompositeConfiguration', 'org.apache.commons.configuration.ConfigurationBuilder' (OnClassCondition)

   ArchaiusAutoConfiguration.ArchaiusEndpointConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.boot.actuate.health.Health' (OnClassCondition)

   ArchaiusAutoConfiguration.ArchaiusEndpointConfiguration#archaiusEndpoint matched:
      - @ConditionalOnEnabledEndpoint no property management.endpoint.archaius.enabled found so using endpoint default (OnEnabledEndpointCondition)

   ArchaiusAutoConfiguration.PropagateEventsConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.cloud.context.environment.EnvironmentChangeEvent' (OnClassCondition)
      - @ConditionalOnProperty (archaius.propagate.environmentChangedEvent) matched (OnPropertyCondition)

   AsyncLoadBalancerAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.web.client.AsyncRestTemplate' (OnClassCondition)
      - @ConditionalOnBean (types: org.springframework.cloud.client.loadbalancer.LoadBalancerClient; SearchStrategy: all) found bean 'loadBalancerClient' (OnBeanCondition)

   AuditAutoConfiguration#auditListener matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.audit.listener.AbstractAuditListener; SearchStrategy: all) did not find any beans (OnBeanCondition)

   AuditAutoConfiguration.AuditEventRepositoryConfiguration matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.audit.AuditEventRepository; SearchStrategy: all) did not find any beans (OnBeanCondition)

   AuditEventsEndpointAutoConfiguration matched:
      - @ConditionalOnEnabledEndpoint no property management.endpoint.auditevents.enabled found so using endpoint default (OnEnabledEndpointCondition)

   AuditEventsEndpointAutoConfiguration#auditEventsEndpoint matched:
      - @ConditionalOnBean (types: org.springframework.boot.actuate.audit.AuditEventRepository; SearchStrategy: all) found bean 'auditEventRepository'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.audit.AuditEventsEndpoint; SearchStrategy: all) did not find any beans (OnBeanCondition)

   AutoServiceRegistrationAutoConfiguration matched:
      - @ConditionalOnProperty (spring.cloud.service-registry.auto-registration.enabled) matched (OnPropertyCondition)

   AutoServiceRegistrationConfiguration matched:
      - @ConditionalOnProperty (spring.cloud.service-registry.auto-registration.enabled) matched (OnPropertyCondition)

   BeansEndpointAutoConfiguration matched:
      - @ConditionalOnEnabledEndpoint no property management.endpoint.beans.enabled found so using endpoint default (OnEnabledEndpointCondition)

   BeansEndpointAutoConfiguration#beansEndpoint matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.beans.BeansEndpoint; SearchStrategy: all) did not find any beans (OnBeanCondition)

   CacheMeterBinderProvidersConfiguration matched:
      - @ConditionalOnClass found required class 'io.micrometer.core.instrument.binder.MeterBinder' (OnClassCondition)

   CachesEndpointAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.cache.CacheManager' (OnClassCondition)
      - @ConditionalOnEnabledEndpoint no property management.endpoint.caches.enabled found so using endpoint default (OnEnabledEndpointCondition)

   CachesEndpointAutoConfiguration#cachesEndpoint matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.cache.CachesEndpoint; SearchStrategy: all) did not find any beans (OnBeanCondition)

   CachesEndpointAutoConfiguration#cachesEndpointWebExtension matched:
      - @ConditionalOnBean (types: org.springframework.boot.actuate.cache.CachesEndpoint; SearchStrategy: all) found bean 'cachesEndpoint'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.cache.CachesEndpointWebExtension; SearchStrategy: all) did not find any beans (OnBeanCondition)

   CodecsAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.http.codec.CodecConfigurer' (OnClassCondition)

   CodecsAutoConfiguration.JacksonCodecConfiguration matched:
      - @ConditionalOnClass found required class 'com.fasterxml.jackson.databind.ObjectMapper' (OnClassCondition)

   CodecsAutoConfiguration.JacksonCodecConfiguration#jacksonCodecCustomizer matched:
      - @ConditionalOnBean (types: com.fasterxml.jackson.databind.ObjectMapper; SearchStrategy: all) found bean 'jacksonObjectMapper' (OnBeanCondition)

   CommonsClientAutoConfiguration.ActuatorConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.boot.actuate.endpoint.annotation.Endpoint' (OnClassCondition)
      - @ConditionalOnProperty (spring.cloud.features.enabled) matched (OnPropertyCondition)

   CommonsClientAutoConfiguration.ActuatorConfiguration#featuresEndpoint matched:
      - @ConditionalOnEnabledEndpoint no property management.endpoint.features.enabled found so using endpoint default (OnEnabledEndpointCondition)

   CommonsClientAutoConfiguration.DiscoveryLoadBalancerConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.boot.actuate.health.HealthIndicator' (OnClassCondition)
      - @ConditionalOnProperty (spring.cloud.discovery.enabled) matched (OnPropertyCondition)
      - @ConditionalOnBean (types: org.springframework.cloud.client.discovery.DiscoveryClient; SearchStrategy: all) found bean 'discoveryClient' (OnBeanCondition)

   CommonsClientAutoConfiguration.DiscoveryLoadBalancerConfiguration#discoveryClientHealthIndicator matched:
      - @ConditionalOnProperty (spring.cloud.discovery.client.health-indicator.enabled) matched (OnPropertyCondition)

   CommonsClientAutoConfiguration.DiscoveryLoadBalancerConfiguration#discoveryCompositeHealthIndicator matched:
      - @ConditionalOnProperty (spring.cloud.discovery.client.composite-indicator.enabled) matched (OnPropertyCondition)
      - @ConditionalOnBean (types: org.springframework.cloud.client.discovery.health.DiscoveryHealthIndicator,org.springframework.boot.actuate.health.HealthAggregator; SearchStrategy: all) found beans 'discoveryClientHealthIndicator', 'eurekaHealthIndicator', 'healthAggregator' (OnBeanCondition)

   CompatibilityVerifierAutoConfiguration matched:
      - @ConditionalOnProperty (spring.cloud.compatibility-verifier.enabled) matched (OnPropertyCondition)

   CompositeMeterRegistryAutoConfiguration matched:
      - @ConditionalOnClass found required class 'io.micrometer.core.instrument.composite.CompositeMeterRegistry' (OnClassCondition)

   ConditionsReportEndpointAutoConfiguration matched:
      - @ConditionalOnEnabledEndpoint no property management.endpoint.conditions.enabled found so using endpoint default (OnEnabledEndpointCondition)

   ConditionsReportEndpointAutoConfiguration#conditionsReportEndpoint matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.autoconfigure.condition.ConditionsReportEndpoint; SearchStrategy: current) did not find any beans (OnBeanCondition)

   ConfigurationPropertiesRebinderAutoConfiguration matched:
      - @ConditionalOnBean (types: org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor; SearchStrategy: all) found bean 'org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor' (OnBeanCondition)

   ConfigurationPropertiesRebinderAutoConfiguration#configurationPropertiesBeans matched:
      - @ConditionalOnMissingBean (types: org.springframework.cloud.context.properties.ConfigurationPropertiesBeans; SearchStrategy: current) did not find any beans (OnBeanCondition)

   ConfigurationPropertiesRebinderAutoConfiguration#configurationPropertiesRebinder matched:
      - @ConditionalOnMissingBean (types: org.springframework.cloud.context.properties.ConfigurationPropertiesRebinder; SearchStrategy: current) did not find any beans (OnBeanCondition)

   ConfigurationPropertiesReportEndpointAutoConfiguration matched:
      - @ConditionalOnEnabledEndpoint no property management.endpoint.configprops.enabled found so using endpoint default (OnEnabledEndpointCondition)

   ConfigurationPropertiesReportEndpointAutoConfiguration#configurationPropertiesReportEndpoint matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.context.properties.ConfigurationPropertiesReportEndpoint; SearchStrategy: all) did not find any beans (OnBeanCondition)

   DiscoveryClientOptionalArgsConfiguration#discoveryClientOptionalArgs matched:
      - @ConditionalOnClass found required class 'com.sun.jersey.api.client.filter.ClientFilter' (OnClassCondition)
      - @ConditionalOnMissingBean (types: com.netflix.discovery.AbstractDiscoveryClientOptionalArgs; SearchStrategy: current) did not find any beans (OnBeanCondition)

   DiskSpaceHealthIndicatorAutoConfiguration matched:
      - @ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true (OnEnabledHealthIndicatorCondition)

   DiskSpaceHealthIndicatorAutoConfiguration#diskSpaceHealthIndicator matched:
      - @ConditionalOnMissingBean (names: diskSpaceHealthIndicator; SearchStrategy: all) did not find any beans (OnBeanCondition)

   DispatcherServletAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet' (OnClassCondition)
      - found 'session' scope (OnWebApplicationCondition)

   DispatcherServletAutoConfiguration.DispatcherServletConfiguration matched:
      - @ConditionalOnClass found required class 'javax.servlet.ServletRegistration' (OnClassCondition)
      - Default DispatcherServlet did not find dispatcher servlet beans (DispatcherServletAutoConfiguration.DefaultDispatcherServletCondition)

   DispatcherServletAutoConfiguration.DispatcherServletRegistrationConfiguration matched:
      - @ConditionalOnClass found required class 'javax.servlet.ServletRegistration' (OnClassCondition)
      - DispatcherServlet Registration did not find servlet registration bean (DispatcherServletAutoConfiguration.DispatcherServletRegistrationCondition)

   DispatcherServletAutoConfiguration.DispatcherServletRegistrationConfiguration#dispatcherServletRegistration matched:
      - @ConditionalOnBean (names: dispatcherServlet; types: org.springframework.web.servlet.DispatcherServlet; SearchStrategy: all) found bean 'dispatcherServlet' (OnBeanCondition)

   EmbeddedWebServerFactoryCustomizerAutoConfiguration matched:
      - @ConditionalOnWebApplication (required) found 'session' scope (OnWebApplicationCondition)

   EmbeddedWebServerFactoryCustomizerAutoConfiguration.TomcatWebServerFactoryCustomizerConfiguration matched:
      - @ConditionalOnClass found required classes 'org.apache.catalina.startup.Tomcat', 'org.apache.coyote.UpgradeProtocol' (OnClassCondition)

   EndpointAutoConfiguration#endpointCachingOperationInvokerAdvisor matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.invoker.cache.CachingOperationInvokerAdvisor; SearchStrategy: all) did not find any beans (OnBeanCondition)

   EndpointAutoConfiguration#endpointOperationParameterMapper matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.invoke.ParameterValueMapper; SearchStrategy: all) did not find any beans (OnBeanCondition)

   EnvironmentEndpointAutoConfiguration matched:
      - @ConditionalOnEnabledEndpoint no property management.endpoint.env.enabled found so using endpoint default (OnEnabledEndpointCondition)

   ErrorMvcAutoConfiguration matched:
      - @ConditionalOnClass found required classes 'javax.servlet.Servlet', 'org.springframework.web.servlet.DispatcherServlet' (OnClassCondition)
      - found 'session' scope (OnWebApplicationCondition)

   ErrorMvcAutoConfiguration#basicErrorController matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.web.servlet.error.ErrorController; SearchStrategy: current) did not find any beans (OnBeanCondition)

   ErrorMvcAutoConfiguration#errorAttributes matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.web.servlet.error.ErrorAttributes; SearchStrategy: current) did not find any beans (OnBeanCondition)

   ErrorMvcAutoConfiguration.DefaultErrorViewResolverConfiguration#conventionErrorViewResolver matched:
      - @ConditionalOnBean (types: org.springframework.web.servlet.DispatcherServlet; SearchStrategy: all) found bean 'dispatcherServlet'; @ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.web.servlet.error.DefaultErrorViewResolver; SearchStrategy: all) did not find any beans (OnBeanCondition)

   ErrorMvcAutoConfiguration.WhitelabelErrorViewConfiguration matched:
      - @ConditionalOnProperty (server.error.whitelabel.enabled) matched (OnPropertyCondition)
      - ErrorTemplate Missing did not find error template view (ErrorMvcAutoConfiguration.ErrorTemplateMissingCondition)

   ErrorMvcAutoConfiguration.WhitelabelErrorViewConfiguration#beanNameViewResolver matched:
      - @ConditionalOnMissingBean (types: org.springframework.web.servlet.view.BeanNameViewResolver; SearchStrategy: all) did not find any beans (OnBeanCondition)

   ErrorMvcAutoConfiguration.WhitelabelErrorViewConfiguration#defaultErrorView matched:
      - @ConditionalOnMissingBean (names: error; SearchStrategy: all) did not find any beans (OnBeanCondition)

   EurekaClientAutoConfiguration matched:
      - @ConditionalOnClass found required class 'com.netflix.discovery.EurekaClientConfig' (OnClassCondition)
      - @ConditionalOnProperty (eureka.client.enabled) matched; @ConditionalOnProperty (spring.cloud.discovery.enabled) matched (OnPropertyCondition)
      - @ConditionalOnBean (types: org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration$Marker; SearchStrategy: all) found bean 'eurekaDiscoverClientMarker' (OnBeanCondition)

   EurekaClientAutoConfiguration#eurekaAutoServiceRegistration matched:
      - @ConditionalOnProperty (spring.cloud.service-registry.auto-registration.enabled) matched (OnPropertyCondition)
      - @ConditionalOnBean (types: org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationProperties; SearchStrategy: all) found bean 'spring.cloud.service-registry.auto-registration-org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationProperties' (OnBeanCondition)

   EurekaClientAutoConfiguration#eurekaClientConfigBean matched:
      - @ConditionalOnMissingBean (types: com.netflix.discovery.EurekaClientConfig; SearchStrategy: current) did not find any beans (OnBeanCondition)

   EurekaClientAutoConfiguration#eurekaInstanceConfigBean matched:
      - @ConditionalOnMissingBean (types: com.netflix.appinfo.EurekaInstanceConfig; SearchStrategy: current) did not find any beans (OnBeanCondition)

   EurekaClientAutoConfiguration#serviceManagementMetadataProvider matched:
      - @ConditionalOnMissingBean (types: org.springframework.cloud.netflix.eureka.metadata.ManagementMetadataProvider; SearchStrategy: all) did not find any beans (OnBeanCondition)

   EurekaClientAutoConfiguration.EurekaHealthIndicatorConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.boot.actuate.health.Health' (OnClassCondition)

   EurekaClientAutoConfiguration.EurekaHealthIndicatorConfiguration#eurekaHealthIndicator matched:
      - @ConditionalOnMissingBean (types: org.springframework.cloud.netflix.eureka.EurekaHealthIndicator; SearchStrategy: all) did not find any beans (OnBeanCondition)
      - @ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true (OnEnabledHealthIndicatorCondition)

   EurekaClientAutoConfiguration.RefreshableEurekaClientConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.cloud.context.scope.refresh.RefreshScope' (OnClassCondition)
      - @ConditionalOnBean (types: org.springframework.cloud.autoconfigure.RefreshAutoConfiguration; SearchStrategy: all) found bean 'org.springframework.cloud.autoconfigure.RefreshAutoConfiguration' (OnBeanCondition)

   EurekaClientAutoConfiguration.RefreshableEurekaClientConfiguration#eurekaApplicationInfoManager matched:
      - @ConditionalOnMissingBean (types: com.netflix.appinfo.ApplicationInfoManager; SearchStrategy: current) did not find any beans (OnBeanCondition)

   EurekaClientAutoConfiguration.RefreshableEurekaClientConfiguration#eurekaClient matched:
      - @ConditionalOnMissingBean (types: com.netflix.discovery.EurekaClient; SearchStrategy: current) did not find any beans (OnBeanCondition)

   EurekaClientAutoConfiguration.RefreshableEurekaClientConfiguration#eurekaRegistration matched:
      - @ConditionalOnProperty (spring.cloud.service-registry.auto-registration.enabled) matched (OnPropertyCondition)
      - @ConditionalOnBean (types: org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationProperties; SearchStrategy: all) found bean 'spring.cloud.service-registry.auto-registration-org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationProperties' (OnBeanCondition)

   EurekaDiscoveryClientConfiguration matched:
      - @ConditionalOnClass found required class 'com.netflix.discovery.EurekaClientConfig' (OnClassCondition)
      - @ConditionalOnProperty (eureka.client.enabled) matched; @ConditionalOnProperty (spring.cloud.discovery.enabled) matched (OnPropertyCondition)

   EurekaDiscoveryClientConfiguration.EurekaClientConfigurationRefresher matched:
      - @ConditionalOnClass found required class 'org.springframework.cloud.context.scope.refresh.RefreshScopeRefreshedEvent' (OnClassCondition)

   EurekaServerAutoConfiguration matched:
      - @ConditionalOnBean (types: org.springframework.cloud.netflix.eureka.server.EurekaServerMarkerConfiguration$Marker; SearchStrategy: all) found bean 'eurekaServerMarkerBean' (OnBeanCondition)

   EurekaServerAutoConfiguration#eurekaController matched:
      - @ConditionalOnProperty (eureka.dashboard.enabled) matched (OnPropertyCondition)

   EurekaServerAutoConfiguration#peerEurekaNodes matched:
      - @ConditionalOnMissingBean (types: com.netflix.eureka.cluster.PeerEurekaNodes; SearchStrategy: all) did not find any beans (OnBeanCondition)

   EurekaServerAutoConfiguration.EurekaServerConfigBeanConfiguration#eurekaServerConfig matched:
      - @ConditionalOnMissingBean (types: com.netflix.eureka.EurekaServerConfig; SearchStrategy: all) did not find any beans (OnBeanCondition)

   FreeMarkerAutoConfiguration matched:
      - @ConditionalOnClass found required classes 'freemarker.template.Configuration', 'org.springframework.ui.freemarker.FreeMarkerConfigurationFactory' (OnClassCondition)

   FreeMarkerServletWebConfiguration matched:
      - @ConditionalOnClass found required classes 'javax.servlet.Servlet', 'org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer' (OnClassCondition)
      - found 'session' scope (OnWebApplicationCondition)

   FreeMarkerServletWebConfiguration#freeMarkerConfigurer matched:
      - @ConditionalOnMissingBean (types: org.springframework.web.servlet.view.freemarker.FreeMarkerConfig; SearchStrategy: all) did not find any beans (OnBeanCondition)

   FreeMarkerServletWebConfiguration#freeMarkerViewResolver matched:
      - @ConditionalOnProperty (spring.freemarker.enabled) matched (OnPropertyCondition)
      - @ConditionalOnMissingBean (names: freeMarkerViewResolver; SearchStrategy: all) did not find any beans (OnBeanCondition)

   GenericCacheConfiguration matched:
      - Cache org.springframework.boot.autoconfigure.cache.GenericCacheConfiguration automatic cache type (CacheCondition)

   GsonAutoConfiguration matched:
      - @ConditionalOnClass found required class 'com.google.gson.Gson' (OnClassCondition)

   GsonAutoConfiguration#gson matched:
      - @ConditionalOnMissingBean (types: com.google.gson.Gson; SearchStrategy: all) did not find any beans (OnBeanCondition)

   GsonAutoConfiguration#gsonBuilder matched:
      - @ConditionalOnMissingBean (types: com.google.gson.GsonBuilder; SearchStrategy: all) did not find any beans (OnBeanCondition)

   GsonHttpMessageConvertersConfiguration matched:
      - @ConditionalOnClass found required class 'com.google.gson.Gson' (OnClassCondition)

   HealthEndpointConfiguration matched:
      - @ConditionalOnEnabledEndpoint no property management.endpoint.health.enabled found so using endpoint default (OnEnabledEndpointCondition)
      - @ConditionalOnSingleCandidate (types: org.springframework.boot.actuate.health.HealthIndicatorRegistry; SearchStrategy: all) found a primary bean from beans 'healthIndicatorRegistry' (OnBeanCondition)

   HealthEndpointConfiguration#healthEndpoint matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthEndpoint; SearchStrategy: all) did not find any beans (OnBeanCondition)

   HealthEndpointWebExtensionConfiguration#createHealthStatusHttpMapper matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthStatusHttpMapper; SearchStrategy: all) did not find any beans (OnBeanCondition)

   HealthEndpointWebExtensionConfiguration#healthWebEndpointResponseMapper matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthWebEndpointResponseMapper; SearchStrategy: all) did not find any beans (OnBeanCondition)

   HealthEndpointWebExtensionConfiguration.ServletWebHealthConfiguration matched:
      - found 'session' scope (OnWebApplicationCondition)
      - @ConditionalOnEnabledEndpoint no property management.endpoint.health.enabled found so using endpoint default (OnEnabledEndpointCondition)

   HealthEndpointWebExtensionConfiguration.ServletWebHealthConfiguration#healthEndpointWebExtension matched:
      - @ConditionalOnBean (types: org.springframework.boot.actuate.health.HealthEndpoint; SearchStrategy: all) found bean 'healthEndpoint'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthEndpointWebExtension; SearchStrategy: all) did not find any beans (OnBeanCondition)

   HealthIndicatorAutoConfiguration#healthAggregator matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthAggregator; SearchStrategy: all) did not find any beans (OnBeanCondition)

   HealthIndicatorAutoConfiguration#healthIndicatorRegistry matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthIndicatorRegistry; SearchStrategy: all) did not find any beans (OnBeanCondition)

   HeapDumpWebEndpointAutoConfiguration matched:
      - @ConditionalOnEnabledEndpoint no property management.endpoint.heapdump.enabled found so using endpoint default (OnEnabledEndpointCondition)

   HeapDumpWebEndpointAutoConfiguration#heapDumpWebEndpoint matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.management.HeapDumpWebEndpoint; SearchStrategy: all) did not find any beans (OnBeanCondition)

   HttpClientConfiguration.ApacheHttpClientConfiguration matched:
      - @ConditionalOnClass found required class 'org.apache.http.client.HttpClient' (OnClassCondition)
      - @ConditionalOnProperty (spring.cloud.httpclientfactories.apache.enabled) matched (OnPropertyCondition)

   HttpClientConfiguration.ApacheHttpClientConfiguration#apacheHttpClientBuilder matched:
      - @ConditionalOnMissingBean (types: org.apache.http.impl.client.HttpClientBuilder; SearchStrategy: all) did not find any beans (OnBeanCondition)

   HttpClientConfiguration.ApacheHttpClientConfiguration#apacheHttpClientFactory matched:
      - @ConditionalOnMissingBean (types: org.springframework.cloud.commons.httpclient.ApacheHttpClientFactory; SearchStrategy: all) did not find any beans (OnBeanCondition)

   HttpClientConfiguration.ApacheHttpClientConfiguration#connManFactory matched:
      - @ConditionalOnMissingBean (types: org.springframework.cloud.commons.httpclient.ApacheHttpClientConnectionManagerFactory; SearchStrategy: all) did not find any beans (OnBeanCondition)

   HttpClientMetricsAutoConfiguration matched:
      - @ConditionalOnClass found required class 'io.micrometer.core.instrument.MeterRegistry' (OnClassCondition)
      - @ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry' (OnBeanCondition)

   HttpEncodingAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.web.filter.CharacterEncodingFilter' (OnClassCondition)
      - found 'session' scope (OnWebApplicationCondition)
      - @ConditionalOnProperty (spring.http.encoding.enabled) matched (OnPropertyCondition)

   HttpEncodingAutoConfiguration#characterEncodingFilter matched:
      - @ConditionalOnMissingBean (types: org.springframework.web.filter.CharacterEncodingFilter; SearchStrategy: all) did not find any beans (OnBeanCondition)

   HttpMessageConvertersAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.http.converter.HttpMessageConverter' (OnClassCondition)

   HttpMessageConvertersAutoConfiguration#messageConverters matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.http.HttpMessageConverters; SearchStrategy: all) did not find any beans (OnBeanCondition)

   HttpMessageConvertersAutoConfiguration.StringHttpMessageConverterConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.http.converter.StringHttpMessageConverter' (OnClassCondition)

   HttpMessageConvertersAutoConfiguration.StringHttpMessageConverterConfiguration#stringHttpMessageConverter matched:
      - @ConditionalOnMissingBean (types: org.springframework.http.converter.StringHttpMessageConverter; SearchStrategy: all) did not find any beans (OnBeanCondition)

   HttpTraceAutoConfiguration matched:
      - @ConditionalOnWebApplication (required) found 'session' scope (OnWebApplicationCondition)
      - @ConditionalOnProperty (management.trace.http.enabled) matched (OnPropertyCondition)

   HttpTraceAutoConfiguration#httpExchangeTracer matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.trace.http.HttpExchangeTracer; SearchStrategy: all) did not find any beans (OnBeanCondition)

   HttpTraceAutoConfiguration#traceRepository matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.trace.http.HttpTraceRepository; SearchStrategy: all) did not find any beans (OnBeanCondition)

   HttpTraceAutoConfiguration.ServletTraceFilterConfiguration matched:
      - found 'session' scope (OnWebApplicationCondition)

   HttpTraceAutoConfiguration.ServletTraceFilterConfiguration#httpTraceFilter matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter; SearchStrategy: all) did not find any beans (OnBeanCondition)

   HttpTraceEndpointAutoConfiguration matched:
      - @ConditionalOnEnabledEndpoint no property management.endpoint.httptrace.enabled found so using endpoint default (OnEnabledEndpointCondition)

   HttpTraceEndpointAutoConfiguration#httpTraceEndpoint matched:
      - @ConditionalOnBean (types: org.springframework.boot.actuate.trace.http.HttpTraceRepository; SearchStrategy: all) found bean 'traceRepository'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.trace.http.HttpTraceEndpoint; SearchStrategy: all) did not find any beans (OnBeanCondition)

   HystrixAutoConfiguration matched:
      - @ConditionalOnClass found required classes 'com.netflix.hystrix.Hystrix', 'org.springframework.boot.actuate.health.HealthIndicator', 'org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration' (OnClassCondition)

   HystrixAutoConfiguration#hystrixHealthIndicator matched:
      - @ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true (OnEnabledHealthIndicatorCondition)

   HystrixAutoConfiguration.HystrixMetricsConfiguration matched:
      - @ConditionalOnClass found required class 'io.micrometer.core.instrument.binder.hystrix.HystrixMetricsBinder' (OnClassCondition)
      - @ConditionalOnProperty (management.metrics.binders.hystrix.enabled) matched (OnPropertyCondition)

   InfoContributorAutoConfiguration#envInfoContributor matched:
      - @ConditionalOnEnabledInfoContributor management.info.defaults.enabled is considered true (OnEnabledInfoContributorCondition)

   InfoEndpointAutoConfiguration matched:
      - @ConditionalOnEnabledEndpoint no property management.endpoint.info.enabled found so using endpoint default (OnEnabledEndpointCondition)

   InfoEndpointAutoConfiguration#infoEndpoint matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.info.InfoEndpoint; SearchStrategy: all) did not find any beans (OnBeanCondition)

   JacksonAutoConfiguration matched:
      - @ConditionalOnClass found required class 'com.fasterxml.jackson.databind.ObjectMapper' (OnClassCondition)

   JacksonAutoConfiguration.Jackson2ObjectMapperBuilderCustomizerConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.http.converter.json.Jackson2ObjectMapperBuilder' (OnClassCondition)

   JacksonAutoConfiguration.JacksonObjectMapperBuilderConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.http.converter.json.Jackson2ObjectMapperBuilder' (OnClassCondition)

   JacksonAutoConfiguration.JacksonObjectMapperBuilderConfiguration#jacksonObjectMapperBuilder matched:
      - @ConditionalOnMissingBean (types: org.springframework.http.converter.json.Jackson2ObjectMapperBuilder; SearchStrategy: all) did not find any beans (OnBeanCondition)

   JacksonAutoConfiguration.JacksonObjectMapperConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.http.converter.json.Jackson2ObjectMapperBuilder' (OnClassCondition)

   JacksonAutoConfiguration.JacksonObjectMapperConfiguration#jacksonObjectMapper matched:
      - @ConditionalOnMissingBean (types: com.fasterxml.jackson.databind.ObjectMapper; SearchStrategy: all) did not find any beans (OnBeanCondition)

   JacksonAutoConfiguration.ParameterNamesModuleConfiguration matched:
      - @ConditionalOnClass found required class 'com.fasterxml.jackson.module.paramnames.ParameterNamesModule' (OnClassCondition)

   JacksonAutoConfiguration.ParameterNamesModuleConfiguration#parameterNamesModule matched:
      - @ConditionalOnMissingBean (types: com.fasterxml.jackson.module.paramnames.ParameterNamesModule; SearchStrategy: all) did not find any beans (OnBeanCondition)

   JacksonHttpMessageConvertersConfiguration.MappingJackson2HttpMessageConverterConfiguration matched:
      - @ConditionalOnClass found required class 'com.fasterxml.jackson.databind.ObjectMapper' (OnClassCondition)
      - @ConditionalOnProperty (spring.http.converters.preferred-json-mapper=jackson) matched (OnPropertyCondition)
      - @ConditionalOnBean (types: com.fasterxml.jackson.databind.ObjectMapper; SearchStrategy: all) found bean 'jacksonObjectMapper' (OnBeanCondition)

   JacksonHttpMessageConvertersConfiguration.MappingJackson2HttpMessageConverterConfiguration#mappingJackson2HttpMessageConverter matched:
      - @ConditionalOnMissingBean (types: org.springframework.http.converter.json.MappingJackson2HttpMessageConverter; SearchStrategy: all) did not find any beans (OnBeanCondition)

   JacksonHttpMessageConvertersConfiguration.MappingJackson2XmlHttpMessageConverterConfiguration matched:
      - @ConditionalOnClass found required class 'com.fasterxml.jackson.dataformat.xml.XmlMapper' (OnClassCondition)
      - @ConditionalOnBean (types: org.springframework.http.converter.json.Jackson2ObjectMapperBuilder; SearchStrategy: all) found bean 'jacksonObjectMapperBuilder' (OnBeanCondition)

   JacksonHttpMessageConvertersConfiguration.MappingJackson2XmlHttpMessageConverterConfiguration#mappingJackson2XmlHttpMessageConverter matched:
      - @ConditionalOnMissingBean (types: org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter; SearchStrategy: all) did not find any beans (OnBeanCondition)

   JmxAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.jmx.export.MBeanExporter' (OnClassCondition)
      - @ConditionalOnProperty (spring.jmx.enabled=true) matched (OnPropertyCondition)

   JmxAutoConfiguration#mbeanExporter matched:
      - @ConditionalOnMissingBean (types: org.springframework.jmx.export.MBeanExporter; SearchStrategy: current) did not find any beans (OnBeanCondition)

   JmxAutoConfiguration#mbeanServer matched:
      - @ConditionalOnMissingBean (types: javax.management.MBeanServer; SearchStrategy: all) did not find any beans (OnBeanCondition)

   JmxAutoConfiguration#objectNamingStrategy matched:
      - @ConditionalOnMissingBean (types: org.springframework.jmx.export.naming.ObjectNamingStrategy; SearchStrategy: current) did not find any beans (OnBeanCondition)

   JmxEndpointAutoConfiguration#jmxAnnotationEndpointDiscoverer matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.jmx.JmxEndpointsSupplier; SearchStrategy: all) did not find any beans (OnBeanCondition)

   JmxEndpointAutoConfiguration#jmxMBeanExporter matched:
      - @ConditionalOnSingleCandidate (types: javax.management.MBeanServer; SearchStrategy: all) found a primary bean from beans 'mbeanServer' (OnBeanCondition)

   JvmMetricsAutoConfiguration matched:
      - @ConditionalOnClass found required class 'io.micrometer.core.instrument.MeterRegistry' (OnClassCondition)
      - @ConditionalOnProperty (management.metrics.binders.jvm.enabled) matched (OnPropertyCondition)
      - @ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry' (OnBeanCondition)

   JvmMetricsAutoConfiguration#classLoaderMetrics matched:
      - @ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.jvm.ClassLoaderMetrics; SearchStrategy: all) did not find any beans (OnBeanCondition)

   JvmMetricsAutoConfiguration#jvmGcMetrics matched:
      - @ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.jvm.JvmGcMetrics; SearchStrategy: all) did not find any beans (OnBeanCondition)

   JvmMetricsAutoConfiguration#jvmMemoryMetrics matched:
      - @ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics; SearchStrategy: all) did not find any beans (OnBeanCondition)

   JvmMetricsAutoConfiguration#jvmThreadMetrics matched:
      - @ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.jvm.JvmThreadMetrics; SearchStrategy: all) did not find any beans (OnBeanCondition)

   LifecycleMvcEndpointAutoConfiguration#environmentManager matched:
      - @ConditionalOnMissingBean (types: org.springframework.cloud.context.environment.EnvironmentManager; SearchStrategy: all) did not find any beans (OnBeanCondition)

   LoadBalancerAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.web.client.RestTemplate' (OnClassCondition)
      - @ConditionalOnBean (types: org.springframework.cloud.client.loadbalancer.LoadBalancerClient; SearchStrategy: all) found bean 'loadBalancerClient' (OnBeanCondition)

   LoadBalancerAutoConfiguration#loadBalancerRequestFactory matched:
      - @ConditionalOnMissingBean (types: org.springframework.cloud.client.loadbalancer.LoadBalancerRequestFactory; SearchStrategy: all) did not find any beans (OnBeanCondition)

   LoadBalancerAutoConfiguration.LoadBalancerInterceptorConfig matched:
      - @ConditionalOnMissingClass did not find unwanted class 'org.springframework.retry.support.RetryTemplate' (OnClassCondition)

   LoadBalancerAutoConfiguration.LoadBalancerInterceptorConfig#restTemplateCustomizer matched:
      - @ConditionalOnMissingBean (types: org.springframework.cloud.client.loadbalancer.RestTemplateCustomizer; SearchStrategy: all) did not find any beans (OnBeanCondition)

   LogFileWebEndpointAutoConfiguration matched:
      - @ConditionalOnEnabledEndpoint no property management.endpoint.logfile.enabled found so using endpoint default (OnEnabledEndpointCondition)

   LogbackMetricsAutoConfiguration matched:
      - @ConditionalOnClass found required classes 'io.micrometer.core.instrument.MeterRegistry', 'ch.qos.logback.classic.LoggerContext', 'org.slf4j.LoggerFactory' (OnClassCondition)
      - @ConditionalOnProperty (management.metrics.binders.logback.enabled) matched (OnPropertyCondition)
      - LogbackLoggingCondition ILoggerFactory is a Logback LoggerContext (LogbackMetricsAutoConfiguration.LogbackLoggingCondition)
      - @ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry' (OnBeanCondition)

   LogbackMetricsAutoConfiguration#logbackMetrics matched:
      - @ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.logging.LogbackMetrics; SearchStrategy: all) did not find any beans (OnBeanCondition)

   LoggersEndpointAutoConfiguration matched:
      - @ConditionalOnEnabledEndpoint no property management.endpoint.loggers.enabled found so using endpoint default (OnEnabledEndpointCondition)

   LoggersEndpointAutoConfiguration#loggersEndpoint matched:
      - Logging System enabled (LoggersEndpointAutoConfiguration.OnEnabledLoggingSystemCondition)
      - @ConditionalOnBean (types: org.springframework.boot.logging.LoggingSystem; SearchStrategy: all) found bean 'springBootLoggingSystem'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.logging.LoggersEndpoint; SearchStrategy: all) did not find any beans (OnBeanCondition)

   ManagementContextAutoConfiguration.SameManagementContextConfiguration matched:
      - Management Port actual port type (SAME) matched required type (OnManagementPortCondition)

   MappingsEndpointAutoConfiguration#mappingsEndpoint matched:
      - @ConditionalOnEnabledEndpoint no property management.endpoint.mappings.enabled found so using endpoint default (OnEnabledEndpointCondition)

   MappingsEndpointAutoConfiguration.ServletWebConfiguration matched:
      - found 'session' scope (OnWebApplicationCondition)

   MappingsEndpointAutoConfiguration.ServletWebConfiguration.SpringMvcConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet' (OnClassCondition)
      - @ConditionalOnBean (types: org.springframework.web.servlet.DispatcherServlet; SearchStrategy: all) found bean 'dispatcherServlet' (OnBeanCondition)

   MetricsAutoConfiguration matched:
      - @ConditionalOnClass found required class 'io.micrometer.core.annotation.Timed' (OnClassCondition)

   MetricsAutoConfiguration#micrometerClock matched:
      - @ConditionalOnMissingBean (types: io.micrometer.core.instrument.Clock; SearchStrategy: all) did not find any beans (OnBeanCondition)

   MetricsEndpointAutoConfiguration matched:
      - @ConditionalOnClass found required class 'io.micrometer.core.annotation.Timed' (OnClassCondition)
      - @ConditionalOnEnabledEndpoint no property management.endpoint.metrics.enabled found so using endpoint default (OnEnabledEndpointCondition)

   MetricsEndpointAutoConfiguration#metricsEndpoint matched:
      - @ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.metrics.MetricsEndpoint; SearchStrategy: all) did not find any beans (OnBeanCondition)

   MultipartAutoConfiguration matched:
      - @ConditionalOnClass found required classes 'javax.servlet.Servlet', 'org.springframework.web.multipart.support.StandardServletMultipartResolver', 'javax.servlet.MultipartConfigElement' (OnClassCondition)
      - found 'session' scope (OnWebApplicationCondition)
      - @ConditionalOnProperty (spring.servlet.multipart.enabled) matched (OnPropertyCondition)

   MultipartAutoConfiguration#multipartConfigElement matched:
      - @ConditionalOnMissingBean (types: javax.servlet.MultipartConfigElement,org.springframework.web.multipart.commons.CommonsMultipartResolver; SearchStrategy: all) did not find any beans (OnBeanCondition)

   MultipartAutoConfiguration#multipartResolver matched:
      - @ConditionalOnMissingBean (types: org.springframework.web.multipart.MultipartResolver; SearchStrategy: all) did not find any beans (OnBeanCondition)

   NoOpCacheConfiguration matched:
      - Cache org.springframework.boot.autoconfigure.cache.NoOpCacheConfiguration automatic cache type (CacheCondition)

   PropertyPlaceholderAutoConfiguration#propertySourcesPlaceholderConfigurer matched:
      - @ConditionalOnMissingBean (types: org.springframework.context.support.PropertySourcesPlaceholderConfigurer; SearchStrategy: current) did not find any beans (OnBeanCondition)

   RefreshAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.cloud.context.scope.refresh.RefreshScope' (OnClassCondition)
      - @ConditionalOnProperty (spring.cloud.refresh.enabled) matched (OnPropertyCondition)

   RefreshAutoConfiguration#contextRefresher matched:
      - @ConditionalOnMissingBean (types: org.springframework.cloud.context.refresh.ContextRefresher; SearchStrategy: all) did not find any beans (OnBeanCondition)

   RefreshAutoConfiguration#loggingRebinder matched:
      - @ConditionalOnMissingBean (types: org.springframework.cloud.logging.LoggingRebinder; SearchStrategy: all) did not find any beans (OnBeanCondition)

   RefreshAutoConfiguration#refreshScope matched:
      - @ConditionalOnMissingBean (types: org.springframework.cloud.context.scope.refresh.RefreshScope; SearchStrategy: all) did not find any beans (OnBeanCondition)

   RefreshEndpointAutoConfiguration matched:
      - @ConditionalOnClass found required classes 'org.springframework.boot.actuate.autoconfigure.endpoint.EndpointAutoConfiguration', 'org.springframework.boot.actuate.health.Health' (OnClassCondition)

   RefreshEndpointAutoConfiguration#refreshScopeHealthIndicator matched:
      - @ConditionalOnMissingBean (types: org.springframework.cloud.health.RefreshScopeHealthIndicator; SearchStrategy: all) did not find any beans (OnBeanCondition)
      - @ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true (OnEnabledHealthIndicatorCondition)

   RefreshEndpointAutoConfiguration.RefreshEndpointConfiguration matched:
      - @ConditionalOnBean (types: org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration; SearchStrategy: all) found bean 'org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration' (OnBeanCondition)

   RefreshEndpointAutoConfiguration.RefreshEndpointConfiguration#refreshEndpoint matched:
      - @ConditionalOnBean (types: org.springframework.cloud.context.refresh.ContextRefresher; SearchStrategy: all) found bean 'contextRefresher'; @ConditionalOnMissingBean (types: org.springframework.cloud.endpoint.RefreshEndpoint; SearchStrategy: all) did not find any beans (OnBeanCondition)
      - @ConditionalOnEnabledEndpoint no property management.endpoint.refresh.enabled found so using endpoint default (OnEnabledEndpointCondition)

   RestTemplateAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.web.client.RestTemplate' (OnClassCondition)

   RestTemplateAutoConfiguration#restTemplateBuilder matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.web.client.RestTemplateBuilder; SearchStrategy: all) did not find any beans (OnBeanCondition)

   RestTemplateMetricsConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.web.client.RestTemplate' (OnClassCondition)

   RestTemplateMetricsConfiguration#restTemplateTagConfigurer matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.metrics.web.client.RestTemplateExchangeTagsProvider; SearchStrategy: all) did not find any beans (OnBeanCondition)

   RestartEndpointWithoutIntegrationConfiguration matched:
      - @ConditionalOnMissingClass did not find unwanted class 'org.springframework.integration.monitor.IntegrationMBeanExporter' (OnClassCondition)

   RibbonAutoConfiguration matched:
      - AllNestedConditions 4 matched 0 did not; NestedCondition on RibbonAutoConfiguration.RibbonClassesConditions.RibbonPresent @ConditionalOnClass found required class 'com.netflix.ribbon.Ribbon'; NestedCondition on RibbonAutoConfiguration.RibbonClassesConditions.AsyncRestTemplatePresent @ConditionalOnClass found required class 'org.springframework.web.client.AsyncRestTemplate'; NestedCondition on RibbonAutoConfiguration.RibbonClassesConditions.RestTemplatePresent @ConditionalOnClass found required class 'org.springframework.web.client.RestTemplate'; NestedCondition on RibbonAutoConfiguration.RibbonClassesConditions.IClientPresent @ConditionalOnClass found required class 'com.netflix.client.IClient' (RibbonAutoConfiguration.RibbonClassesConditions)

   RibbonAutoConfiguration#loadBalancerClient matched:
      - @ConditionalOnMissingBean (types: org.springframework.cloud.client.loadbalancer.LoadBalancerClient; SearchStrategy: all) did not find any beans (OnBeanCondition)

   RibbonAutoConfiguration#propertiesFactory matched:
      - @ConditionalOnMissingBean (types: org.springframework.cloud.netflix.ribbon.PropertiesFactory; SearchStrategy: all) did not find any beans (OnBeanCondition)

   RibbonEurekaAutoConfiguration matched:
      - AllNestedConditions 3 matched 0 did not; NestedCondition on ConditionalOnRibbonAndEurekaEnabled.OnRibbonAndEurekaEnabledCondition.OnEurekaClientEnabled found matching nested conditions @ConditionalOnProperty (eureka.client.enabled) matched; @ConditionalOnProperty (spring.cloud.discovery.enabled) matched, @ConditionalOnProperty (eureka.client.enabled) matched; @ConditionalOnProperty (spring.cloud.discovery.enabled) matched; NestedCondition on ConditionalOnRibbonAndEurekaEnabled.OnRibbonAndEurekaEnabledCondition.EurekaBeans @ConditionalOnBean (types: com.netflix.discovery.EurekaClient; SearchStrategy: all) found bean 'scopedTarget.eurekaClient'; NestedCondition on ConditionalOnRibbonAndEurekaEnabled.OnRibbonAndEurekaEnabledCondition.Defaults found matching nested conditions @ConditionalOnClass found required class 'com.netflix.niws.loadbalancer.DiscoveryEnabledNIWSServerList', @ConditionalOnBean (types: org.springframework.cloud.netflix.ribbon.SpringClientFactory; SearchStrategy: all) found bean 'springClientFactory', @ConditionalOnProperty (ribbon.eureka.enabled) matched (ConditionalOnRibbonAndEurekaEnabled.OnRibbonAndEurekaEnabledCondition)

   ScheduledTasksEndpointAutoConfiguration matched:
      - @ConditionalOnEnabledEndpoint no property management.endpoint.scheduledtasks.enabled found so using endpoint default (OnEnabledEndpointCondition)

   ScheduledTasksEndpointAutoConfiguration#scheduledTasksEndpoint matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.scheduling.ScheduledTasksEndpoint; SearchStrategy: all) did not find any beans (OnBeanCondition)

   ServiceRegistryAutoConfiguration.ServiceRegistryEndpointConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.boot.actuate.endpoint.annotation.Endpoint' (OnClassCondition)
      - @ConditionalOnBean (types: org.springframework.cloud.client.serviceregistry.ServiceRegistry; SearchStrategy: all) found bean 'eurekaServiceRegistry' (OnBeanCondition)

   ServiceRegistryAutoConfiguration.ServiceRegistryEndpointConfiguration#serviceRegistryEndpoint matched:
      - @ConditionalOnEnabledEndpoint no property management.endpoint.service-registry.enabled found so using endpoint default (OnEnabledEndpointCondition)

   ServletEndpointManagementContextConfiguration matched:
      - found 'session' scope (OnWebApplicationCondition)

   ServletEndpointManagementContextConfiguration.WebMvcServletEndpointManagementContextConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet' (OnClassCondition)

   ServletManagementContextAutoConfiguration matched:
      - @ConditionalOnClass found required class 'javax.servlet.Servlet' (OnClassCondition)
      - found 'session' scope (OnWebApplicationCondition)

   ServletWebServerFactoryAutoConfiguration matched:
      - @ConditionalOnClass found required class 'javax.servlet.ServletRequest' (OnClassCondition)
      - found 'session' scope (OnWebApplicationCondition)

   ServletWebServerFactoryAutoConfiguration#tomcatServletWebServerFactoryCustomizer matched:
      - @ConditionalOnClass found required class 'org.apache.catalina.startup.Tomcat' (OnClassCondition)

   ServletWebServerFactoryConfiguration.EmbeddedTomcat matched:
      - @ConditionalOnClass found required classes 'javax.servlet.Servlet', 'org.apache.catalina.startup.Tomcat', 'org.apache.coyote.UpgradeProtocol' (OnClassCondition)
      - @ConditionalOnMissingBean (types: org.springframework.boot.web.servlet.server.ServletWebServerFactory; SearchStrategy: current) did not find any beans (OnBeanCondition)

   SimpleCacheConfiguration matched:
      - Cache org.springframework.boot.autoconfigure.cache.SimpleCacheConfiguration automatic cache type (CacheCondition)

   SimpleMetricsExportAutoConfiguration matched:
      - @ConditionalOnProperty (management.metrics.export.simple.enabled=true) matched (OnPropertyCondition)
      - @ConditionalOnBean (types: io.micrometer.core.instrument.Clock; SearchStrategy: all) found bean 'micrometerClock'; @ConditionalOnMissingBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SimpleMetricsExportAutoConfiguration#simpleConfig matched:
      - @ConditionalOnMissingBean (types: io.micrometer.core.instrument.simple.SimpleConfig; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SystemMetricsAutoConfiguration matched:
      - @ConditionalOnClass found required class 'io.micrometer.core.instrument.MeterRegistry' (OnClassCondition)
      - @ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry' (OnBeanCondition)

   SystemMetricsAutoConfiguration#fileDescriptorMetrics matched:
      - @ConditionalOnProperty (management.metrics.binders.files.enabled) matched (OnPropertyCondition)
      - @ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.system.FileDescriptorMetrics; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SystemMetricsAutoConfiguration#processorMetrics matched:
      - @ConditionalOnProperty (management.metrics.binders.processor.enabled) matched (OnPropertyCondition)
      - @ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.system.ProcessorMetrics; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SystemMetricsAutoConfiguration#uptimeMetrics matched:
      - @ConditionalOnProperty (management.metrics.binders.uptime.enabled) matched (OnPropertyCondition)
      - @ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.system.UptimeMetrics; SearchStrategy: all) did not find any beans (OnBeanCondition)

   TaskExecutionAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor' (OnClassCondition)

   TaskExecutionAutoConfiguration#applicationTaskExecutor matched:
      - @ConditionalOnMissingBean (types: java.util.concurrent.Executor; SearchStrategy: all) did not find any beans (OnBeanCondition)

   TaskExecutionAutoConfiguration#taskExecutorBuilder matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.task.TaskExecutorBuilder; SearchStrategy: all) did not find any beans (OnBeanCondition)

   TaskSchedulingAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler' (OnClassCondition)

   TaskSchedulingAutoConfiguration#taskSchedulerBuilder matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.task.TaskSchedulerBuilder; SearchStrategy: all) did not find any beans (OnBeanCondition)

   ThreadDumpEndpointAutoConfiguration matched:
      - @ConditionalOnEnabledEndpoint no property management.endpoint.threaddump.enabled found so using endpoint default (OnEnabledEndpointCondition)

   ThreadDumpEndpointAutoConfiguration#dumpEndpoint matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.management.ThreadDumpEndpoint; SearchStrategy: all) did not find any beans (OnBeanCondition)

   TomcatMetricsAutoConfiguration matched:
      - @ConditionalOnClass found required classes 'io.micrometer.core.instrument.binder.tomcat.TomcatMetrics', 'org.apache.catalina.Manager' (OnClassCondition)
      - @ConditionalOnWebApplication (required) found 'session' scope (OnWebApplicationCondition)

   TomcatMetricsAutoConfiguration#tomcatMetricsBinder matched:
      - @ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry'; @ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.tomcat.TomcatMetrics,org.springframework.boot.actuate.metrics.web.tomcat.TomcatMetricsBinder; SearchStrategy: all) did not find any beans (OnBeanCondition)

   UtilAutoConfiguration matched:
      - @ConditionalOnProperty (spring.cloud.util.enabled) matched (OnPropertyCondition)

   UtilAutoConfiguration#inetUtils matched:
      - @ConditionalOnMissingBean (types: org.springframework.cloud.commons.util.InetUtils; SearchStrategy: all) did not find any beans (OnBeanCondition)

   ValidationAutoConfiguration matched:
      - @ConditionalOnClass found required class 'javax.validation.executable.ExecutableValidator' (OnClassCondition)
      - @ConditionalOnResource found location classpath:META-INF/services/javax.validation.spi.ValidationProvider (OnResourceCondition)

   ValidationAutoConfiguration#defaultValidator matched:
      - @ConditionalOnMissingBean (types: javax.validation.Validator; SearchStrategy: all) did not find any beans (OnBeanCondition)

   ValidationAutoConfiguration#methodValidationPostProcessor matched:
      - @ConditionalOnMissingBean (types: org.springframework.validation.beanvalidation.MethodValidationPostProcessor; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WebEndpointAutoConfiguration matched:
      - @ConditionalOnWebApplication (required) found 'session' scope (OnWebApplicationCondition)

   WebEndpointAutoConfiguration#controllerEndpointDiscoverer matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointsSupplier; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WebEndpointAutoConfiguration#endpointMediaTypes matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WebEndpointAutoConfiguration#pathMappedEndpoints matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.PathMappedEndpoints; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WebEndpointAutoConfiguration#webEndpointDiscoverer matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.WebEndpointsSupplier; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WebEndpointAutoConfiguration.WebEndpointServletConfiguration matched:
      - found 'session' scope (OnWebApplicationCondition)

   WebEndpointAutoConfiguration.WebEndpointServletConfiguration#servletEndpointDiscoverer matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.annotation.ServletEndpointsSupplier; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WebMvcAutoConfiguration matched:
      - @ConditionalOnClass found required classes 'javax.servlet.Servlet', 'org.springframework.web.servlet.DispatcherServlet', 'org.springframework.web.servlet.config.annotation.WebMvcConfigurer' (OnClassCondition)
      - found 'session' scope (OnWebApplicationCondition)
      - @ConditionalOnMissingBean (types: org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WebMvcAutoConfiguration#formContentFilter matched:
      - @ConditionalOnProperty (spring.mvc.formcontent.filter.enabled) matched (OnPropertyCondition)
      - @ConditionalOnMissingBean (types: org.springframework.web.filter.FormContentFilter; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WebMvcAutoConfiguration#hiddenHttpMethodFilter matched:
      - @ConditionalOnProperty (spring.mvc.hiddenmethod.filter.enabled) matched (OnPropertyCondition)
      - @ConditionalOnMissingBean (types: org.springframework.web.filter.HiddenHttpMethodFilter; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#defaultViewResolver matched:
      - @ConditionalOnMissingBean (types: org.springframework.web.servlet.view.InternalResourceViewResolver; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#requestContextFilter matched:
      - @ConditionalOnMissingBean (types: org.springframework.web.context.request.RequestContextListener,org.springframework.web.filter.RequestContextFilter; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#viewResolver matched:
      - @ConditionalOnBean (types: org.springframework.web.servlet.ViewResolver; SearchStrategy: all) found beans 'defaultViewResolver', 'beanNameViewResolver', 'mvcViewResolver'; @ConditionalOnMissingBean (names: viewResolver; types: org.springframework.web.servlet.view.ContentNegotiatingViewResolver; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter.FaviconConfiguration matched:
      - @ConditionalOnProperty (spring.mvc.favicon.enabled) matched (OnPropertyCondition)

   WebMvcEndpointManagementContextConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet' (OnClassCondition)
      - found 'session' scope (OnWebApplicationCondition)
      - @ConditionalOnBean (types: org.springframework.web.servlet.DispatcherServlet,org.springframework.boot.actuate.endpoint.web.WebEndpointsSupplier; SearchStrategy: all) found beans 'webEndpointDiscoverer', 'dispatcherServlet' (OnBeanCondition)

   WebMvcEndpointManagementContextConfiguration#controllerEndpointHandlerMapping matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.servlet.ControllerEndpointHandlerMapping; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WebMvcEndpointManagementContextConfiguration#webEndpointServletHandlerMapping matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.servlet.WebMvcEndpointHandlerMapping; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WebMvcMetricsAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet' (OnClassCondition)
      - found 'session' scope (OnWebApplicationCondition)
      - @ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry' (OnBeanCondition)

   WebMvcMetricsAutoConfiguration#webMvcTagsProvider matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WebSocketServletAutoConfiguration matched:
      - @ConditionalOnClass found required classes 'javax.servlet.Servlet', 'javax.websocket.server.ServerContainer' (OnClassCondition)
      - found 'session' scope (OnWebApplicationCondition)

   WebSocketServletAutoConfiguration.TomcatWebSocketConfiguration matched:
      - @ConditionalOnClass found required classes 'org.apache.catalina.startup.Tomcat', 'org.apache.tomcat.websocket.server.WsSci' (OnClassCondition)

   WebSocketServletAutoConfiguration.TomcatWebSocketConfiguration#websocketServletWebServerCustomizer matched:
      - @ConditionalOnMissingBean (names: websocketServletWebServerCustomizer; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WritableEnvironmentEndpointAutoConfiguration matched:
      - @ConditionalOnClass found required classes 'org.springframework.boot.actuate.env.EnvironmentEndpoint', 'org.springframework.boot.actuate.autoconfigure.env.EnvironmentEndpointProperties' (OnClassCondition)
      - @ConditionalOnProperty (management.endpoint.env.post.enabled) matched (OnPropertyCondition)
      - @ConditionalOnBean (types: org.springframework.cloud.context.environment.EnvironmentManager; SearchStrategy: all) found bean 'environmentManager' (OnBeanCondition)

   WritableEnvironmentEndpointAutoConfiguration#environmentEndpoint matched:
      - @ConditionalOnMissingBean (types: org.springframework.cloud.context.environment.WritableEnvironmentEndpoint; SearchStrategy: all) did not find any beans (OnBeanCondition)
      - @ConditionalOnEnabledEndpoint no property management.endpoint.env.enabled found so using endpoint default (OnEnabledEndpointCondition)

   WritableEnvironmentEndpointAutoConfiguration#environmentEndpointWebExtension matched:
      - @ConditionalOnEnabledEndpoint no property management.endpoint.env.enabled found so using endpoint default (OnEnabledEndpointCondition)


Negative matches:
-----------------

   ActiveMQAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.jms.ConnectionFactory' (OnClassCondition)

   AopAutoConfiguration.JdkDynamicAutoProxyConfiguration:
      Did not match:
         - @ConditionalOnProperty (spring.aop.proxy-target-class=false) did not find property 'proxy-target-class' (OnPropertyCondition)

   AppOpticsMetricsExportAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.micrometer.appoptics.AppOpticsMeterRegistry' (OnClassCondition)

   ArtemisAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.jms.ConnectionFactory' (OnClassCondition)

   AtlasMetricsExportAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.micrometer.atlas.AtlasMeterRegistry' (OnClassCondition)

   AuditAutoConfiguration#authenticationAuditListener:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.authentication.event.AbstractAuthenticationEvent' (OnClassCondition)

   AuditAutoConfiguration#authorizationAuditListener:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.access.event.AbstractAuthorizationEvent' (OnClassCondition)

   BatchAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.batch.core.launch.JobLauncher' (OnClassCondition)

   CacheAutoConfiguration:
      Did not match:
         - @ConditionalOnBean (types: org.springframework.cache.interceptor.CacheAspectSupport; SearchStrategy: all) did not find any beans of type org.springframework.cache.interceptor.CacheAspectSupport (OnBeanCondition)
      Matched:
         - @ConditionalOnClass found required class 'org.springframework.cache.CacheManager' (OnClassCondition)

   CacheAutoConfiguration.CacheManagerJpaDependencyConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean' (OnClassCondition)
         - Ancestor org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration did not match (ConditionEvaluationReport.AncestorsMatchedCondition)

   CacheMeterBinderProvidersConfiguration.CaffeineCacheMeterBinderProviderConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.github.benmanes.caffeine.cache.Cache' (OnClassCondition)

   CacheMeterBinderProvidersConfiguration.EhCache2CacheMeterBinderProviderConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'net.sf.ehcache.Ehcache' (OnClassCondition)

   CacheMeterBinderProvidersConfiguration.HazelcastCacheMeterBinderProviderConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required classes 'com.hazelcast.spring.cache.HazelcastCache', 'com.hazelcast.core.Hazelcast' (OnClassCondition)

   CacheMeterBinderProvidersConfiguration.JCacheCacheMeterBinderProviderConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.cache.CacheManager' (OnClassCondition)

   CacheMetricsAutoConfiguration:
      Did not match:
         - @ConditionalOnBean (types: org.springframework.cache.CacheManager; SearchStrategy: all) did not find any beans of type org.springframework.cache.CacheManager (OnBeanCondition)

   CaffeineCacheConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.github.benmanes.caffeine.cache.Caffeine' (OnClassCondition)

   CassandraAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.datastax.driver.core.Cluster' (OnClassCondition)

   CassandraDataAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.datastax.driver.core.Cluster' (OnClassCondition)

   CassandraHealthIndicatorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.datastax.driver.core.Cluster' (OnClassCondition)

   CassandraReactiveDataAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.datastax.driver.core.Cluster' (OnClassCondition)

   CassandraReactiveHealthIndicatorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.datastax.driver.core.Cluster' (OnClassCondition)

   CassandraReactiveRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.cassandra.ReactiveSession' (OnClassCondition)

   CassandraRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.datastax.driver.core.Session' (OnClassCondition)

   ClientHttpConnectorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.web.reactive.function.client.WebClient' (OnClassCondition)

   CloudFoundryActuatorAutoConfiguration:
      Did not match:
         - @ConditionalOnCloudPlatform did not find CLOUD_FOUNDRY (OnCloudPlatformCondition)
      Matched:
         - @ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet' (OnClassCondition)
         - found 'session' scope (OnWebApplicationCondition)
         - @ConditionalOnProperty (management.cloudfoundry.enabled) matched (OnPropertyCondition)

   CloudHypermediaAutoConfiguration:
      Did not match:
         - @ConditionalOnBean (types: org.springframework.cloud.client.hypermedia.RemoteResource; SearchStrategy: all) did not find any beans of type org.springframework.cloud.client.hypermedia.RemoteResource (OnBeanCondition)

   CloudServiceConnectorsAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.cloud.config.java.CloudScanConfiguration' (OnClassCondition)

   CompositeMeterRegistryConfiguration:
      Did not match:
         - NoneNestedConditions 1 matched 1 did not; NestedCondition on CompositeMeterRegistryConfiguration.MultipleNonPrimaryMeterRegistriesCondition.SingleInjectableMeterRegistry @ConditionalOnSingleCandidate (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found a primary bean from beans 'simpleMeterRegistry'; NestedCondition on CompositeMeterRegistryConfiguration.MultipleNonPrimaryMeterRegistriesCondition.NoMeterRegistryCondition @ConditionalOnMissingBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found beans of type 'io.micrometer.core.instrument.MeterRegistry' simpleMeterRegistry (CompositeMeterRegistryConfiguration.MultipleNonPrimaryMeterRegistriesCondition)

   CouchbaseAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster' (OnClassCondition)

   CouchbaseCacheConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required classes 'com.couchbase.client.java.Bucket', 'com.couchbase.client.spring.cache.CouchbaseCacheManager' (OnClassCondition)

   CouchbaseDataAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.couchbase.client.java.Bucket' (OnClassCondition)

   CouchbaseHealthIndicatorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster' (OnClassCondition)

   CouchbaseReactiveDataAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.couchbase.client.java.Bucket' (OnClassCondition)

   CouchbaseReactiveHealthIndicatorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster' (OnClassCondition)

   CouchbaseReactiveRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.couchbase.client.java.Bucket' (OnClassCondition)

   CouchbaseRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.couchbase.client.java.Bucket' (OnClassCondition)

   DataSourceAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType' (OnClassCondition)

   DataSourceHealthIndicatorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.jdbc.core.JdbcTemplate' (OnClassCondition)

   DataSourcePoolMetricsAutoConfiguration:
      Did not match:
         - @ConditionalOnBean (types: javax.sql.DataSource,io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) did not find any beans of type javax.sql.DataSource (OnBeanCondition)
      Matched:
         - @ConditionalOnClass found required classes 'javax.sql.DataSource', 'io.micrometer.core.instrument.MeterRegistry' (OnClassCondition)

   DataSourcePoolMetricsAutoConfiguration.HikariDataSourceMetricsConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.zaxxer.hikari.HikariDataSource' (OnClassCondition)
         - Ancestor org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsAutoConfiguration did not match (ConditionEvaluationReport.AncestorsMatchedCondition)

   DataSourceTransactionManagerAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.jdbc.core.JdbcTemplate' (OnClassCondition)

   DatadogMetricsExportAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.micrometer.datadog.DatadogMeterRegistry' (OnClassCondition)

   DiscoveryClientOptionalArgsConfiguration#restTemplateDiscoveryClientOptionalArgs:
      Did not match:
         - @ConditionalOnMissingClass found unwanted class 'com.sun.jersey.api.client.filter.ClientFilter' (OnClassCondition)

   DispatcherServletAutoConfiguration.DispatcherServletConfiguration#multipartResolver:
      Did not match:
         - @ConditionalOnBean (types: org.springframework.web.multipart.MultipartResolver; SearchStrategy: all) did not find any beans of type org.springframework.web.multipart.MultipartResolver (OnBeanCondition)

   DynatraceMetricsExportAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.micrometer.dynatrace.DynatraceMeterRegistry' (OnClassCondition)

   EhCacheCacheConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'net.sf.ehcache.Cache' (OnClassCondition)

   ElasticMetricsExportAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.micrometer.elastic.ElasticMeterRegistry' (OnClassCondition)

   ElasticSearchClientHealthIndicatorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.elasticsearch.client.Client' (OnClassCondition)

   ElasticSearchJestHealthIndicatorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.searchbox.client.JestClient' (OnClassCondition)

   ElasticSearchRestHealthIndicatorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.elasticsearch.client.RestClient' (OnClassCondition)

   ElasticsearchAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.elasticsearch.client.Client' (OnClassCondition)

   ElasticsearchDataAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.elasticsearch.client.Client' (OnClassCondition)

   ElasticsearchRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.elasticsearch.client.Client' (OnClassCondition)

   EmbeddedLdapAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.unboundid.ldap.listener.InMemoryDirectoryServer' (OnClassCondition)

   EmbeddedMongoAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.mongodb.MongoClient' (OnClassCondition)

   EmbeddedWebServerFactoryCustomizerAutoConfiguration.JettyWebServerFactoryCustomizerConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required classes 'org.eclipse.jetty.server.Server', 'org.eclipse.jetty.util.Loader', 'org.eclipse.jetty.webapp.WebAppContext' (OnClassCondition)

   EmbeddedWebServerFactoryCustomizerAutoConfiguration.NettyWebServerFactoryCustomizerConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'reactor.netty.http.server.HttpServer' (OnClassCondition)

   EmbeddedWebServerFactoryCustomizerAutoConfiguration.UndertowWebServerFactoryCustomizerConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required classes 'io.undertow.Undertow', 'org.xnio.SslClientAuthMode' (OnClassCondition)

   EnvironmentEndpointAutoConfiguration#environmentEndpoint:
      Did not match:
         - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.env.EnvironmentEndpoint; SearchStrategy: all) found beans of type 'org.springframework.boot.actuate.env.EnvironmentEndpoint' environmentEndpoint (OnBeanCondition)

   EnvironmentEndpointAutoConfiguration#environmentEndpointWebExtension:
      Did not match:
         - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.env.EnvironmentEndpointWebExtension; SearchStrategy: all) found beans of type 'org.springframework.boot.actuate.env.EnvironmentEndpointWebExtension' environmentEndpointWebExtension (OnBeanCondition)

   ErrorWebFluxAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.web.reactive.config.WebFluxConfigurer' (OnClassCondition)

   EurekaClientAutoConfiguration.EurekaClientConfiguration:
      Did not match:
         - AnyNestedCondition 0 matched 2 did not; NestedCondition on EurekaClientAutoConfiguration.OnMissingRefreshScopeCondition.MissingScope @ConditionalOnMissingBean (types: org.springframework.cloud.autoconfigure.RefreshAutoConfiguration; SearchStrategy: all) found beans of type 'org.springframework.cloud.autoconfigure.RefreshAutoConfiguration' org.springframework.cloud.autoconfigure.RefreshAutoConfiguration; NestedCondition on EurekaClientAutoConfiguration.OnMissingRefreshScopeCondition.MissingClass @ConditionalOnMissingClass found unwanted class 'org.springframework.cloud.context.scope.refresh.RefreshScope' (EurekaClientAutoConfiguration.OnMissingRefreshScopeCondition)

   EurekaClientConfigServerAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.cloud.config.server.config.ConfigServerProperties' (OnClassCondition)

   EurekaDiscoveryClientConfigServiceAutoConfiguration:
      Did not match:
         - @ConditionalOnProperty (spring.cloud.config.discovery.enabled) did not find property 'spring.cloud.config.discovery.enabled' (OnPropertyCondition)

   EurekaDiscoveryClientConfiguration.EurekaHealthCheckHandlerConfiguration:
      Did not match:
         - @ConditionalOnProperty (eureka.client.healthcheck.enabled) did not find property 'eureka.client.healthcheck.enabled' (OnPropertyCondition)

   FlywayAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.flywaydb.core.Flyway' (OnClassCondition)

   FlywayEndpointAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.flywaydb.core.Flyway' (OnClassCondition)

   FreeMarkerNonWebConfiguration:
      Did not match:
         - @ConditionalOnWebApplication found 'session' scope and did not find reactive web application classes (OnWebApplicationCondition)

   FreeMarkerReactiveWebConfiguration:
      Did not match:
         - did not find reactive web application classes (OnWebApplicationCondition)

   FreeMarkerServletWebConfiguration#resourceUrlEncodingFilter:
      Did not match:
         - @ConditionalOnEnabledResourceChain did not find class org.webjars.WebJarAssetLocator (OnEnabledResourceChainCondition)

   GangliaMetricsExportAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.micrometer.ganglia.GangliaMeterRegistry' (OnClassCondition)

   GraphiteMetricsExportAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.micrometer.graphite.GraphiteMeterRegistry' (OnClassCondition)

   GroovyTemplateAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'groovy.text.markup.MarkupTemplateEngine' (OnClassCondition)

   GsonHttpMessageConvertersConfiguration.GsonHttpMessageConverterConfiguration:
      Did not match:
         - AnyNestedCondition 0 matched 2 did not; NestedCondition on GsonHttpMessageConvertersConfiguration.PreferGsonOrJacksonAndJsonbUnavailableCondition.JacksonJsonbUnavailable NoneNestedConditions 1 matched 1 did not; NestedCondition on GsonHttpMessageConvertersConfiguration.JacksonAndJsonbUnavailableCondition.JsonbPreferred @ConditionalOnProperty (spring.http.converters.preferred-json-mapper=jsonb) did not find property 'spring.http.converters.preferred-json-mapper'; NestedCondition on GsonHttpMessageConvertersConfiguration.JacksonAndJsonbUnavailableCondition.JacksonAvailable @ConditionalOnBean (types: org.springframework.http.converter.json.MappingJackson2HttpMessageConverter; SearchStrategy: all) found bean 'mappingJackson2HttpMessageConverter'; NestedCondition on GsonHttpMessageConvertersConfiguration.PreferGsonOrJacksonAndJsonbUnavailableCondition.GsonPreferred @ConditionalOnProperty (spring.http.converters.preferred-json-mapper=gson) did not find property 'spring.http.converters.preferred-json-mapper' (GsonHttpMessageConvertersConfiguration.PreferGsonOrJacksonAndJsonbUnavailableCondition)

   H2ConsoleAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.h2.server.web.WebServlet' (OnClassCondition)

   HazelcastAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.hazelcast.core.HazelcastInstance' (OnClassCondition)

   HazelcastCacheConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required classes 'com.hazelcast.core.HazelcastInstance', 'com.hazelcast.spring.cache.HazelcastCacheManager' (OnClassCondition)

   HazelcastJpaDependencyAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.hazelcast.core.HazelcastInstance' (OnClassCondition)

   HealthEndpointWebExtensionConfiguration.ReactiveWebHealthConfiguration:
      Did not match:
         - did not find reactive web application classes (OnWebApplicationCondition)

   HealthIndicatorAutoConfiguration#applicationHealthIndicator:
      Did not match:
         - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthIndicator,org.springframework.boot.actuate.health.ReactiveHealthIndicator; SearchStrategy: all) found beans of type 'org.springframework.boot.actuate.health.HealthIndicator' diskSpaceHealthIndicator (OnBeanCondition)

   HealthIndicatorAutoConfiguration.ReactiveHealthIndicatorConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'reactor.core.publisher.Flux' (OnClassCondition)

   HibernateJpaAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.persistence.EntityManager' (OnClassCondition)

   HibernateMetricsAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.persistence.EntityManagerFactory' (OnClassCondition)

   HttpClientConfiguration.OkHttpClientConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'okhttp3.OkHttpClient' (OnClassCondition)

   HttpHandlerAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.web.reactive.DispatcherHandler' (OnClassCondition)

   HttpTraceAutoConfiguration.ReactiveTraceFilterConfiguration:
      Did not match:
         - did not find reactive web application classes (OnWebApplicationCondition)

   HumioMetricsExportAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.micrometer.humio.HumioMeterRegistry' (OnClassCondition)

   HypermediaAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.hateoas.Resource' (OnClassCondition)

   HystrixAutoConfiguration.HystrixServletAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.netflix.hystrix.contrib.metrics.eventstream.HystrixMetricsStreamServlet' (OnClassCondition)

   HystrixAutoConfiguration.HystrixWebfluxManagementContextConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.web.reactive.DispatcherHandler' (OnClassCondition)

   HystrixSecurityAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.core.context.SecurityContext' (OnClassCondition)

   InfinispanCacheConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.infinispan.spring.provider.SpringEmbeddedCacheManager' (OnClassCondition)

   InfluxDbAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.influxdb.InfluxDB' (OnClassCondition)

   InfluxDbHealthIndicatorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.influxdb.InfluxDB' (OnClassCondition)

   InfluxMetricsExportAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.micrometer.influx.InfluxMeterRegistry' (OnClassCondition)

   InfoContributorAutoConfiguration#buildInfoContributor:
      Did not match:
         - @ConditionalOnSingleCandidate (types: org.springframework.boot.info.BuildProperties; SearchStrategy: all) did not find any beans (OnBeanCondition)
      Matched:
         - @ConditionalOnEnabledInfoContributor management.info.defaults.enabled is considered true (OnEnabledInfoContributorCondition)

   InfoContributorAutoConfiguration#gitInfoContributor:
      Did not match:
         - @ConditionalOnSingleCandidate (types: org.springframework.boot.info.GitProperties; SearchStrategy: all) did not find any beans (OnBeanCondition)
      Matched:
         - @ConditionalOnEnabledInfoContributor management.info.defaults.enabled is considered true (OnEnabledInfoContributorCondition)

   IntegrationAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.integration.config.EnableIntegration' (OnClassCondition)

   IntegrationGraphEndpointAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.integration.graph.IntegrationGraphServer' (OnClassCondition)

   JCacheCacheConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.cache.Caching' (OnClassCondition)

   JacksonAutoConfiguration.JodaDateTimeJacksonConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required classes 'com.fasterxml.jackson.datatype.joda.ser.DateTimeSerializer', 'com.fasterxml.jackson.datatype.joda.cfg.JacksonJodaDateFormat' (OnClassCondition)

   JdbcRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.jdbc.repository.config.JdbcConfiguration' (OnClassCondition)

   JdbcTemplateAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.jdbc.core.JdbcTemplate' (OnClassCondition)

   JerseyAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.glassfish.jersey.server.spring.SpringComponentProvider' (OnClassCondition)

   JerseySameManagementContextConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.glassfish.jersey.server.ResourceConfig' (OnClassCondition)

   JerseyServerMetricsAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.micrometer.jersey2.server.MetricsApplicationEventListener' (OnClassCondition)

   JerseyWebEndpointManagementContextConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.glassfish.jersey.server.ResourceConfig' (OnClassCondition)

   JestAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.searchbox.client.JestClient' (OnClassCondition)

   JettyMetricsAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.eclipse.jetty.server.Server' (OnClassCondition)

   JmsAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.jms.Message' (OnClassCondition)

   JmsHealthIndicatorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.jms.ConnectionFactory' (OnClassCondition)

   JmxMetricsExportAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.micrometer.jmx.JmxMeterRegistry' (OnClassCondition)

   JndiConnectionFactoryAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.jms.core.JmsTemplate' (OnClassCondition)

   JndiDataSourceAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType' (OnClassCondition)

   JolokiaEndpointAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.jolokia.http.AgentServlet' (OnClassCondition)

   JooqAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.jooq.DSLContext' (OnClassCondition)

   JpaRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.jpa.repository.JpaRepository' (OnClassCondition)

   JsonbAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.json.bind.Jsonb' (OnClassCondition)

   JsonbHttpMessageConvertersConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.json.bind.Jsonb' (OnClassCondition)

   JtaAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.transaction.Transaction' (OnClassCondition)

   KafkaAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.kafka.core.KafkaTemplate' (OnClassCondition)

   KafkaMetricsAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.apache.kafka.clients.consumer.KafkaConsumer' (OnClassCondition)

   KairosMetricsExportAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.micrometer.kairos.KairosMeterRegistry' (OnClassCondition)

   LdapAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.ldap.core.ContextSource' (OnClassCondition)

   LdapHealthIndicatorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.ldap.core.LdapOperations' (OnClassCondition)

   LdapRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.ldap.repository.LdapRepository' (OnClassCondition)

   LiquibaseAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'liquibase.change.DatabaseChange' (OnClassCondition)

   LiquibaseEndpointAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'liquibase.integration.spring.SpringLiquibase' (OnClassCondition)

   LoadBalancerAutoConfiguration.RetryAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.retry.support.RetryTemplate' (OnClassCondition)

   LoadBalancerAutoConfiguration.RetryInterceptorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.retry.support.RetryTemplate' (OnClassCondition)

   Log4J2MetricsAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.apache.logging.log4j.core.LoggerContext' (OnClassCondition)

   LogFileWebEndpointAutoConfiguration#logFileWebEndpoint:
      Did not match:
         - Log File did not find logging file (LogFileWebEndpointAutoConfiguration.LogFileCondition)

   MailHealthIndicatorAutoConfiguration:
      Did not match:
         - @ConditionalOnBean (types: org.springframework.mail.javamail.JavaMailSenderImpl; SearchStrategy: all) did not find any beans of type org.springframework.mail.javamail.JavaMailSenderImpl (OnBeanCondition)
      Matched:
         - @ConditionalOnClass found required class 'org.springframework.mail.javamail.JavaMailSenderImpl' (OnClassCondition)
         - @ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true (OnEnabledHealthIndicatorCondition)

   MailSenderAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.mail.internet.MimeMessage' (OnClassCondition)

   MailSenderValidatorAutoConfiguration:
      Did not match:
         - @ConditionalOnProperty (spring.mail.test-connection) did not find property 'test-connection' (OnPropertyCondition)

   ManagementContextAutoConfiguration.DifferentManagementContextConfiguration:
      Did not match:
         - Management Port actual port type (SAME) did not match required type (DIFFERENT) (OnManagementPortCondition)

   ManagementWebSecurityAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter' (OnClassCondition)

   MappingsEndpointAutoConfiguration.ReactiveWebConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.web.reactive.DispatcherHandler' (OnClassCondition)

   MessageSourceAutoConfiguration:
      Did not match:
         - ResourceBundle did not find bundle with basename messages (MessageSourceAutoConfiguration.ResourceBundleCondition)

   MongoAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.mongodb.MongoClient' (OnClassCondition)

   MongoDataAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.mongodb.client.MongoClient' (OnClassCondition)

   MongoHealthIndicatorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.mongodb.core.MongoTemplate' (OnClassCondition)

   MongoReactiveAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.mongodb.reactivestreams.client.MongoClient' (OnClassCondition)

   MongoReactiveDataAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.mongodb.reactivestreams.client.MongoClient' (OnClassCondition)

   MongoReactiveHealthIndicatorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'reactor.core.publisher.Flux' (OnClassCondition)

   MongoReactiveRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.mongodb.reactivestreams.client.MongoClient' (OnClassCondition)

   MongoRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.mongodb.MongoClient' (OnClassCondition)

   MustacheAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.samskivert.mustache.Mustache' (OnClassCondition)

   Neo4jDataAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.neo4j.ogm.session.SessionFactory' (OnClassCondition)

   Neo4jHealthIndicatorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.neo4j.ogm.session.SessionFactory' (OnClassCondition)

   Neo4jRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.neo4j.ogm.session.Neo4jSession' (OnClassCondition)

   NewRelicMetricsExportAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.micrometer.newrelic.NewRelicMeterRegistry' (OnClassCondition)

   NoOpMeterRegistryConfiguration:
      Did not match:
         - @ConditionalOnMissingBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found beans of type 'io.micrometer.core.instrument.MeterRegistry' simpleMeterRegistry (OnBeanCondition)

   NoopDiscoveryClientAutoConfiguration:
      Did not match:
         - @ConditionalOnMissingBean (types: org.springframework.cloud.client.discovery.DiscoveryClient; SearchStrategy: all) found beans of type 'org.springframework.cloud.client.discovery.DiscoveryClient' discoveryClient, compositeDiscoveryClient, simpleDiscoveryClient (OnBeanCondition)

   NoopDiscoveryClientAutoConfiguration.Boot15PortFinderConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext' (OnClassCondition)
         - Ancestor org.springframework.cloud.client.discovery.noop.NoopDiscoveryClientAutoConfiguration did not match (ConditionEvaluationReport.AncestorsMatchedCondition)

   OAuth2ClientAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.config.annotation.web.configuration.EnableWebSecurity' (OnClassCondition)

   OAuth2ResourceServerAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.oauth2.jwt.JwtDecoder' (OnClassCondition)

   PauseResumeEndpointsConfiguration#pauseEndpoint:
      Did not match:
         - @ConditionalOnBean (types: org.springframework.cloud.context.restart.RestartEndpoint; SearchStrategy: all) did not find any beans of type org.springframework.cloud.context.restart.RestartEndpoint (OnBeanCondition)

   PauseResumeEndpointsConfiguration#resumeEndpoint:
      Did not match:
         - @ConditionalOnBean (types: org.springframework.cloud.context.restart.RestartEndpoint; SearchStrategy: all) did not find any beans of type org.springframework.cloud.context.restart.RestartEndpoint (OnBeanCondition)

   PersistenceExceptionTranslationAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor' (OnClassCondition)

   ProjectInfoAutoConfiguration#buildProperties:
      Did not match:
         - @ConditionalOnResource did not find resource '${spring.info.build.location:classpath:META-INF/build-info.properties}' (OnResourceCondition)

   ProjectInfoAutoConfiguration#gitProperties:
      Did not match:
         - GitResource did not find git info at classpath:git.properties (ProjectInfoAutoConfiguration.GitResourceAvailableCondition)

   PrometheusMetricsExportAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.micrometer.prometheus.PrometheusMeterRegistry' (OnClassCondition)

   QuartzAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.quartz.Scheduler' (OnClassCondition)

   RabbitAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.rabbitmq.client.Channel' (OnClassCondition)

   RabbitHealthIndicatorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.amqp.rabbit.core.RabbitTemplate' (OnClassCondition)

   RabbitMetricsAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.rabbitmq.client.ConnectionFactory' (OnClassCondition)

   ReactiveCloudFoundryActuatorAutoConfiguration:
      Did not match:
         - @ConditionalOnWebApplication did not find reactive web application classes (OnWebApplicationCondition)

   ReactiveLoadBalancerAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.web.reactive.function.client.WebClient' (OnClassCondition)

   ReactiveManagementContextAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'reactor.core.publisher.Flux' (OnClassCondition)

   ReactiveManagementWebSecurityAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity' (OnClassCondition)

   ReactiveOAuth2ClientAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'reactor.core.publisher.Flux' (OnClassCondition)

   ReactiveOAuth2ResourceServerAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity' (OnClassCondition)

   ReactiveSecurityAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'reactor.core.publisher.Flux' (OnClassCondition)

   ReactiveUserDetailsServiceAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.authentication.ReactiveAuthenticationManager' (OnClassCondition)

   ReactiveWebServerFactoryAutoConfiguration:
      Did not match:
         - @ConditionalOnWebApplication did not find reactive web application classes (OnWebApplicationCondition)

   ReactorCoreAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'reactor.core.publisher.Flux' (OnClassCondition)

   RedisAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.redis.core.RedisOperations' (OnClassCondition)

   RedisCacheConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.redis.connection.RedisConnectionFactory' (OnClassCondition)

   RedisHealthIndicatorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.redis.connection.RedisConnectionFactory' (OnClassCondition)

   RedisReactiveAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'reactor.core.publisher.Flux' (OnClassCondition)

   RedisReactiveHealthIndicatorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'reactor.core.publisher.Flux' (OnClassCondition)

   RedisRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.redis.repository.configuration.EnableRedisRepositories' (OnClassCondition)

   RefreshAutoConfiguration.JpaInvokerConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.persistence.EntityManagerFactory' (OnClassCondition)

   RepositoryRestMvcAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration' (OnClassCondition)

   RestClientAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.elasticsearch.client.RestClient' (OnClassCondition)

   RestartEndpointWithIntegrationConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.integration.monitor.IntegrationMBeanExporter' (OnClassCondition)

   RestartEndpointWithoutIntegrationConfiguration#restartEndpointWithoutIntegration:
      Did not match:
         - @ConditionalOnEnabledEndpoint no property management.endpoint.restart.enabled found so using endpoint default (OnEnabledEndpointCondition)

   RibbonAutoConfiguration#loadBalancedRetryPolicyFactory:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.retry.support.RetryTemplate' (OnClassCondition)

   RibbonAutoConfiguration#ribbonApplicationContextInitializer:
      Did not match:
         - @ConditionalOnProperty (ribbon.eager-load.enabled) did not find property 'ribbon.eager-load.enabled' (OnPropertyCondition)

   RibbonAutoConfiguration.RibbonClientHttpRequestFactoryConfiguration:
      Did not match:
         - AnyNestedCondition 0 matched 2 did not; NestedCondition on RibbonAutoConfiguration.OnRibbonRestClientCondition.RibbonProperty @ConditionalOnProperty (ribbon.restclient.enabled) did not find property 'ribbon.restclient.enabled'; NestedCondition on RibbonAutoConfiguration.OnRibbonRestClientCondition.ZuulProperty @ConditionalOnProperty (ribbon.http.client.enabled) did not find property 'ribbon.http.client.enabled' (RibbonAutoConfiguration.OnRibbonRestClientCondition)
      Matched:
         - @ConditionalOnClass found required class 'com.netflix.client.http.HttpRequest' (OnClassCondition)

   SecurityAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.authentication.DefaultAuthenticationEventPublisher' (OnClassCondition)

   SecurityFilterAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.config.http.SessionCreationPolicy' (OnClassCondition)

   SecurityRequestMatcherProviderAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.web.util.matcher.RequestMatcher' (OnClassCondition)

   SendGridAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.sendgrid.SendGrid' (OnClassCondition)

   ServletEndpointManagementContextConfiguration.JerseyServletEndpointManagementContextConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.glassfish.jersey.server.ResourceConfig' (OnClassCondition)

   ServletManagementContextAutoConfiguration.ApplicationContextFilterConfiguration:
      Did not match:
         - @ConditionalOnProperty (management.server.add-application-context-header=true) did not find property 'add-application-context-header' (OnPropertyCondition)

   ServletWebServerFactoryConfiguration.EmbeddedJetty:
      Did not match:
         - @ConditionalOnClass did not find required classes 'org.eclipse.jetty.server.Server', 'org.eclipse.jetty.util.Loader', 'org.eclipse.jetty.webapp.WebAppContext' (OnClassCondition)

   ServletWebServerFactoryConfiguration.EmbeddedUndertow:
      Did not match:
         - @ConditionalOnClass did not find required classes 'io.undertow.Undertow', 'org.xnio.SslClientAuthMode' (OnClassCondition)

   SessionAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.session.Session' (OnClassCondition)

   SessionsEndpointAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.session.FindByIndexNameSessionRepository' (OnClassCondition)

   ShutdownEndpointAutoConfiguration:
      Did not match:
         - @ConditionalOnEnabledEndpoint no property management.endpoint.shutdown.enabled found so using endpoint default (OnEnabledEndpointCondition)

   SignalFxMetricsExportAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.micrometer.signalfx.SignalFxMeterRegistry' (OnClassCondition)

   SolrAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.apache.solr.client.solrj.impl.CloudSolrClient' (OnClassCondition)

   SolrHealthIndicatorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.apache.solr.client.solrj.SolrClient' (OnClassCondition)

   SolrRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.apache.solr.client.solrj.SolrClient' (OnClassCondition)

   SpringApplicationAdminJmxAutoConfiguration:
      Did not match:
         - @ConditionalOnProperty (spring.application.admin.enabled=true) did not find property 'enabled' (OnPropertyCondition)

   SpringDataWebAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.web.PageableHandlerMethodArgumentResolver' (OnClassCondition)

   StatsdMetricsExportAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.micrometer.statsd.StatsdMeterRegistry' (OnClassCondition)

   TaskSchedulingAutoConfiguration#taskScheduler:
      Did not match:
         - @ConditionalOnBean (names: org.springframework.context.annotation.internalScheduledAnnotationProcessor; SearchStrategy: all) did not find any beans named org.springframework.context.annotation.internalScheduledAnnotationProcessor (OnBeanCondition)

   ThymeleafAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.thymeleaf.spring5.SpringTemplateEngine' (OnClassCondition)

   TransactionAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.transaction.PlatformTransactionManager' (OnClassCondition)

   UserDetailsServiceAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.authentication.AuthenticationManager' (OnClassCondition)

   WavefrontMetricsExportAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.micrometer.wavefront.WavefrontMeterRegistry' (OnClassCondition)

   WebClientAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.web.reactive.function.client.WebClient' (OnClassCondition)

   WebClientMetricsConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.web.reactive.function.client.WebClient' (OnClassCondition)

   WebFluxAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.web.reactive.config.WebFluxConfigurer' (OnClassCondition)

   WebFluxEndpointManagementContextConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.web.reactive.DispatcherHandler' (OnClassCondition)

   WebFluxMetricsAutoConfiguration:
      Did not match:
         - @ConditionalOnWebApplication did not find reactive web application classes (OnWebApplicationCondition)

   WebMvcAutoConfiguration.ResourceChainCustomizerConfiguration:
      Did not match:
         - @ConditionalOnEnabledResourceChain did not find class org.webjars.WebJarAssetLocator (OnEnabledResourceChainCondition)

   WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#beanNameViewResolver:
      Did not match:
         - @ConditionalOnMissingBean (types: org.springframework.web.servlet.view.BeanNameViewResolver; SearchStrategy: all) found beans of type 'org.springframework.web.servlet.view.BeanNameViewResolver' beanNameViewResolver (OnBeanCondition)

   WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#localeResolver:
      Did not match:
         - @ConditionalOnProperty (spring.mvc.locale) did not find property 'locale' (OnPropertyCondition)

   WebServiceTemplateAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.oxm.Marshaller' (OnClassCondition)

   WebServicesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.ws.transport.http.MessageDispatcherServlet' (OnClassCondition)

   WebSocketMessagingAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer' (OnClassCondition)

   WebSocketReactiveAutoConfiguration:
      Did not match:
         - @ConditionalOnWebApplication did not find reactive web application classes (OnWebApplicationCondition)

   WebSocketServletAutoConfiguration.JettyWebSocketConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.eclipse.jetty.websocket.jsr356.server.deploy.WebSocketServerContainerInitializer' (OnClassCondition)

   WebSocketServletAutoConfiguration.UndertowWebSocketConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.undertow.websockets.jsr.Bootstrap' (OnClassCondition)

   XADataSourceAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.transaction.TransactionManager' (OnClassCondition)


Exclusions:
-----------

    None


Unconditional classes:
----------------------

    org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration

    org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointAutoConfiguration

    org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration

    org.springframework.boot.actuate.autoconfigure.info.InfoContributorAutoConfiguration

    org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration

    org.springframework.cloud.client.discovery.simple.SimpleDiscoveryClientAutoConfiguration

    org.springframework.cloud.client.CommonsClientAutoConfiguration

    org.springframework.cloud.commons.httpclient.HttpClientConfiguration

    org.springframework.boot.actuate.autoconfigure.endpoint.EndpointAutoConfiguration

    org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration

    org.springframework.boot.actuate.autoconfigure.health.HealthEndpointAutoConfiguration

    org.springframework.cloud.client.discovery.composite.CompositeDiscoveryClientAutoConfiguration

    org.springframework.boot.actuate.autoconfigure.web.mappings.MappingsEndpointAutoConfiguration

    org.springframework.cloud.client.serviceregistry.ServiceRegistryAutoConfiguration

    org.springframework.cloud.autoconfigure.LifecycleMvcEndpointAutoConfiguration

    org.springframework.boot.actuate.autoconfigure.audit.AuditAutoConfiguration

    org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration



[15:50:00.785] INFO  [main]o.a.c.h.Http11NioProtocol - Starting ProtocolHandler ["http-nio-20000"]
[15:50:00.836] INFO  [main]o.s.b.w.e.t.TomcatWebServer - Tomcat started on port(s): 20000 (http) with context path ''
[15:50:00.836] INFO  [main]o.s.c.n.e.s.EurekaAutoServiceRegistration - Updating port to 20000
[15:50:00.838] INFO  [main]c.m.EurekaServerApplication - Started EurekaServerApplication in 7.258 seconds (JVM running for 7.943)
[15:50:11.984] INFO  [http-nio-20000-exec-1]o.a.c.c.C.[.[.[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
[15:50:11.985] INFO  [http-nio-20000-exec-1]o.s.w.s.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
[15:50:11.985] DEBUG [http-nio-20000-exec-1]o.s.w.s.DispatcherServlet - Detected StandardServletMultipartResolver
[15:50:11.996] DEBUG [http-nio-20000-exec-1]o.s.w.s.DispatcherServlet - enableLoggingRequestDetails='false': request parameters and headers will be masked to prevent unsafe logging of potentially sensitive data
[15:50:11.996] INFO  [http-nio-20000-exec-1]o.s.w.s.DispatcherServlet - Completed initialization in 11 ms
[15:50:12.049] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:50:12.062] DEBUG [http-nio-20000-exec-1]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode 
[15:50:12.288] DEBUG [http-nio-20000-exec-2]c.n.d.u.DeserializerStringCache - clearing global-level cache with size 1
[15:50:12.288] DEBUG [http-nio-20000-exec-2]c.n.d.u.DeserializerStringCache - clearing app-level serialization cache with size 8
[15:50:12.288] DEBUG [http-nio-20000-exec-2]c.n.e.r.ApplicationResource - Registering instance 192.168.31.38:ribbon-consumer:31000 (replication=null)
[15:50:12.289] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - register RIBBON-CONSUMER, vip ribbon-consumer, leaseDuration 90, isReplication false
[15:50:12.290] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - No previous lease information found; it is new registration
[15:50:12.290] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:50:12.291] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.AlwaysMatchInstanceStatusRule - Returning the default instance status UP for instance 192.168.31.38:ribbon-consumer:31000
[15:50:12.292] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 JSON, full
[15:50:12.292] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 JSON, compact
[15:50:12.292] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 JSON, full
[15:50:12.292] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 JSON, compact
[15:50:12.293] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, full
[15:50:12.293] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, compact
[15:50:12.293] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V1 JSON, full
[15:50:12.293] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V1 JSON, full
[15:50:12.293] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 JSON, full
[15:50:12.293] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 JSON, compact
[15:50:12.293] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 JSON, full
[15:50:12.331] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 JSON, compact
[15:50:12.331] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, full
[15:50:12.331] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, compact
[15:50:12.331] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V2 JSON, full
[15:50:12.331] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V2 JSON, full
[15:50:12.331] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 XML, full
[15:50:12.331] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 XML, compact
[15:50:12.331] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 XML, full
[15:50:12.332] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 XML, compact
[15:50:12.332] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, full
[15:50:12.332] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, compact
[15:50:12.332] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V1 XML, full
[15:50:12.332] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V1 XML, full
[15:50:12.332] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 XML, full
[15:50:12.332] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 XML, compact
[15:50:12.332] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 XML, full
[15:50:12.332] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 XML, compact
[15:50:12.332] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, full
[15:50:12.332] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, compact
[15:50:12.332] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V2 XML, full
[15:50:12.332] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V2 XML, full
[15:50:12.332] INFO  [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Registered instance RIBBON-CONSUMER/192.168.31.38:ribbon-consumer:31000 with status UP (replication=false)
[15:50:15.058] DEBUG [http-nio-20000-exec-3]c.n.d.u.DeserializerStringCache - clearing global-level cache with size 1
[15:50:15.058] DEBUG [http-nio-20000-exec-3]c.n.d.u.DeserializerStringCache - clearing app-level serialization cache with size 8
[15:50:15.058] DEBUG [http-nio-20000-exec-3]c.n.e.r.ApplicationResource - Registering instance 192.168.31.38:ribbon-consumer:31000 (replication=null)
[15:50:15.058] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - register RIBBON-CONSUMER, vip ribbon-consumer, leaseDuration 90, isReplication false
[15:50:15.058] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Existing lease found (existing=1606636212118, provided=1606636215052
[15:50:15.058] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:50:15.058] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.DownOrStartingRule - Trusting the instance status DOWN from replica or instance for instance 192.168.31.38:ribbon-consumer:31000
[15:50:15.058] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 JSON, full
[15:50:15.059] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 JSON, compact
[15:50:15.059] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 JSON, full
[15:50:15.059] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 JSON, compact
[15:50:15.059] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, full
[15:50:15.059] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, compact
[15:50:15.059] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V1 JSON, full
[15:50:15.059] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V1 JSON, full
[15:50:15.059] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 JSON, full
[15:50:15.059] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 JSON, compact
[15:50:15.059] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 JSON, full
[15:50:15.059] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 JSON, compact
[15:50:15.059] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, full
[15:50:15.059] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, compact
[15:50:15.059] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V2 JSON, full
[15:50:15.059] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V2 JSON, full
[15:50:15.059] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 XML, full
[15:50:15.059] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 XML, compact
[15:50:15.059] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 XML, full
[15:50:15.059] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 XML, compact
[15:50:15.059] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, full
[15:50:15.059] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, compact
[15:50:15.059] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V1 XML, full
[15:50:15.060] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V1 XML, full
[15:50:15.060] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 XML, full
[15:50:15.060] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 XML, compact
[15:50:15.060] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 XML, full
[15:50:15.060] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 XML, compact
[15:50:15.060] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, full
[15:50:15.060] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, compact
[15:50:15.060] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V2 XML, full
[15:50:15.060] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V2 XML, full
[15:50:15.060] INFO  [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Registered instance RIBBON-CONSUMER/192.168.31.38:ribbon-consumer:31000 with status DOWN (replication=false)
[15:50:15.071] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - cancel RIBBON-CONSUMER, serverId 192.168.31.38:ribbon-consumer:31000, isReplication false
[15:50:15.072] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - cancel RIBBON-CONSUMER, serverId 192.168.31.38:ribbon-consumer:31000, isReplication false
[15:50:15.072] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 JSON, full
[15:50:15.072] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 JSON, compact
[15:50:15.072] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 JSON, full
[15:50:15.072] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 JSON, compact
[15:50:15.072] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, full
[15:50:15.072] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, compact
[15:50:15.072] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V1 JSON, full
[15:50:15.072] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V1 JSON, full
[15:50:15.072] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 JSON, full
[15:50:15.072] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 JSON, compact
[15:50:15.072] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 JSON, full
[15:50:15.072] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 JSON, compact
[15:50:15.072] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, full
[15:50:15.072] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, compact
[15:50:15.072] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V2 JSON, full
[15:50:15.073] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V2 JSON, full
[15:50:15.073] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 XML, full
[15:50:15.073] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 XML, compact
[15:50:15.073] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 XML, full
[15:50:15.073] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 XML, compact
[15:50:15.073] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, full
[15:50:15.073] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, compact
[15:50:15.073] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V1 XML, full
[15:50:15.073] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V1 XML, full
[15:50:15.073] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 XML, full
[15:50:15.073] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 XML, compact
[15:50:15.073] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 XML, full
[15:50:15.073] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 XML, compact
[15:50:15.073] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, full
[15:50:15.073] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, compact
[15:50:15.073] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V2 XML, full
[15:50:15.073] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V2 XML, full
[15:50:15.073] INFO  [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Cancelled instance RIBBON-CONSUMER/192.168.31.38:ribbon-consumer:31000 (replication=false)
[15:50:15.073] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Cancel): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000
[15:50:22.142] DEBUG [http-nio-20000-exec-7]c.n.d.u.DeserializerStringCache - clearing global-level cache with size 1
[15:50:22.143] DEBUG [http-nio-20000-exec-7]c.n.d.u.DeserializerStringCache - clearing app-level serialization cache with size 8
[15:50:22.143] DEBUG [http-nio-20000-exec-7]c.n.e.r.ApplicationResource - Registering instance 192.168.31.38:ribbon-consumer:31001 (replication=null)
[15:50:22.143] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - register RIBBON-CONSUMER, vip ribbon-consumer, leaseDuration 90, isReplication false
[15:50:22.143] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - No previous lease information found; it is new registration
[15:50:22.143] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:50:22.143] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.AlwaysMatchInstanceStatusRule - Returning the default instance status UP for instance 192.168.31.38:ribbon-consumer:31001
[15:50:22.143] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 JSON, full
[15:50:22.143] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 JSON, compact
[15:50:22.143] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 JSON, full
[15:50:22.143] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 JSON, compact
[15:50:22.143] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, full
[15:50:22.143] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, compact
[15:50:22.143] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V1 JSON, full
[15:50:22.143] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V1 JSON, full
[15:50:22.143] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 JSON, full
[15:50:22.143] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 JSON, compact
[15:50:22.143] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 JSON, full
[15:50:22.143] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 JSON, compact
[15:50:22.143] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, full
[15:50:22.143] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, compact
[15:50:22.143] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V2 JSON, full
[15:50:22.143] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V2 JSON, full
[15:50:22.143] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 XML, full
[15:50:22.143] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 XML, compact
[15:50:22.143] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 XML, full
[15:50:22.143] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 XML, compact
[15:50:22.143] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, full
[15:50:22.143] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, compact
[15:50:22.143] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V1 XML, full
[15:50:22.143] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V1 XML, full
[15:50:22.143] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 XML, full
[15:50:22.143] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 XML, compact
[15:50:22.143] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 XML, full
[15:50:22.143] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 XML, compact
[15:50:22.143] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, full
[15:50:22.143] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, compact
[15:50:22.143] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V2 XML, full
[15:50:22.143] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V2 XML, full
[15:50:22.144] INFO  [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Registered instance RIBBON-CONSUMER/192.168.31.38:ribbon-consumer:31001 with status UP (replication=false)
[15:50:30.004] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[15:50:30.004] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[15:50:30.005] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:50:30.034] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_1_
[15:50:39.340] DEBUG [http-nio-20000-exec-9]c.n.d.u.DeserializerStringCache - clearing global-level cache with size 1
[15:50:39.340] DEBUG [http-nio-20000-exec-9]c.n.d.u.DeserializerStringCache - clearing app-level serialization cache with size 8
[15:50:39.340] DEBUG [http-nio-20000-exec-9]c.n.e.r.ApplicationResource - Registering instance 192.168.31.38:ribbon-consumer:31000 (replication=null)
[15:50:39.340] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - register RIBBON-CONSUMER, vip ribbon-consumer, leaseDuration 90, isReplication false
[15:50:39.340] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - No previous lease information found; it is new registration
[15:50:39.340] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:50:39.340] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.AlwaysMatchInstanceStatusRule - Returning the default instance status UP for instance 192.168.31.38:ribbon-consumer:31000
[15:50:39.340] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 JSON, full
[15:50:39.340] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 JSON, compact
[15:50:39.340] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 JSON, full
[15:50:39.340] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 JSON, compact
[15:50:39.340] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, full
[15:50:39.340] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, compact
[15:50:39.340] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V1 JSON, full
[15:50:39.340] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V1 JSON, full
[15:50:39.340] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 JSON, full
[15:50:39.340] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 JSON, compact
[15:50:39.340] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 JSON, full
[15:50:39.341] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 JSON, compact
[15:50:39.341] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, full
[15:50:39.341] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, compact
[15:50:39.341] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V2 JSON, full
[15:50:39.341] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V2 JSON, full
[15:50:39.341] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 XML, full
[15:50:39.341] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 XML, compact
[15:50:39.341] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 XML, full
[15:50:39.341] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 XML, compact
[15:50:39.341] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, full
[15:50:39.341] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, compact
[15:50:39.341] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V1 XML, full
[15:50:39.341] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V1 XML, full
[15:50:39.341] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 XML, full
[15:50:39.341] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 XML, compact
[15:50:39.341] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 XML, full
[15:50:39.341] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 XML, compact
[15:50:39.341] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, full
[15:50:39.341] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, compact
[15:50:39.341] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V2 XML, full
[15:50:39.341] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V2 XML, full
[15:50:39.341] INFO  [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Registered instance RIBBON-CONSUMER/192.168.31.38:ribbon-consumer:31000 with status UP (replication=false)
[15:50:52.089] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[15:50:52.089] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:50:52.089] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:50:52.089] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[15:50:52.090] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[15:50:53.843] DEBUG [http-nio-20000-exec-2]o.s.w.s.DispatcherServlet - GET "/", parameters={}
[15:50:53.854] DEBUG [http-nio-20000-exec-2]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public java.lang.String org.springframework.cloud.netflix.eureka.server.EurekaController.status(javax.servlet.http.HttpServletRequest,java.util.Map<java.lang.String, java.lang.Object>)
[15:50:53.874] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:50:53.897] DEBUG [http-nio-20000-exec-2]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/status_zh.ftl]
[15:50:53.900] DEBUG [http-nio-20000-exec-2]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/status.ftl]
[15:50:54.035] DEBUG [http-nio-20000-exec-2]o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, application/signed-exchange;v=b3;q=0.9, */*;q=0.8]
[15:50:54.035] DEBUG [http-nio-20000-exec-2]o.s.w.s.v.f.FreeMarkerView - View name 'eureka/status', model {time=Sun Nov 29 15:50:53 CST 2020, basePath=/, dashboardPath=, currentTime=2020-11-29T15:50:53 +0800, upTime=00:01, environment=test, datacenter=default, registry=org.springframework.cloud.netflix.eureka.server.InstanceRegistry@4c5c2d37, isBelowRenewThresold=false, replicas=[], apps=[{name=RIBBON-CONSUMER, amiCounts=[n/a=2], zoneCounts=[=2], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:ribbon-consumer:31000, url=http://192.168.31.38:31000/actuator/info, isHref=true}, {id=192.168.31.38:ribbon-consumer:31001, url=http://192.168.31.38:31001/actuator/info, isHref=true}], isNotUp=false}]}], statusInfo=com.netflix.eureka.util.StatusInfo@78412a65, instanceInfo={ipAddr=192.168.31.38, status=UP}, applicationStats={registered-replicas=, available-replicas=, unavailable-replicas=}, org.springframework.validation.BindingResult.registry=org.springframework.validation.BeanPropertyBindingResult: 0 errors, org.springframework.validation.BindingResult.statusInfo=org.springframework.validation.BeanPropertyBindingResult: 0 errors}
[15:50:54.039] DEBUG [http-nio-20000-exec-2]o.s.w.s.v.f.FreeMarkerView - Rendering [eureka/status.ftl]
[15:50:54.051] DEBUG [http-nio-20000-exec-2]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [spring_zh.ftl]
[15:50:54.052] DEBUG [http-nio-20000-exec-2]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [spring.ftl]
[15:50:54.093] DEBUG [http-nio-20000-exec-2]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/header_zh.ftl]
[15:50:54.093] DEBUG [http-nio-20000-exec-2]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/header.ftl]
[15:50:54.095] DEBUG [http-nio-20000-exec-2]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/navbar_zh.ftl]
[15:50:54.095] DEBUG [http-nio-20000-exec-2]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/navbar.ftl]
[15:50:54.119] DEBUG [http-nio-20000-exec-2]o.s.w.s.DispatcherServlet - Completed 200 OK
[15:50:54.209] DEBUG [http-nio-20000-exec-3]o.s.w.s.DispatcherServlet - GET "/eureka/css/wro.css", parameters={}
[15:50:54.209] DEBUG [http-nio-20000-exec-4]o.s.w.s.DispatcherServlet - GET "/eureka/js/wro.js", parameters={}
[15:50:54.212] DEBUG [http-nio-20000-exec-4]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler ["classpath:/META-INF/resources/", "classpath:/resources/", "classpath:/static/", "classpath:/public/", "/"]
[15:50:54.212] DEBUG [http-nio-20000-exec-3]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler ["classpath:/META-INF/resources/", "classpath:/resources/", "classpath:/static/", "classpath:/public/", "/"]
[15:50:54.230] DEBUG [http-nio-20000-exec-3]o.s.w.s.DispatcherServlet - Completed 200 OK
[15:50:54.231] DEBUG [http-nio-20000-exec-4]o.s.w.s.DispatcherServlet - Completed 200 OK
[15:50:54.243] DEBUG [http-nio-20000-exec-5]o.s.w.s.DispatcherServlet - GET "/eureka/images/spring-logo-eureka.png", parameters={}
[15:50:54.244] DEBUG [http-nio-20000-exec-5]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler ["classpath:/META-INF/resources/", "classpath:/resources/", "classpath:/static/", "classpath:/public/", "/"]
[15:50:54.246] DEBUG [http-nio-20000-exec-5]o.s.w.s.DispatcherServlet - Completed 200 OK
[15:50:54.274] DEBUG [http-nio-20000-exec-6]o.s.w.s.DispatcherServlet - GET "/eureka/fonts/varela_round-webfont.woff", parameters={}
[15:50:54.274] DEBUG [http-nio-20000-exec-7]o.s.w.s.DispatcherServlet - GET "/eureka/fonts/montserrat-webfont.woff", parameters={}
[15:50:54.275] DEBUG [http-nio-20000-exec-6]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler ["classpath:/META-INF/resources/", "classpath:/resources/", "classpath:/static/", "classpath:/public/", "/"]
[15:50:54.275] DEBUG [http-nio-20000-exec-7]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler ["classpath:/META-INF/resources/", "classpath:/resources/", "classpath:/static/", "classpath:/public/", "/"]
[15:50:54.289] DEBUG [http-nio-20000-exec-7]o.s.w.s.DispatcherServlet - Completed 200 OK
[15:50:54.289] DEBUG [http-nio-20000-exec-6]o.s.w.s.DispatcherServlet - Completed 200 OK
[15:50:54.514] DEBUG [http-nio-20000-exec-8]o.s.w.s.DispatcherServlet - GET "/eureka/js/wro.js.map", parameters={}
[15:50:54.515] DEBUG [http-nio-20000-exec-8]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler ["classpath:/META-INF/resources/", "classpath:/resources/", "classpath:/static/", "classpath:/public/", "/"]
[15:50:54.562] DEBUG [http-nio-20000-exec-8]o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
[15:50:54.563] DEBUG [http-nio-20000-exec-8]o.s.w.s.DispatcherServlet - Completed 404 NOT_FOUND
[15:50:54.567] DEBUG [http-nio-20000-exec-8]o.s.w.s.DispatcherServlet - "ERROR" dispatch for GET "/error", parameters={}
[15:50:54.568] DEBUG [http-nio-20000-exec-8]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
[15:50:54.571] DEBUG [http-nio-20000-exec-8]o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/json, application/*+json, application/xml, text/xml, application/*+xml, application/xml, text/xml, application/*+xml]
[15:50:54.572] DEBUG [http-nio-20000-exec-8]o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{timestamp=Sun Nov 29 15:50:54 CST 2020, status=404, error=Not Found, message=No message available,  (truncated)...]
[15:50:54.578] DEBUG [http-nio-20000-exec-8]o.s.w.s.DispatcherServlet - Exiting from "ERROR" dispatch, status 404
[15:51:00.005] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[15:51:00.005] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[15:51:00.006] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:51:00.006] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_2_
[15:51:00.766] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[15:51:00.766] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[15:51:00.766] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[15:51:09.296] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 5
[15:51:09.296] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - The instance id 192.168.31.38:ribbon-consumer:31000 is found with status UP and actiontype ADDED
[15:51:09.297] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - The instance id 192.168.31.38:ribbon-consumer:31000 is found with status DOWN and actiontype DELETED
[15:51:09.297] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - The instance id 192.168.31.38:ribbon-consumer:31000 is found with status DOWN and actiontype DELETED
[15:51:09.297] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - The instance id 192.168.31.38:ribbon-consumer:31001 is found with status UP and actiontype ADDED
[15:51:09.297] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - The instance id 192.168.31.38:ribbon-consumer:31000 is found with status UP and actiontype ADDED
[15:51:09.298] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[15:51:09.299] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:51:09.299] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:51:09.299] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[15:51:09.299] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_2_
[15:51:09.299] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[15:51:22.074] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[15:51:22.074] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:51:22.074] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:51:22.075] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[15:51:22.075] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[15:51:30.007] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[15:51:30.007] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[15:51:30.007] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[15:51:39.298] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[15:51:39.298] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:51:39.299] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:51:39.299] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[15:51:39.299] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[15:51:52.077] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[15:51:52.077] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:51:52.077] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:51:52.077] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[15:51:52.077] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[15:51:55.357] DEBUG [http-nio-20000-exec-1]c.n.d.u.DeserializerStringCache - clearing global-level cache with size 1
[15:51:55.357] DEBUG [http-nio-20000-exec-1]c.n.d.u.DeserializerStringCache - clearing app-level serialization cache with size 8
[15:51:55.358] DEBUG [http-nio-20000-exec-1]c.n.e.r.ApplicationResource - Registering instance 192.168.31.38:eureka-client:30002 (replication=null)
[15:51:55.358] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - register EUREKA-CLIENT, vip eureka-client, leaseDuration 90, isReplication false
[15:51:55.358] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - No previous lease information found; it is new registration
[15:51:55.358] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:51:55.358] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.AlwaysMatchInstanceStatusRule - Returning the default instance status UP for instance 192.168.31.38:eureka-client:30002
[15:51:55.358] DEBUG [http-nio-20000-exec-1]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application EUREKA-CLIENT V1 JSON, full
[15:51:55.358] DEBUG [http-nio-20000-exec-1]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application EUREKA-CLIENT V1 JSON, compact
[15:51:55.358] DEBUG [http-nio-20000-exec-1]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 JSON, full
[15:51:55.358] DEBUG [http-nio-20000-exec-1]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 JSON, compact
[15:51:55.358] DEBUG [http-nio-20000-exec-1]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, full
[15:51:55.358] DEBUG [http-nio-20000-exec-1]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, compact
[15:51:55.358] DEBUG [http-nio-20000-exec-1]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP eureka-client V1 JSON, full
[15:51:55.358] DEBUG [http-nio-20000-exec-1]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP eureka-client V1 JSON, full
[15:51:55.358] DEBUG [http-nio-20000-exec-1]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application EUREKA-CLIENT V2 JSON, full
[15:51:55.358] DEBUG [http-nio-20000-exec-1]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application EUREKA-CLIENT V2 JSON, compact
[15:51:55.358] DEBUG [http-nio-20000-exec-1]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 JSON, full
[15:51:55.358] DEBUG [http-nio-20000-exec-1]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 JSON, compact
[15:51:55.358] DEBUG [http-nio-20000-exec-1]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, full
[15:51:55.358] DEBUG [http-nio-20000-exec-1]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, compact
[15:51:55.358] DEBUG [http-nio-20000-exec-1]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP eureka-client V2 JSON, full
[15:51:55.358] DEBUG [http-nio-20000-exec-1]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP eureka-client V2 JSON, full
[15:51:55.358] DEBUG [http-nio-20000-exec-1]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application EUREKA-CLIENT V1 XML, full
[15:51:55.358] DEBUG [http-nio-20000-exec-1]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application EUREKA-CLIENT V1 XML, compact
[15:51:55.358] DEBUG [http-nio-20000-exec-1]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 XML, full
[15:51:55.358] DEBUG [http-nio-20000-exec-1]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 XML, compact
[15:51:55.358] DEBUG [http-nio-20000-exec-1]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, full
[15:51:55.358] DEBUG [http-nio-20000-exec-1]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, compact
[15:51:55.358] DEBUG [http-nio-20000-exec-1]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP eureka-client V1 XML, full
[15:51:55.358] DEBUG [http-nio-20000-exec-1]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP eureka-client V1 XML, full
[15:51:55.358] DEBUG [http-nio-20000-exec-1]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application EUREKA-CLIENT V2 XML, full
[15:51:55.358] DEBUG [http-nio-20000-exec-1]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application EUREKA-CLIENT V2 XML, compact
[15:51:55.359] DEBUG [http-nio-20000-exec-1]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 XML, full
[15:51:55.359] DEBUG [http-nio-20000-exec-1]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 XML, compact
[15:51:55.359] DEBUG [http-nio-20000-exec-1]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, full
[15:51:55.359] DEBUG [http-nio-20000-exec-1]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, compact
[15:51:55.359] DEBUG [http-nio-20000-exec-1]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP eureka-client V2 XML, full
[15:51:55.359] DEBUG [http-nio-20000-exec-1]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP eureka-client V2 XML, full
[15:51:55.359] INFO  [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Registered instance EUREKA-CLIENT/192.168.31.38:eureka-client:30002 with status UP (replication=false)
[15:52:00.007] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[15:52:00.007] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[15:52:00.007] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 6
[15:52:00.007] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The instance id 192.168.31.38:ribbon-consumer:31000 is found with status UP and actiontype ADDED
[15:52:00.007] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The instance id 192.168.31.38:ribbon-consumer:31000 is found with status DOWN and actiontype DELETED
[15:52:00.007] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The instance id 192.168.31.38:ribbon-consumer:31000 is found with status DOWN and actiontype DELETED
[15:52:00.007] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The instance id 192.168.31.38:ribbon-consumer:31001 is found with status UP and actiontype ADDED
[15:52:00.007] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The instance id 192.168.31.38:ribbon-consumer:31000 is found with status UP and actiontype ADDED
[15:52:00.007] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The instance id 192.168.31.38:eureka-client:30002 is found with status UP and actiontype ADDED
[15:52:00.008] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[15:52:00.008] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[15:52:00.008] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:52:00.009] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[15:52:00.769] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 18ms
[15:52:00.769] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[15:52:00.769] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[15:52:08.999] DEBUG [http-nio-20000-exec-2]o.s.w.s.DispatcherServlet - GET "/", parameters={}
[15:52:09.002] DEBUG [http-nio-20000-exec-2]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public java.lang.String org.springframework.cloud.netflix.eureka.server.EurekaController.status(javax.servlet.http.HttpServletRequest,java.util.Map<java.lang.String, java.lang.Object>)
[15:52:09.003] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:52:09.005] DEBUG [http-nio-20000-exec-2]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/status_zh.ftl]
[15:52:09.006] DEBUG [http-nio-20000-exec-2]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/status.ftl]
[15:52:09.006] DEBUG [http-nio-20000-exec-2]o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, application/signed-exchange;v=b3;q=0.9, */*;q=0.8]
[15:52:09.006] DEBUG [http-nio-20000-exec-2]o.s.w.s.v.f.FreeMarkerView - View name 'eureka/status', model {time=Sun Nov 29 15:52:09 CST 2020, basePath=/, dashboardPath=, currentTime=2020-11-29T15:52:09 +0800, upTime=00:02, environment=test, datacenter=default, registry=org.springframework.cloud.netflix.eureka.server.InstanceRegistry@4c5c2d37, isBelowRenewThresold=false, replicas=[], apps=[{name=EUREKA-CLIENT, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:eureka-client:30002, url=http://192.168.31.38:30002/actuator/info, isHref=true}], isNotUp=false}]}, {name=RIBBON-CONSUMER, amiCounts=[n/a=2], zoneCounts=[=2], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:ribbon-consumer:31000, url=http://192.168.31.38:31000/actuator/info, isHref=true}, {id=192.168.31.38:ribbon-consumer:31001, url=http://192.168.31.38:31001/actuator/info, isHref=true}], isNotUp=false}]}], statusInfo=com.netflix.eureka.util.StatusInfo@7931938f, instanceInfo={ipAddr=192.168.31.38, status=UP}, applicationStats={registered-replicas=, available-replicas=, unavailable-replicas=}, org.springframework.validation.BindingResult.registry=org.springframework.validation.BeanPropertyBindingResult: 0 errors, org.springframework.validation.BindingResult.statusInfo=org.springframework.validation.BeanPropertyBindingResult: 0 errors}
[15:52:09.006] DEBUG [http-nio-20000-exec-2]o.s.w.s.v.f.FreeMarkerView - Rendering [eureka/status.ftl]
[15:52:09.006] DEBUG [http-nio-20000-exec-2]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [spring_zh.ftl]
[15:52:09.008] DEBUG [http-nio-20000-exec-2]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/header_zh.ftl]
[15:52:09.009] DEBUG [http-nio-20000-exec-2]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/header.ftl]
[15:52:09.010] DEBUG [http-nio-20000-exec-2]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/navbar_zh.ftl]
[15:52:09.010] DEBUG [http-nio-20000-exec-2]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/navbar.ftl]
[15:52:09.012] DEBUG [http-nio-20000-exec-2]o.s.w.s.DispatcherServlet - Completed 200 OK
[15:52:09.309] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[15:52:09.309] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:52:09.309] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:52:09.309] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[15:52:09.309] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[15:52:09.380] DEBUG [http-nio-20000-exec-5]o.s.w.s.DispatcherServlet - GET "/eureka/js/wro.js.map", parameters={}
[15:52:09.381] DEBUG [http-nio-20000-exec-5]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler ["classpath:/META-INF/resources/", "classpath:/resources/", "classpath:/static/", "classpath:/public/", "/"]
[15:52:09.429] DEBUG [http-nio-20000-exec-5]o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
[15:52:09.429] DEBUG [http-nio-20000-exec-5]o.s.w.s.DispatcherServlet - Completed 404 NOT_FOUND
[15:52:09.430] DEBUG [http-nio-20000-exec-5]o.s.w.s.DispatcherServlet - "ERROR" dispatch for GET "/error", parameters={}
[15:52:09.431] DEBUG [http-nio-20000-exec-5]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
[15:52:09.431] DEBUG [http-nio-20000-exec-5]o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/json, application/*+json, application/xml, text/xml, application/*+xml, application/xml, text/xml, application/*+xml]
[15:52:09.432] DEBUG [http-nio-20000-exec-5]o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{timestamp=Sun Nov 29 15:52:09 CST 2020, status=404, error=Not Found, message=No message available,  (truncated)...]
[15:52:09.432] DEBUG [http-nio-20000-exec-5]o.s.w.s.DispatcherServlet - Exiting from "ERROR" dispatch, status 404
[15:52:22.086] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[15:52:22.086] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:52:22.086] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:52:22.086] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[15:52:22.087] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[15:52:25.334] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[15:52:25.334] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:52:25.334] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:52:25.334] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[15:52:25.334] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[15:52:30.010] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[15:52:30.011] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[15:52:30.011] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[15:52:39.316] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[15:52:39.316] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:52:39.317] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:52:39.317] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[15:52:39.317] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[15:52:52.096] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[15:52:52.096] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:52:52.096] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:52:52.096] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[15:52:52.096] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[15:52:55.345] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[15:52:55.345] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:52:55.345] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:52:55.345] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[15:52:55.345] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[15:53:00.014] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[15:53:00.015] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[15:53:00.015] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[15:53:00.770] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[15:53:00.770] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[15:53:00.770] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[15:53:02.934] DEBUG [http-nio-20000-exec-7]c.n.d.u.DeserializerStringCache - clearing global-level cache with size 1
[15:53:02.934] DEBUG [http-nio-20000-exec-7]c.n.d.u.DeserializerStringCache - clearing app-level serialization cache with size 8
[15:53:02.934] DEBUG [http-nio-20000-exec-7]c.n.e.r.ApplicationResource - Registering instance 192.168.31.38:ribbon-consumer:31000 (replication=null)
[15:53:02.934] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - register RIBBON-CONSUMER, vip ribbon-consumer, leaseDuration 90, isReplication false
[15:53:02.934] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Existing lease found (existing=1606636239311, provided=1606636382928
[15:53:02.934] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:53:02.934] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.DownOrStartingRule - Trusting the instance status DOWN from replica or instance for instance 192.168.31.38:ribbon-consumer:31000
[15:53:02.934] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 JSON, full
[15:53:02.934] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 JSON, compact
[15:53:02.934] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 JSON, full
[15:53:02.934] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 JSON, compact
[15:53:02.934] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, full
[15:53:02.934] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, compact
[15:53:02.934] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V1 JSON, full
[15:53:02.934] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V1 JSON, full
[15:53:02.934] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 JSON, full
[15:53:02.934] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 JSON, compact
[15:53:02.934] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 JSON, full
[15:53:02.934] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 JSON, compact
[15:53:02.934] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, full
[15:53:02.934] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, compact
[15:53:02.934] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V2 JSON, full
[15:53:02.934] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V2 JSON, full
[15:53:02.934] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 XML, full
[15:53:02.934] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 XML, compact
[15:53:02.934] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 XML, full
[15:53:02.934] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 XML, compact
[15:53:02.935] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, full
[15:53:02.935] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, compact
[15:53:02.935] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V1 XML, full
[15:53:02.935] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V1 XML, full
[15:53:02.935] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 XML, full
[15:53:02.935] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 XML, compact
[15:53:02.935] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 XML, full
[15:53:02.935] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 XML, compact
[15:53:02.935] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, full
[15:53:02.935] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, compact
[15:53:02.935] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V2 XML, full
[15:53:02.935] DEBUG [http-nio-20000-exec-7]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V2 XML, full
[15:53:02.935] INFO  [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Registered instance RIBBON-CONSUMER/192.168.31.38:ribbon-consumer:31000 with status DOWN (replication=false)
[15:53:05.946] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - cancel RIBBON-CONSUMER, serverId 192.168.31.38:ribbon-consumer:31000, isReplication false
[15:53:05.946] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - cancel RIBBON-CONSUMER, serverId 192.168.31.38:ribbon-consumer:31000, isReplication false
[15:53:05.946] DEBUG [http-nio-20000-exec-6]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 JSON, full
[15:53:05.946] DEBUG [http-nio-20000-exec-6]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 JSON, compact
[15:53:05.946] DEBUG [http-nio-20000-exec-6]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 JSON, full
[15:53:05.947] DEBUG [http-nio-20000-exec-6]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 JSON, compact
[15:53:05.947] DEBUG [http-nio-20000-exec-6]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, full
[15:53:05.947] DEBUG [http-nio-20000-exec-6]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, compact
[15:53:05.947] DEBUG [http-nio-20000-exec-6]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V1 JSON, full
[15:53:05.947] DEBUG [http-nio-20000-exec-6]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V1 JSON, full
[15:53:05.947] DEBUG [http-nio-20000-exec-6]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 JSON, full
[15:53:05.947] DEBUG [http-nio-20000-exec-6]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 JSON, compact
[15:53:05.947] DEBUG [http-nio-20000-exec-6]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 JSON, full
[15:53:05.947] DEBUG [http-nio-20000-exec-6]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 JSON, compact
[15:53:05.947] DEBUG [http-nio-20000-exec-6]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, full
[15:53:05.947] DEBUG [http-nio-20000-exec-6]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, compact
[15:53:05.947] DEBUG [http-nio-20000-exec-6]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V2 JSON, full
[15:53:05.947] DEBUG [http-nio-20000-exec-6]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V2 JSON, full
[15:53:05.947] DEBUG [http-nio-20000-exec-6]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 XML, full
[15:53:05.947] DEBUG [http-nio-20000-exec-6]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 XML, compact
[15:53:05.947] DEBUG [http-nio-20000-exec-6]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 XML, full
[15:53:05.947] DEBUG [http-nio-20000-exec-6]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 XML, compact
[15:53:05.947] DEBUG [http-nio-20000-exec-6]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, full
[15:53:05.947] DEBUG [http-nio-20000-exec-6]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, compact
[15:53:05.947] DEBUG [http-nio-20000-exec-6]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V1 XML, full
[15:53:05.947] DEBUG [http-nio-20000-exec-6]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V1 XML, full
[15:53:05.947] DEBUG [http-nio-20000-exec-6]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 XML, full
[15:53:05.947] DEBUG [http-nio-20000-exec-6]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 XML, compact
[15:53:05.947] DEBUG [http-nio-20000-exec-6]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 XML, full
[15:53:05.947] DEBUG [http-nio-20000-exec-6]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 XML, compact
[15:53:05.947] DEBUG [http-nio-20000-exec-6]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, full
[15:53:05.947] DEBUG [http-nio-20000-exec-6]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, compact
[15:53:05.947] DEBUG [http-nio-20000-exec-6]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V2 XML, full
[15:53:05.947] DEBUG [http-nio-20000-exec-6]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V2 XML, full
[15:53:05.947] INFO  [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Cancelled instance RIBBON-CONSUMER/192.168.31.38:ribbon-consumer:31000 (replication=false)
[15:53:05.948] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Cancel): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000
[15:53:10.225] DEBUG [http-nio-20000-exec-2]c.n.d.u.DeserializerStringCache - clearing global-level cache with size 1
[15:53:10.225] DEBUG [http-nio-20000-exec-2]c.n.d.u.DeserializerStringCache - clearing app-level serialization cache with size 8
[15:53:10.225] DEBUG [http-nio-20000-exec-2]c.n.e.r.ApplicationResource - Registering instance 192.168.31.38:ribbon-consumer:31000 (replication=null)
[15:53:10.225] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - register RIBBON-CONSUMER, vip ribbon-consumer, leaseDuration 90, isReplication false
[15:53:10.225] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - No previous lease information found; it is new registration
[15:53:10.225] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:53:10.225] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.AlwaysMatchInstanceStatusRule - Returning the default instance status UP for instance 192.168.31.38:ribbon-consumer:31000
[15:53:10.225] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 JSON, full
[15:53:10.226] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 JSON, compact
[15:53:10.226] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 JSON, full
[15:53:10.226] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 JSON, compact
[15:53:10.226] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, full
[15:53:10.226] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, compact
[15:53:10.226] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V1 JSON, full
[15:53:10.226] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V1 JSON, full
[15:53:10.226] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 JSON, full
[15:53:10.226] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 JSON, compact
[15:53:10.226] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 JSON, full
[15:53:10.226] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 JSON, compact
[15:53:10.226] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, full
[15:53:10.226] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, compact
[15:53:10.226] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V2 JSON, full
[15:53:10.226] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V2 JSON, full
[15:53:10.226] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 XML, full
[15:53:10.226] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 XML, compact
[15:53:10.226] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 XML, full
[15:53:10.226] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 XML, compact
[15:53:10.226] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, full
[15:53:10.226] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, compact
[15:53:10.226] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V1 XML, full
[15:53:10.226] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V1 XML, full
[15:53:10.226] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 XML, full
[15:53:10.226] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 XML, compact
[15:53:10.226] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 XML, full
[15:53:10.226] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 XML, compact
[15:53:10.226] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, full
[15:53:10.226] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, compact
[15:53:10.226] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V2 XML, full
[15:53:10.226] DEBUG [http-nio-20000-exec-2]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V2 XML, full
[15:53:10.226] INFO  [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Registered instance RIBBON-CONSUMER/192.168.31.38:ribbon-consumer:31000 with status UP (replication=false)
[15:53:22.105] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[15:53:22.105] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:53:22.105] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:53:22.105] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[15:53:22.105] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[15:53:25.356] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[15:53:25.356] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:53:25.357] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:53:25.357] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[15:53:25.357] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[15:53:30.015] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[15:53:30.015] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[15:53:30.015] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 9
[15:53:30.015] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The instance id 192.168.31.38:ribbon-consumer:31000 is found with status UP and actiontype ADDED
[15:53:30.015] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The instance id 192.168.31.38:ribbon-consumer:31000 is found with status DOWN and actiontype DELETED
[15:53:30.016] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The instance id 192.168.31.38:ribbon-consumer:31000 is found with status DOWN and actiontype DELETED
[15:53:30.016] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The instance id 192.168.31.38:ribbon-consumer:31001 is found with status UP and actiontype ADDED
[15:53:30.016] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The instance id 192.168.31.38:ribbon-consumer:31000 is found with status UP and actiontype ADDED
[15:53:30.016] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The instance id 192.168.31.38:eureka-client:30002 is found with status UP and actiontype ADDED
[15:53:30.016] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The instance id 192.168.31.38:ribbon-consumer:31000 is found with status DOWN and actiontype DELETED
[15:53:30.016] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The instance id 192.168.31.38:ribbon-consumer:31000 is found with status DOWN and actiontype DELETED
[15:53:30.016] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The instance id 192.168.31.38:ribbon-consumer:31000 is found with status UP and actiontype ADDED
[15:53:30.017] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[15:53:30.017] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[15:53:30.017] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:53:30.019] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[15:53:40.207] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[15:53:40.207] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:53:40.208] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:53:40.208] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[15:53:40.208] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[15:53:52.114] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[15:53:52.114] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:53:52.114] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:53:52.114] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[15:53:52.114] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[15:53:55.369] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[15:53:55.369] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:53:55.369] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:53:55.369] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[15:53:55.369] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[15:54:00.018] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[15:54:00.018] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[15:54:00.018] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[15:54:00.770] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[15:54:00.770] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[15:54:00.770] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[15:54:10.216] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[15:54:10.217] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:54:10.217] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:54:10.217] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[15:54:10.217] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[15:54:22.119] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[15:54:22.119] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:54:22.119] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:54:22.119] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[15:54:22.119] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[15:54:25.375] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[15:54:25.375] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:54:25.375] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:54:25.375] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[15:54:25.375] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[15:54:30.019] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[15:54:30.019] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[15:54:30.019] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[15:54:40.226] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[15:54:40.226] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:54:40.226] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:54:40.226] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[15:54:40.226] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[15:54:52.128] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[15:54:52.128] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:54:52.128] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:54:52.128] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[15:54:52.128] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[15:54:55.384] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[15:54:55.384] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:54:55.384] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:54:55.384] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[15:54:55.384] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[15:55:00.024] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[15:55:00.024] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[15:55:00.024] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[15:55:00.772] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[15:55:00.772] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[15:55:00.772] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[15:55:10.236] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[15:55:10.236] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:55:10.237] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:55:10.237] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[15:55:10.237] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[15:55:22.135] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[15:55:22.135] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:55:22.135] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:55:22.135] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[15:55:22.135] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[15:55:25.394] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[15:55:25.394] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:55:25.395] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:55:25.395] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[15:55:25.395] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[15:55:30.028] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[15:55:30.028] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[15:55:30.028] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[15:55:40.245] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[15:55:40.245] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:55:40.245] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:55:40.245] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[15:55:40.245] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[15:55:52.144] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[15:55:52.144] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:55:52.144] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:55:52.144] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[15:55:52.144] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[15:55:55.407] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[15:55:55.407] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:55:55.407] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:55:55.408] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[15:55:55.408] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[15:56:00.030] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[15:56:00.030] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[15:56:00.030] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[15:56:00.774] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[15:56:00.774] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[15:56:00.774] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[15:56:10.252] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[15:56:10.252] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:56:10.252] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:56:10.252] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[15:56:10.252] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[15:56:22.149] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[15:56:22.149] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:56:22.149] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:56:22.149] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[15:56:22.149] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[15:56:25.415] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[15:56:25.415] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:56:25.415] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:56:25.415] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[15:56:25.415] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[15:56:30.032] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[15:56:30.032] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[15:56:30.033] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 3
[15:56:30.033] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The instance id 192.168.31.38:ribbon-consumer:31000 is found with status DOWN and actiontype DELETED
[15:56:30.033] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The instance id 192.168.31.38:ribbon-consumer:31000 is found with status DOWN and actiontype DELETED
[15:56:30.033] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The instance id 192.168.31.38:ribbon-consumer:31000 is found with status UP and actiontype ADDED
[15:56:30.034] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[15:56:30.035] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[15:56:30.035] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:56:30.036] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[15:56:40.263] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[15:56:40.263] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:56:40.263] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:56:40.263] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[15:56:40.263] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[15:56:52.157] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[15:56:52.157] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:56:52.157] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:56:52.157] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[15:56:52.157] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[15:56:55.420] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[15:56:55.420] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:56:55.420] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:56:55.420] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[15:56:55.420] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[15:57:00.034] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[15:57:00.034] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[15:57:00.034] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[15:57:00.778] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[15:57:00.778] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[15:57:00.778] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[15:57:10.271] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[15:57:10.271] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:57:10.272] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:57:10.272] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[15:57:10.272] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[15:57:22.163] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[15:57:22.164] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:57:22.164] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:57:22.164] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[15:57:22.164] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[15:57:25.426] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[15:57:25.426] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:57:25.566] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:57:25.566] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[15:57:25.567] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[15:57:30.039] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[15:57:30.039] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[15:57:30.039] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[15:57:40.277] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[15:57:40.278] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:57:40.278] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:57:40.278] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[15:57:40.278] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[15:57:52.168] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[15:57:52.168] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:57:52.168] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:57:52.169] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[15:57:52.169] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[15:57:55.577] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[15:57:55.577] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:57:55.577] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:57:55.577] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[15:57:55.577] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[15:58:00.042] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[15:58:00.043] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[15:58:00.043] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[15:58:00.781] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[15:58:00.782] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[15:58:00.782] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[15:58:10.288] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[15:58:10.288] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:58:10.288] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:58:10.288] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[15:58:10.288] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[15:58:22.174] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[15:58:22.174] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:58:22.174] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:58:22.174] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[15:58:22.174] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[15:58:25.585] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[15:58:25.585] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:58:25.586] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:58:25.586] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[15:58:25.586] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[15:58:30.044] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[15:58:30.044] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[15:58:30.044] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[15:58:40.298] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[15:58:40.298] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:58:40.298] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:58:40.298] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[15:58:40.298] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[15:58:52.181] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[15:58:52.181] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:58:52.181] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:58:52.181] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[15:58:52.181] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[15:58:55.596] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[15:58:55.596] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:58:55.597] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:58:55.597] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[15:58:55.597] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[15:59:00.048] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[15:59:00.048] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[15:59:00.048] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[15:59:00.784] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[15:59:00.784] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[15:59:00.784] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[15:59:10.308] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[15:59:10.308] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:59:10.308] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:59:10.308] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[15:59:10.308] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[15:59:22.191] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[15:59:22.191] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:59:22.191] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:59:22.191] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[15:59:22.191] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[15:59:25.605] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[15:59:25.605] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:59:25.605] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:59:25.605] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[15:59:25.605] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[15:59:30.050] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[15:59:30.050] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[15:59:30.050] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[15:59:30.051] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[15:59:30.051] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[15:59:30.051] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:59:30.051] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[15:59:40.313] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[15:59:40.313] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:59:40.313] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:59:40.313] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[15:59:40.313] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[15:59:52.198] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[15:59:52.198] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:59:52.198] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:59:52.199] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[15:59:52.199] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[15:59:55.611] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[15:59:55.611] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[15:59:55.611] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[15:59:55.611] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[15:59:55.611] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:00:00.051] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:00:00.051] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:00:00.051] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:00:00.578] DEBUG [Eureka-PeerNodesUpdater]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[16:00:00.578] WARN  [Eureka-PeerNodesUpdater]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[16:00:00.784] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[16:00:00.785] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:00:00.785] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:00:10.314] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:00:10.314] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:00:10.314] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:00:10.314] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:00:10.314] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:00:22.202] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:00:22.202] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:00:22.202] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:00:22.202] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:00:22.202] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:00:25.613] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:00:25.613] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:00:25.613] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:00:25.613] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:00:25.613] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:00:30.052] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:00:30.052] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:00:30.052] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:00:40.317] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:00:40.317] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:00:40.318] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:00:40.318] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:00:40.318] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:00:52.206] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:00:52.206] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:00:52.206] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:00:52.206] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:00:52.206] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:00:55.622] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:00:55.622] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:00:55.622] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:00:55.622] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:00:55.622] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:01:00.052] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:01:00.053] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:01:00.053] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:01:00.784] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[16:01:00.784] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:01:00.784] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:01:10.326] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:01:10.326] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:01:10.327] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:01:10.327] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:01:10.327] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:01:22.212] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:01:22.212] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:01:22.212] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:01:22.212] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:01:22.212] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:01:25.632] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:01:25.632] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:01:25.632] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:01:25.632] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:01:25.632] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:01:30.052] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:01:30.052] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:01:30.052] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:01:40.336] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:01:40.336] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:01:40.336] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:01:40.336] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:01:40.336] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:01:52.220] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:01:52.220] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:01:52.220] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:01:52.220] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:01:52.220] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:01:55.643] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:01:55.643] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:01:55.643] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:01:55.643] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:01:55.643] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:02:00.056] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:02:00.056] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:02:00.056] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:02:00.784] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[16:02:00.784] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:02:00.785] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:02:10.344] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:02:10.344] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:02:10.344] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:02:10.344] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:02:10.345] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:02:22.228] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:02:22.228] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:02:22.228] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:02:22.228] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:02:22.228] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:02:25.650] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:02:25.650] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:02:25.650] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:02:25.650] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:02:25.650] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:02:30.061] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:02:30.061] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:02:30.061] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[16:02:30.061] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[16:02:30.061] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:02:30.061] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:02:30.062] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[16:02:40.350] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:02:40.350] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:02:40.351] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:02:40.351] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:02:40.351] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:02:52.234] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:02:52.234] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:02:52.234] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:02:52.234] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:02:52.234] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:02:55.659] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:02:55.659] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:02:55.659] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:02:55.659] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:02:55.659] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:03:00.062] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:03:00.063] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:03:00.063] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:03:00.787] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[16:03:00.787] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:03:00.787] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:03:10.358] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:03:10.358] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:03:10.358] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:03:10.358] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:03:10.359] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:03:22.243] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:03:22.243] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:03:22.244] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:03:22.244] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:03:22.244] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:03:25.666] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:03:25.666] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:03:25.666] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:03:25.666] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:03:25.667] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:03:30.065] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:03:30.065] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:03:30.065] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:03:40.369] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:03:40.369] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:03:40.369] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:03:40.369] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:03:40.369] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:03:52.252] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:03:52.252] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:03:52.252] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:03:52.252] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:03:52.252] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:03:55.675] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:03:55.675] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:03:55.675] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:03:55.675] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:03:55.675] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:04:00.066] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:04:00.066] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:04:00.066] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:04:00.791] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[16:04:00.791] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:04:00.791] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:04:10.378] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:04:10.378] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:04:10.378] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:04:10.378] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:04:10.378] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:04:22.261] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:04:22.261] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:04:22.261] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:04:22.261] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:04:22.261] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:04:25.686] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:04:25.686] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:04:25.687] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:04:25.687] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:04:25.687] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:04:30.069] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:04:30.069] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:04:30.070] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:04:40.387] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:04:40.387] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:04:40.387] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:04:40.387] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:04:40.387] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:04:52.271] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:04:52.271] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:04:52.271] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:04:52.271] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:04:52.271] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:04:55.695] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:04:55.696] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:04:55.696] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:04:55.696] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:04:55.696] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:05:00.069] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:05:00.070] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:05:00.070] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:05:00.634] INFO  [ReplicaAwareInstanceRegistry - RenewalThresholdUpdater]c.n.e.r.PeerAwareInstanceRegistryImpl - Current renewal threshold is : 6
[16:05:00.794] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[16:05:00.794] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:05:00.795] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:05:10.393] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:05:10.393] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:05:10.393] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:05:10.393] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:05:10.394] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:05:22.276] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:05:22.276] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:05:22.277] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:05:22.277] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:05:22.277] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:05:25.702] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:05:25.702] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:05:25.703] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:05:25.703] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:05:25.703] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:05:30.069] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:05:30.069] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:05:30.070] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[16:05:30.070] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[16:05:30.070] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:05:30.070] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:05:30.071] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[16:05:40.403] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:05:40.403] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:05:40.404] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:05:40.404] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:05:40.404] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:05:52.286] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:05:52.286] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:05:52.286] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:05:52.286] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:05:52.286] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:05:55.710] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:05:55.710] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:05:55.711] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:05:55.711] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:05:55.711] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:06:00.072] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:06:00.072] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:06:00.072] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:06:00.794] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[16:06:00.794] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:06:00.794] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:06:10.412] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:06:10.413] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:06:10.413] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:06:10.413] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:06:10.413] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:06:22.321] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:06:22.321] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:06:22.321] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:06:22.321] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:06:22.321] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:06:25.748] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:06:25.748] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:06:25.748] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:06:25.748] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:06:25.748] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:06:30.108] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:06:30.108] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:06:30.108] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:06:40.461] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:06:40.461] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:06:40.461] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:06:40.462] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:06:40.462] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:06:52.347] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:06:52.347] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:06:52.347] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:06:52.347] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:06:52.347] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:06:55.775] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:06:55.775] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:06:55.776] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:06:55.776] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:06:55.776] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:07:00.123] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:07:00.123] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:07:00.123] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:07:00.842] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[16:07:00.843] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:07:00.843] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:07:10.476] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:07:10.476] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:07:10.476] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:07:10.476] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:07:10.476] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:07:22.357] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:07:22.357] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:07:22.358] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:07:22.358] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:07:22.358] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:07:25.789] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:07:25.789] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:07:25.789] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:07:25.789] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:07:25.789] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:07:30.126] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:07:30.126] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:07:30.127] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:07:40.487] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:07:40.487] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:07:40.487] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:07:40.487] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:07:40.487] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:07:52.365] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:07:52.365] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:07:52.365] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:07:52.365] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:07:52.365] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:07:55.799] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:07:55.799] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:07:55.799] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:07:55.799] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:07:55.799] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:08:00.128] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:08:00.129] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:08:00.129] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:08:00.848] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[16:08:00.848] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:08:00.848] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:08:10.497] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:08:10.497] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:08:10.498] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:08:10.498] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:08:10.498] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:08:22.371] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:08:22.371] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:08:22.371] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:08:22.371] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:08:22.371] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:08:25.806] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:08:25.806] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:08:25.807] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:08:25.807] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:08:25.807] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:08:30.133] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:08:30.133] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:08:30.133] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[16:08:30.134] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[16:08:30.134] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:08:30.134] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:08:30.135] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[16:08:40.507] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:08:40.507] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:08:40.507] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:08:40.507] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:08:40.507] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:08:52.377] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:08:52.377] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:08:52.377] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:08:52.377] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:08:52.378] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:08:55.816] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:08:55.817] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:08:55.817] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:08:55.817] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:08:55.817] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:09:00.135] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:09:00.162] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:09:00.162] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:09:00.850] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[16:09:00.851] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:09:00.851] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:09:10.518] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:09:10.518] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:09:10.518] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:09:10.518] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:09:10.518] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:09:22.385] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:09:22.385] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:09:22.385] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:09:22.386] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:09:22.386] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:09:25.828] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:09:25.828] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:09:25.828] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:09:25.828] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:09:25.828] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:09:30.135] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:09:30.135] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:09:30.135] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:09:40.528] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:09:40.528] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:09:40.528] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:09:40.528] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:09:40.528] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:09:52.390] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:09:52.390] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:09:52.390] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:09:52.390] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:09:52.390] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:09:55.839] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:09:55.839] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:09:55.839] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:09:55.839] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:09:55.839] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:10:00.139] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:10:00.139] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:10:00.139] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:10:00.625] DEBUG [Eureka-PeerNodesUpdater]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[16:10:00.626] WARN  [Eureka-PeerNodesUpdater]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[16:10:00.851] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[16:10:00.851] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:10:00.851] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:10:10.539] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:10:10.539] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:10:10.539] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:10:10.539] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:10:10.539] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:10:22.396] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:10:22.396] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:10:22.396] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:10:22.396] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:10:22.396] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:10:25.848] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:10:25.848] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:10:25.848] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:10:25.848] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:10:25.849] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:10:30.140] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:10:30.140] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:10:30.140] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:10:40.549] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:10:40.549] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:10:40.549] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:10:40.549] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:10:40.549] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:10:52.402] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:10:52.402] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:10:52.402] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:10:52.402] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:10:52.402] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:10:55.859] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:10:55.860] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:10:55.860] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:10:55.860] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:10:55.860] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:11:00.145] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:11:00.145] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:11:00.145] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:11:00.854] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[16:11:00.854] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:11:00.854] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:11:10.559] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:11:10.559] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:11:10.559] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:11:10.559] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:11:10.559] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:11:22.411] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:11:22.411] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:11:22.411] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:11:22.411] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:11:22.411] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:11:25.870] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:11:25.871] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:11:25.871] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:11:25.871] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:11:25.871] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:11:30.151] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:11:30.151] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:11:30.151] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[16:11:30.151] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[16:11:30.151] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:11:30.151] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:11:30.152] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[16:11:40.566] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:11:40.566] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:11:40.566] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:11:40.566] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:11:40.566] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:11:52.419] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:11:52.419] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:11:52.419] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:11:52.419] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:11:52.419] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:11:55.880] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:11:55.880] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:11:55.880] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:11:55.880] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:11:55.880] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:12:00.156] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:12:00.156] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:12:00.156] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:12:00.857] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[16:12:00.857] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:12:00.857] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:12:10.579] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:12:10.579] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:12:10.579] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:12:10.579] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:12:10.579] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:12:22.424] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:12:22.424] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:12:22.425] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:12:22.425] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:12:22.425] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:12:25.892] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:12:25.892] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:12:25.892] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:12:25.892] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:12:25.892] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:12:30.159] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:12:30.159] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:12:30.159] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:12:40.589] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:12:40.589] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:12:40.589] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:12:40.589] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:12:40.589] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:12:52.433] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:12:52.433] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:12:52.434] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:12:52.434] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:12:52.434] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:12:55.902] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:12:55.902] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:12:55.903] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:12:55.903] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:12:55.903] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:13:00.161] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:13:00.161] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:13:00.161] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:13:00.862] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[16:13:00.863] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:13:00.863] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:13:10.600] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:13:10.600] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:13:10.600] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:13:10.600] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:13:10.600] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:13:22.441] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:13:22.442] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:13:22.442] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:13:22.442] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:13:22.442] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:13:25.909] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:13:25.909] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:13:25.909] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:13:25.909] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:13:25.909] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:13:30.164] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:13:30.164] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:13:30.164] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:13:40.611] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:13:40.611] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:13:40.611] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:13:40.611] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:13:40.611] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:13:52.451] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:13:52.451] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:13:52.451] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:13:52.451] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:13:52.451] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:13:55.916] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:13:55.917] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:13:55.917] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:13:55.917] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:13:55.917] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:14:00.168] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:14:00.168] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:14:00.168] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:14:00.863] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[16:14:00.863] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:14:00.863] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:14:10.619] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:14:10.619] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:14:10.619] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:14:10.619] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:14:10.620] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:14:22.460] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:14:22.460] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:14:22.460] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:14:22.460] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:14:22.460] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:14:25.922] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:14:25.922] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:14:25.922] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:14:25.923] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:14:25.923] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:14:30.172] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:14:30.172] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:14:30.172] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[16:14:30.172] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[16:14:30.172] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:14:30.172] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:14:30.172] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[16:14:40.627] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:14:40.627] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:14:40.627] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:14:40.627] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:14:40.627] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:14:52.466] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:14:52.467] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:14:52.467] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:14:52.467] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:14:52.467] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:14:55.932] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:14:55.932] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:14:55.933] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:14:55.933] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:14:55.933] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:15:00.175] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:15:00.176] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:15:00.176] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:15:00.864] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[16:15:00.864] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:15:00.864] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:15:10.636] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:15:10.636] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:15:10.636] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:15:10.636] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:15:10.637] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:15:22.476] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:15:22.476] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:15:22.476] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:15:22.476] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:15:22.476] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:15:25.942] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:15:25.942] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:15:25.942] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:15:25.942] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:15:25.942] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:15:30.179] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:15:30.179] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:15:30.179] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:15:40.648] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:15:40.648] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:15:40.648] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:15:40.648] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:15:40.648] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:15:52.486] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:15:52.486] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:15:52.486] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:15:52.486] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:15:52.486] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:15:55.951] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:15:55.951] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:15:55.952] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:15:55.952] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:15:55.952] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:16:00.183] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:16:00.183] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:16:00.183] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:16:00.867] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[16:16:00.867] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:16:00.867] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:16:10.658] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:16:10.658] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:16:10.658] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:16:10.658] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:16:10.658] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:16:22.496] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:16:22.496] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:16:22.496] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:16:22.496] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:16:22.497] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:16:25.962] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:16:25.962] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:16:25.962] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:16:25.962] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:16:25.962] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:16:30.185] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:16:31.057] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:16:31.057] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:16:40.666] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:16:40.667] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:16:40.667] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:16:40.667] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:16:40.667] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:16:52.504] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:16:52.504] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:16:52.504] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:16:52.505] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:16:52.505] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:16:55.970] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:16:55.970] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:16:55.970] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:16:55.970] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:16:55.970] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:17:00.190] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:17:00.190] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:17:00.190] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:17:00.872] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 5ms
[16:17:00.873] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:17:00.873] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:17:10.672] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:17:10.672] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:17:10.672] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:17:10.672] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:17:10.672] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:17:22.510] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:17:22.510] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:17:22.510] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:17:22.510] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:17:22.510] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:17:25.980] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:17:25.980] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:17:25.980] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:17:25.980] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:17:25.980] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:17:30.195] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:17:30.195] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:17:30.195] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[16:17:30.196] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[16:17:30.196] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:17:30.196] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:17:30.196] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[16:17:40.680] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:17:40.680] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:17:40.680] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:17:40.680] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:17:40.680] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:17:52.517] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:17:52.518] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:17:52.518] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:17:52.518] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:17:52.518] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:17:55.984] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:17:55.984] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:17:55.984] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:17:55.984] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:17:55.984] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:18:00.197] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:18:00.198] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:18:00.198] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:18:00.877] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[16:18:00.877] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:18:00.877] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:18:10.690] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:18:10.690] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:18:10.691] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:18:10.691] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:18:10.691] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:18:22.523] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:18:22.523] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:18:22.523] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:18:22.523] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:18:22.523] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:18:25.995] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:18:25.995] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:18:25.995] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:18:25.995] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:18:25.995] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:18:30.200] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:18:30.200] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:18:30.200] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:18:40.699] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:18:40.699] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:18:40.700] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:18:40.700] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:18:40.700] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:18:52.532] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:18:52.532] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:18:52.532] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:18:52.532] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:18:52.532] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:18:56.003] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:18:56.003] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:18:56.003] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:18:56.003] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:18:56.003] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:19:00.204] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:19:00.204] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:19:00.204] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:19:00.881] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[16:19:00.882] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:19:00.882] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:19:10.709] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:19:10.709] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:19:10.709] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:19:10.709] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:19:10.709] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:19:22.540] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:19:22.540] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:19:22.540] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:19:22.540] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:19:22.540] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:19:26.012] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:19:26.012] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:19:26.012] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:19:26.012] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:19:26.012] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:19:30.207] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:19:30.207] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:19:30.207] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:19:40.713] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:19:40.713] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:19:40.713] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:19:40.713] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:19:40.713] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:19:52.548] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:19:52.548] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:19:52.548] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:19:52.548] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:19:52.548] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:19:56.022] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:19:56.022] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:19:56.022] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:19:56.022] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:19:56.022] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:20:00.209] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:20:00.209] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:20:00.209] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:20:00.630] DEBUG [Eureka-PeerNodesUpdater]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[16:20:00.630] WARN  [Eureka-PeerNodesUpdater]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[16:20:00.692] INFO  [ReplicaAwareInstanceRegistry - RenewalThresholdUpdater]c.n.e.r.PeerAwareInstanceRegistryImpl - Current renewal threshold is : 6
[16:20:00.885] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[16:20:00.885] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:20:00.885] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:20:10.722] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:20:10.722] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:20:10.722] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:20:10.722] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:20:10.722] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:20:22.557] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:20:22.557] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:20:22.557] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:20:22.558] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:20:22.558] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:20:26.030] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:20:26.030] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:20:26.031] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:20:26.031] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:20:26.031] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:20:30.211] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:20:30.211] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:20:30.211] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[16:20:30.211] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[16:20:30.211] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:20:30.211] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:20:30.212] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[16:20:40.729] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:20:40.730] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:20:40.730] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:20:40.730] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:20:40.730] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:20:52.561] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:20:52.561] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:20:52.561] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:20:52.561] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:20:52.561] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:20:56.039] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:20:56.039] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:20:56.039] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:20:56.039] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:20:56.039] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:21:00.215] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:21:00.215] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:21:00.215] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:21:00.891] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[16:21:00.891] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:21:00.891] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:21:10.739] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:21:10.739] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:21:10.739] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:21:10.739] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:21:10.739] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:21:22.577] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:21:22.577] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:21:22.577] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:21:22.578] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:21:22.578] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:21:26.062] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:21:26.062] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:21:26.062] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:21:26.062] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:21:26.062] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:21:30.245] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:21:30.828] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:21:30.828] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:21:40.782] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:21:40.782] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:21:40.782] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:21:40.782] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:21:40.782] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:21:52.622] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:21:52.622] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:21:52.622] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:21:52.622] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:21:52.622] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:21:56.099] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:21:56.099] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:21:56.099] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:21:56.099] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:21:56.099] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:22:00.270] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:22:00.270] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:22:00.270] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:22:00.939] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[16:22:00.939] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:22:00.939] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:22:10.802] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:22:10.802] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:22:10.802] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:22:10.802] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:22:10.802] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:22:22.637] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:22:22.637] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:22:22.637] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:22:22.637] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:22:22.637] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:22:26.109] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:22:26.109] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:22:26.109] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:22:26.110] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:22:26.110] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:22:30.278] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:22:30.278] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:22:30.278] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:22:40.813] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:22:40.813] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:22:40.813] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:22:40.813] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:22:40.813] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:22:52.643] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:22:52.643] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:22:52.643] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:22:52.643] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:22:52.644] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:22:56.116] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:22:56.116] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:22:56.116] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:22:56.116] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:22:56.116] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:23:00.283] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:23:00.283] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:23:00.283] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:23:00.948] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[16:23:00.948] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:23:00.948] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:23:10.824] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:23:10.824] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:23:10.824] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:23:10.824] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:23:10.824] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:23:22.652] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:23:22.653] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:23:22.653] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:23:22.653] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:23:22.653] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:23:26.126] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:23:26.126] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:23:26.126] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:23:26.126] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:23:26.126] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:23:30.287] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:23:30.287] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:23:30.287] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[16:23:30.288] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[16:23:30.288] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:23:30.288] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:23:30.289] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[16:23:40.835] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:23:40.836] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:23:40.836] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:23:40.836] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:23:40.836] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:23:52.662] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:23:52.662] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:23:52.663] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:23:52.663] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:23:52.663] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:23:56.134] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:23:56.134] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:23:56.134] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:23:56.134] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:23:56.134] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:24:00.290] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:24:00.290] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:24:00.290] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:24:00.952] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[16:24:00.953] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:24:00.953] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:24:10.843] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:24:10.843] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:24:10.844] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:24:10.844] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:24:10.844] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:24:22.670] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:24:22.670] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:24:22.670] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:24:22.670] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:24:22.670] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:24:26.144] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:24:26.144] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:24:26.144] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:24:26.144] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:24:26.144] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:24:30.295] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:24:30.295] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:24:30.295] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:24:40.854] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:24:40.854] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:24:40.854] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:24:40.854] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:24:40.854] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:24:52.678] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:24:52.679] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:24:52.679] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:24:52.679] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:24:52.679] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:24:56.152] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:24:56.152] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:24:56.152] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:24:56.152] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:24:56.152] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:25:00.301] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:25:00.301] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:25:00.301] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:25:00.955] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[16:25:00.955] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:25:00.955] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:25:10.865] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:25:10.866] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:25:10.866] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:25:10.866] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:25:10.866] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:25:22.686] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:25:22.686] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:25:22.686] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:25:22.686] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:25:22.686] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:25:26.160] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:25:26.160] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:25:26.160] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:25:26.160] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:25:26.160] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:25:30.304] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:25:30.304] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:25:30.304] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:25:40.876] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:25:40.876] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:25:40.876] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:25:40.876] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:25:40.876] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:25:52.695] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:25:52.695] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:25:52.695] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:25:52.695] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:25:52.695] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:25:56.170] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:25:56.171] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:25:56.171] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:25:56.171] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:25:56.171] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:26:00.307] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:26:00.307] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:26:00.307] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:26:00.958] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[16:26:00.958] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:26:00.958] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:26:10.883] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:26:10.883] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:26:10.883] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:26:10.883] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:26:10.883] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:26:22.703] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:26:22.703] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:26:22.703] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:26:22.703] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:26:22.703] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:26:26.180] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:26:26.180] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:26:26.180] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:26:26.180] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:26:26.180] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:26:30.312] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:26:30.313] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:26:30.313] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[16:26:30.313] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[16:26:30.313] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:26:30.314] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:26:30.314] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[16:26:40.893] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:26:40.893] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:26:40.893] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:26:40.893] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:26:40.893] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:26:52.710] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:26:52.710] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:26:52.710] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:26:52.710] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:26:52.710] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:26:56.190] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:26:56.190] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:26:56.190] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:26:56.190] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:26:56.191] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:27:00.313] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:27:00.313] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:27:00.313] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:27:00.963] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[16:27:00.963] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:27:00.963] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:27:10.905] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:27:10.906] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:27:10.906] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:27:10.906] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:27:10.906] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:27:22.717] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:27:22.717] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:27:22.717] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:27:22.717] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:27:22.717] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:27:26.199] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:27:26.199] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:27:26.199] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:27:26.199] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:27:26.199] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:27:30.317] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:27:30.317] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:27:30.317] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:27:40.914] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:27:40.914] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:27:40.914] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:27:40.914] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:27:40.914] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:27:52.726] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:27:52.726] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:27:52.726] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:27:52.726] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:27:52.726] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:27:56.209] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:27:56.209] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:27:56.209] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:27:56.209] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:27:56.209] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:28:00.321] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:28:00.321] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:28:00.322] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:28:00.969] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[16:28:00.969] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:28:00.969] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:28:10.922] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:28:10.922] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:28:10.922] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:28:10.922] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:28:10.922] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:28:22.735] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:28:22.735] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:28:22.735] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:28:22.735] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:28:22.735] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:28:26.220] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:28:26.220] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:28:26.220] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:28:26.220] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:28:26.220] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:28:30.324] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:28:30.325] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:28:30.325] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:28:40.930] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:28:40.930] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:28:40.930] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:28:40.930] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:28:40.930] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:28:52.744] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:28:52.744] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:28:52.744] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:28:52.744] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:28:52.744] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:28:56.228] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:28:56.228] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:28:56.228] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:28:56.228] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:28:56.228] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:29:00.326] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:29:00.326] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:29:00.327] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:29:00.971] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[16:29:00.971] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:29:00.971] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:29:10.942] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:29:10.942] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:29:10.942] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:29:10.942] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:29:10.942] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:29:22.751] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:29:22.751] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:29:22.751] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:29:22.751] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:29:22.752] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:29:26.237] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:29:26.237] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:29:26.237] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:29:26.237] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:29:26.237] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:29:30.330] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:29:30.330] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:29:30.330] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[16:29:30.331] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[16:29:30.331] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:29:30.331] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:29:30.332] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[16:29:40.953] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:29:40.953] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:29:40.954] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:29:40.954] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:29:40.954] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:29:52.759] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:29:52.759] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:29:52.760] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:29:52.760] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:29:52.760] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:29:56.245] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:29:56.245] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:29:56.245] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:29:56.245] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:29:56.246] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:30:00.335] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:30:00.336] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:30:00.336] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:30:00.697] DEBUG [Eureka-PeerNodesUpdater]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[16:30:00.697] WARN  [Eureka-PeerNodesUpdater]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[16:30:00.977] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[16:30:00.977] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:30:00.977] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:30:10.966] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:30:10.966] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:30:10.966] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:30:10.966] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:30:10.966] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:30:22.767] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:30:22.767] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:30:22.767] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:30:22.767] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:30:22.767] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:30:26.259] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:30:26.259] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:30:26.259] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:30:26.259] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:30:26.259] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:30:30.336] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:30:30.336] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:30:30.336] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:30:40.974] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:30:40.974] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:30:40.974] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:30:40.974] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:30:40.974] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:30:52.776] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:30:52.776] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:30:52.776] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:30:52.776] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:30:52.776] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:30:56.272] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:30:56.272] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:30:56.273] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:30:56.273] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:30:56.273] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:31:00.338] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:31:00.338] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:31:00.338] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:31:00.978] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[16:31:00.978] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:31:00.978] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:31:10.983] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:31:10.983] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:31:10.983] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:31:10.983] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:31:10.983] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:31:22.782] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:31:22.782] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:31:22.782] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:31:22.782] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:31:22.782] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:31:26.286] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:31:26.286] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:31:26.286] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:31:26.286] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:31:26.286] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:31:30.340] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:31:30.340] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:31:30.340] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:31:40.995] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:31:40.995] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:31:40.996] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:31:40.996] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:31:40.996] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:31:52.790] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:31:52.790] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:31:52.790] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:31:52.790] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:31:52.790] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:31:56.295] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:31:56.295] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:31:56.295] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:31:56.295] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:31:56.295] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:32:00.346] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:32:00.346] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:32:00.346] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:32:00.980] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[16:32:00.980] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:32:00.980] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:32:11.006] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:32:11.006] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:32:11.006] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:32:11.006] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:32:11.006] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:32:22.801] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:32:22.801] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:32:22.802] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:32:22.802] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:32:22.802] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:32:26.308] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:32:26.308] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:32:26.308] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:32:26.308] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:32:26.308] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:32:30.352] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:32:30.352] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:32:30.352] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[16:32:30.352] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[16:32:30.353] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:32:30.353] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:32:30.353] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[16:32:41.017] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:32:41.017] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:32:41.017] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:32:41.017] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:32:41.017] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:32:52.807] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:32:52.807] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:32:52.807] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:32:52.807] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:32:52.807] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:32:56.317] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:32:56.317] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:32:56.317] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:32:56.318] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:32:56.318] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:33:00.356] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:33:00.357] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:33:00.357] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:33:00.982] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[16:33:00.982] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:33:00.982] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:33:11.024] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:33:11.024] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:33:11.024] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:33:11.024] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:33:11.024] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:33:22.815] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:33:22.815] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:33:22.816] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:33:22.816] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:33:22.816] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:33:26.330] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:33:26.330] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:33:26.330] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:33:26.330] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:33:26.330] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:33:30.359] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:33:30.359] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:33:30.359] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:33:41.031] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:33:41.031] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:33:41.031] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:33:41.032] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:33:41.032] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:33:52.826] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:33:52.826] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:33:52.826] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:33:52.826] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:33:52.826] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:33:56.343] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:33:56.343] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:33:56.343] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:33:56.343] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:33:56.343] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:34:00.360] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:34:00.360] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:34:00.360] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:34:00.988] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[16:34:00.988] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:34:00.988] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:34:11.043] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:34:11.043] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:34:11.044] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:34:11.044] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:34:11.044] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:34:22.836] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:34:22.836] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:34:22.837] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:34:22.837] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:34:22.837] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:34:26.357] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:34:26.357] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:34:26.357] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:34:26.358] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:34:26.358] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:34:30.365] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:34:30.366] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:34:30.366] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:34:41.056] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:34:41.056] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:34:41.056] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:34:41.056] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:34:41.056] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:34:52.846] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:34:52.846] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:34:52.847] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:34:52.847] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:34:52.847] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:34:56.368] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:34:56.368] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:34:56.368] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:34:56.368] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:34:56.368] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:35:00.366] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:35:00.366] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:35:00.366] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:35:00.764] INFO  [ReplicaAwareInstanceRegistry - RenewalThresholdUpdater]c.n.e.r.PeerAwareInstanceRegistryImpl - Current renewal threshold is : 6
[16:35:00.993] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[16:35:00.993] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:35:00.993] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:35:11.064] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:35:11.064] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:35:11.064] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:35:11.064] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:35:11.064] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:35:22.854] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:35:22.854] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:35:22.854] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:35:22.854] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:35:22.854] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:35:26.380] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:35:26.380] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:35:26.380] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:35:26.381] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:35:26.381] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:35:30.368] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:35:30.368] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:35:30.368] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[16:35:30.369] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[16:35:30.369] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:35:30.369] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:35:30.369] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[16:35:41.075] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:35:41.075] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:35:41.076] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:35:41.076] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:35:41.076] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:35:52.861] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:35:52.861] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:35:52.861] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:35:52.861] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:35:52.861] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:35:56.390] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:35:56.390] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:35:56.390] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:35:56.390] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:35:56.390] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:36:00.371] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:36:00.371] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:36:00.371] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:36:00.997] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[16:36:00.997] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:36:00.997] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:36:11.087] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:36:11.088] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:36:11.088] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:36:11.088] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:36:11.088] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:36:22.869] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:36:22.869] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:36:22.869] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:36:22.869] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:36:22.869] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:36:26.400] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:36:26.400] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:36:26.400] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:36:26.400] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:36:26.400] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:36:30.377] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:36:31.277] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:36:31.277] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:36:41.105] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:36:41.105] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:36:41.105] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:36:41.105] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:36:41.105] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:36:53.748] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:36:53.748] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:36:53.748] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:36:53.748] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:36:53.748] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:36:56.422] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:36:56.422] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:36:56.422] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:36:56.422] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:36:56.422] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:37:00.390] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:37:00.390] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:37:00.390] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:37:01.016] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 5ms
[16:37:01.016] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:37:01.016] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:37:11.122] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:37:11.122] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:37:11.122] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:37:11.122] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:37:11.122] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:37:23.781] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:37:23.781] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:37:23.781] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:37:23.781] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:37:23.782] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:37:26.436] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:37:26.436] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:37:26.437] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:37:26.437] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:37:26.437] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:37:30.397] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:37:30.397] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:37:30.397] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:37:41.135] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:37:41.135] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:37:41.135] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:37:41.135] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:37:41.135] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:37:53.792] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:37:53.793] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:37:53.793] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:37:53.793] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:37:53.793] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:37:56.446] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:37:56.446] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:37:56.446] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:37:56.446] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:37:56.446] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:38:00.403] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:38:00.403] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:38:00.403] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:38:01.022] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[16:38:01.022] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:38:01.022] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:38:11.146] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:38:11.146] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:38:11.146] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:38:11.146] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:38:11.146] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:38:23.807] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:38:23.807] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:38:23.807] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:38:23.807] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:38:23.807] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:38:26.458] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:38:26.458] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:38:26.458] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:38:26.458] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:38:26.458] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:38:30.409] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:38:30.409] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:38:30.409] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[16:38:30.410] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[16:38:30.410] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:38:30.410] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:38:30.411] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[16:38:41.156] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:38:41.156] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:38:41.156] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:38:41.156] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:38:41.156] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:38:53.820] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:38:53.820] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:38:53.820] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:38:53.820] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:38:53.820] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:38:56.469] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:38:56.469] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:38:56.469] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:38:56.469] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:38:56.469] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:39:00.411] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:39:00.411] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:39:00.412] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:39:01.024] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[16:39:01.024] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:39:01.024] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:39:11.164] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:39:11.164] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:39:11.164] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:39:11.164] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:39:11.165] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:39:23.833] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:39:23.833] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:39:23.833] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:39:23.833] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:39:23.833] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:39:26.479] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:39:26.479] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:39:26.479] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:39:26.479] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:39:26.479] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:39:30.416] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:39:30.416] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:39:30.416] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:39:41.171] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:39:41.171] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:39:41.171] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:39:41.171] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:39:41.171] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:39:53.845] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:39:53.846] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:39:53.846] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:39:53.846] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:39:53.846] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:39:56.489] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:39:56.489] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:39:56.489] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:39:56.489] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:39:56.489] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:40:00.419] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:40:00.419] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:40:00.419] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:40:00.730] DEBUG [Eureka-PeerNodesUpdater]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[16:40:00.730] WARN  [Eureka-PeerNodesUpdater]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[16:40:01.025] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[16:40:01.025] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:40:01.025] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:40:11.181] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:40:11.181] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:40:11.181] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:40:11.181] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:40:11.181] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:40:23.856] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:40:23.856] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:40:23.856] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:40:23.856] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:40:23.856] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:40:26.499] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:40:26.500] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:40:26.500] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:40:26.500] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:40:26.500] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:40:30.422] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:40:30.422] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:40:30.422] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:40:41.192] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:40:41.192] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:40:41.193] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:40:41.193] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:40:41.193] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:40:53.864] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:40:53.864] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:40:53.864] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:40:53.864] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:40:53.864] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:40:56.510] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:40:56.510] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:40:56.510] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:40:56.511] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:40:56.511] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:41:00.424] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:41:00.424] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:41:00.424] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:41:01.028] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[16:41:01.028] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:41:01.028] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:41:11.201] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:41:11.201] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:41:11.201] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:41:11.201] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:41:11.201] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:41:23.870] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:41:23.870] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:41:23.870] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:41:23.870] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:41:23.870] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:41:26.520] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:41:26.520] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:41:26.520] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:41:26.520] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:41:26.520] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:41:30.427] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:41:30.427] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:41:30.427] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[16:41:30.427] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[16:41:30.427] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:41:30.428] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:41:30.428] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[16:41:41.211] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:41:41.211] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:41:41.211] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:41:41.211] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:41:41.211] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:41:53.882] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:41:53.882] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:41:53.882] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:41:53.882] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:41:53.882] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:41:56.529] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:41:56.529] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:41:56.529] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:41:56.529] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:41:56.529] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:42:00.432] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:42:00.432] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:42:00.432] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:42:01.033] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[16:42:01.033] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:42:01.033] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:42:11.222] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:42:11.222] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:42:11.223] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:42:11.223] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:42:11.223] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:42:23.894] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:42:23.894] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:42:23.894] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:42:23.894] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:42:23.894] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:42:26.538] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:42:26.539] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:42:26.539] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:42:26.539] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:42:26.539] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:42:30.433] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:42:30.433] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:42:30.433] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:42:41.231] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:42:41.232] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:42:41.232] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:42:41.232] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:42:41.232] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:42:53.903] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:42:53.903] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:42:53.903] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:42:53.903] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:42:53.903] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:42:56.548] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:42:56.548] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:42:56.548] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:42:56.548] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:42:56.548] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:43:00.438] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:43:00.438] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:43:00.438] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:43:01.039] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[16:43:01.039] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:43:01.039] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:43:11.246] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:43:11.246] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:43:11.246] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:43:11.246] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:43:11.246] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:43:23.915] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:43:23.915] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:43:23.915] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:43:23.915] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:43:23.915] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:43:26.560] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:43:26.560] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:43:26.560] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:43:26.561] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:43:26.561] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:43:30.443] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:43:30.443] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:43:30.443] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:43:41.258] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:43:41.258] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:43:41.258] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:43:41.258] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:43:41.258] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:43:53.926] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:43:53.926] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:43:53.926] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:43:53.926] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:43:53.926] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:43:56.568] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:43:56.568] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:43:56.568] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:43:56.568] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:43:56.568] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:44:00.447] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:44:00.447] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:44:00.447] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:44:01.042] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[16:44:01.042] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:44:01.042] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:44:11.266] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:44:11.266] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:44:11.266] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:44:11.266] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:44:11.266] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:44:23.936] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:44:23.936] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:44:23.936] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:44:23.936] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:44:23.936] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:44:26.574] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:44:26.574] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:44:26.575] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:44:26.575] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:44:26.575] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:44:30.451] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:44:30.451] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:44:30.451] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[16:44:30.451] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[16:44:30.452] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:44:30.452] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:44:30.452] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[16:44:41.278] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:44:41.278] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:44:41.278] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:44:41.278] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:44:41.278] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:44:53.944] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:44:53.945] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:44:53.945] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:44:53.945] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:44:53.945] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:44:56.580] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:44:56.580] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:44:56.580] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:44:56.580] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:44:56.580] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:45:00.455] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:45:00.455] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:45:00.455] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:45:01.045] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[16:45:01.045] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:45:01.046] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:45:11.289] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:45:11.289] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:45:11.289] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:45:11.289] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:45:11.289] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:45:23.954] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:45:23.954] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:45:23.954] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:45:23.954] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:45:23.954] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:45:26.586] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:45:26.586] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:45:26.586] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:45:26.586] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:45:26.586] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:45:30.458] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:45:30.458] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:45:30.458] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:45:41.298] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:45:41.298] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:45:41.298] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:45:41.298] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:45:41.298] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:45:53.963] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:45:53.963] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:45:53.963] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:45:53.963] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:45:53.963] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:45:56.590] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:45:56.590] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:45:56.590] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:45:56.590] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:45:56.590] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:46:00.461] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:46:00.461] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:46:00.461] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:46:01.047] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[16:46:01.048] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:46:01.048] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:46:11.308] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:46:11.308] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:46:11.308] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:46:11.308] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:46:11.308] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:46:23.971] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:46:23.971] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:46:23.971] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:46:23.971] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:46:23.971] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:46:26.596] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:46:26.596] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:46:26.596] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:46:26.596] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:46:26.596] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:46:30.464] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:46:30.465] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:46:30.465] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:46:41.321] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:46:41.321] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:46:41.321] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:46:41.321] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:46:41.321] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:46:53.982] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:46:53.982] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:46:53.982] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:46:53.982] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:46:53.982] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:46:56.607] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:46:56.607] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:46:56.607] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:46:56.607] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:46:56.608] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:47:00.468] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:47:00.468] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:47:00.468] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:47:01.053] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[16:47:01.053] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:47:01.053] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:47:11.331] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:47:11.331] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:47:11.331] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:47:11.332] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:47:11.332] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:47:23.993] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:47:23.993] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:47:23.993] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:47:23.993] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:47:23.993] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:47:26.612] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:47:26.612] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:47:26.612] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:47:26.612] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:47:26.612] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:47:30.472] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:47:30.472] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:47:30.472] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[16:47:30.473] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[16:47:30.473] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:47:30.473] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:47:30.474] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[16:47:41.343] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:47:41.343] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:47:41.343] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:47:41.343] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:47:41.343] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:47:54.002] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:47:54.002] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:47:54.003] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:47:54.003] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:47:54.003] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:47:56.618] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:47:56.618] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:47:56.618] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:47:56.618] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:47:56.618] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:48:00.477] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:48:00.477] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:48:00.477] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:48:01.057] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[16:48:01.057] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:48:01.057] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:48:11.352] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:48:11.352] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:48:11.352] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:48:11.352] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:48:11.352] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:48:24.009] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:48:24.009] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:48:24.009] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:48:24.009] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:48:24.009] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:48:26.624] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:48:26.624] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:48:26.624] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:48:26.624] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:48:26.624] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:48:30.483] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:48:30.483] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:48:30.483] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:48:41.364] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:48:41.364] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:48:41.364] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:48:41.364] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:48:41.364] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:48:54.014] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:48:54.014] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:48:54.014] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:48:54.014] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:48:54.014] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:48:56.630] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:48:56.630] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:48:56.630] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:48:56.630] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:48:56.630] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:49:00.488] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:49:00.488] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:49:00.489] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:49:01.060] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[16:49:01.060] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:49:01.060] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:49:11.375] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:49:11.375] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:49:11.375] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:49:11.375] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:49:11.375] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:49:24.022] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:49:24.022] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:49:24.022] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:49:24.022] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:49:24.022] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:49:26.639] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:49:26.639] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:49:26.639] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:49:26.639] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:49:26.639] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:49:30.490] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:49:30.491] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:49:30.491] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:49:41.386] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:49:41.386] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:49:41.386] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:49:41.386] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:49:41.386] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:49:54.030] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:49:54.030] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:49:54.031] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:49:54.031] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:49:54.031] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:49:56.649] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:49:56.649] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:49:56.649] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:49:56.649] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:49:56.649] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:50:00.492] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:50:00.493] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:50:00.493] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:50:00.750] DEBUG [Eureka-PeerNodesUpdater]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[16:50:00.750] WARN  [Eureka-PeerNodesUpdater]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[16:50:00.802] INFO  [ReplicaAwareInstanceRegistry - RenewalThresholdUpdater]c.n.e.r.PeerAwareInstanceRegistryImpl - Current renewal threshold is : 6
[16:50:01.062] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[16:50:01.062] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:50:01.062] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:50:11.397] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:50:11.397] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:50:11.397] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:50:11.397] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:50:11.397] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:50:24.043] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:50:24.043] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:50:24.043] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:50:24.043] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:50:24.043] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:50:26.660] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:50:26.660] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:50:26.660] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:50:26.660] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:50:26.660] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:50:30.494] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:50:30.494] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:50:30.494] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[16:50:30.494] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[16:50:30.494] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:50:30.495] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:50:30.495] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[16:50:41.406] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:50:41.406] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:50:41.406] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:50:41.406] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:50:41.406] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:50:54.051] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:50:54.051] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:50:54.051] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:50:54.051] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:50:54.051] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:50:56.672] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:50:56.672] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:50:56.672] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:50:56.672] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:50:56.672] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:51:00.498] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:51:00.498] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:51:00.498] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:51:01.064] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[16:51:01.065] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:51:01.065] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:51:11.417] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:51:11.417] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:51:11.417] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:51:11.417] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:51:11.418] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:51:24.057] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:51:24.057] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:51:24.057] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:51:24.057] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:51:24.057] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:51:26.678] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:51:26.678] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:51:26.679] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:51:26.679] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:51:26.679] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:51:30.498] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:51:30.498] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:51:30.498] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:51:41.421] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:51:41.422] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:51:41.422] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:51:41.422] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:51:41.422] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:51:54.059] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:51:54.059] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:51:54.059] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:51:54.059] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:51:54.059] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:51:56.683] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:51:56.683] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:51:56.683] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:51:56.683] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:51:56.683] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:52:00.498] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:52:00.499] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:52:00.499] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:52:01.065] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 7ms
[16:52:01.066] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:52:01.066] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:52:11.431] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:52:11.432] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:52:11.432] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:52:11.432] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:52:11.432] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:52:24.069] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:52:24.069] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:52:24.069] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:52:24.069] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:52:24.069] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:52:26.692] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:52:26.692] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:52:26.692] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:52:26.692] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:52:26.692] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:52:30.503] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:52:30.503] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:52:30.503] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:52:41.441] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:52:41.442] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:52:41.442] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:52:41.442] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:52:41.442] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:52:54.081] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:52:54.081] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:52:54.081] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:52:54.081] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:52:54.081] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:52:56.704] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:52:56.705] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:52:56.705] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:52:56.705] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:52:56.705] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:53:00.505] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:53:00.506] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:53:00.506] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:53:01.070] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[16:53:01.070] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:53:01.071] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:53:11.454] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:53:11.454] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:53:11.454] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:53:11.454] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:53:11.454] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:53:24.089] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:53:24.089] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:53:24.089] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:53:24.089] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:53:24.089] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:53:26.713] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:53:26.713] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:53:26.713] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:53:26.713] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:53:26.713] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:53:30.507] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:53:30.507] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:53:30.507] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[16:53:30.507] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[16:53:30.507] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:53:30.508] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:53:30.508] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[16:53:41.462] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:53:41.462] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:53:41.462] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:53:41.462] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:53:41.462] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:53:54.100] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:53:54.100] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:53:54.100] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:53:54.100] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:53:54.100] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:53:56.722] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:53:56.722] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:53:56.722] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:53:56.722] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:53:56.722] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:54:00.513] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:54:00.513] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:54:00.513] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:54:01.072] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[16:54:01.073] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:54:01.073] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:54:11.472] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:54:11.472] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:54:11.472] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:54:11.472] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:54:11.473] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:54:24.108] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:54:24.108] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:54:24.108] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:54:24.108] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:54:24.108] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:54:26.735] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:54:26.735] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:54:26.735] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:54:26.735] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:54:26.735] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:54:30.517] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:54:30.518] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:54:30.518] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:54:41.484] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:54:41.485] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:54:41.485] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:54:41.485] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:54:41.485] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:54:54.115] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:54:54.115] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:54:54.115] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:54:54.115] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:54:54.115] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:54:56.744] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:54:56.744] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:54:56.744] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:54:56.745] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:54:56.745] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:55:00.518] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:55:00.518] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:55:00.518] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:55:01.075] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[16:55:01.075] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:55:01.075] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:55:11.492] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:55:11.492] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:55:11.492] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:55:11.492] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:55:11.492] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:55:24.126] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:55:24.126] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:55:24.126] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:55:24.126] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:55:24.126] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:55:26.755] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:55:26.755] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:55:26.755] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:55:26.755] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:55:26.755] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:55:30.524] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:55:30.524] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:55:30.524] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:55:41.502] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:55:41.502] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:55:41.502] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:55:41.502] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:55:41.502] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:55:54.139] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:55:54.139] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:55:54.139] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:55:54.139] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:55:54.139] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:55:56.762] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:55:56.762] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:55:56.762] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:55:56.762] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:55:56.762] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:56:00.525] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:56:00.525] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:56:00.526] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:56:01.080] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[16:56:01.080] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:56:01.080] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:56:11.511] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:56:11.511] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:56:11.511] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:56:11.511] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:56:11.511] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:56:24.151] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:56:24.151] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:56:24.152] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:56:24.152] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:56:24.152] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:56:26.771] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:56:26.771] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:56:26.771] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:56:26.771] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:56:26.771] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:56:30.526] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:56:30.526] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:56:30.526] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[16:56:30.526] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[16:56:30.527] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:56:30.527] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:56:30.527] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[16:56:41.520] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:56:41.520] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:56:41.520] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:56:41.521] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:56:41.521] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:56:54.160] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:56:54.160] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:56:54.160] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:56:54.161] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:56:54.161] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:56:56.780] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:56:56.780] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:56:56.780] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:56:56.780] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:56:56.780] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:57:00.532] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:57:00.532] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:57:00.532] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:57:01.085] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[16:57:01.085] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:57:01.085] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:57:11.531] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:57:11.531] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:57:11.531] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:57:11.531] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:57:11.531] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:57:24.170] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:57:24.171] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:57:24.171] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:57:24.171] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:57:24.171] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:57:26.789] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:57:26.789] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:57:26.789] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:57:26.789] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:57:26.789] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:57:30.534] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:57:30.534] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:57:30.534] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:57:41.540] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:57:41.540] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:57:41.540] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:57:41.540] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:57:41.540] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:57:54.179] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:57:54.179] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:57:54.179] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:57:54.179] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:57:54.179] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:57:56.796] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:57:56.796] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:57:56.796] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:57:56.797] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:57:56.797] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:58:00.537] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:58:00.537] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:58:00.537] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:58:01.088] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[16:58:01.088] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:58:01.088] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:58:11.548] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:58:11.548] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:58:11.548] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:58:11.548] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:58:11.548] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:58:24.187] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:58:24.188] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:58:24.188] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:58:24.188] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:58:24.188] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:58:26.807] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:58:26.807] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:58:26.807] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:58:26.807] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:58:26.807] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:58:30.538] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:58:30.538] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:58:30.538] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:58:41.558] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:58:41.558] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:58:41.558] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:58:41.558] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:58:41.558] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:58:54.195] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:58:54.195] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:58:54.195] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:58:54.195] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:58:54.195] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:58:56.815] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:58:56.815] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:58:56.815] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:58:56.815] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:58:56.815] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:59:00.539] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:59:00.893] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:59:00.893] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:59:01.094] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[16:59:01.094] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[16:59:01.094] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[16:59:11.889] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:59:11.929] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:59:11.930] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:59:11.930] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:59:11.930] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:59:24.205] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:59:24.205] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:59:24.206] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:59:24.206] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:59:24.206] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:59:26.823] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:59:26.823] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:59:26.823] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:59:26.823] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:59:26.823] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[16:59:30.541] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[16:59:30.541] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[16:59:30.542] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[16:59:30.542] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[16:59:30.542] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[16:59:30.542] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:59:30.543] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[16:59:41.940] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[16:59:41.940] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:59:41.940] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:59:41.940] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[16:59:41.940] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[16:59:54.215] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[16:59:54.215] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:59:54.215] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:59:54.215] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[16:59:54.215] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[16:59:56.831] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[16:59:56.831] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[16:59:56.832] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[16:59:56.832] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[16:59:56.832] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:00:00.546] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:00:00.546] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:00:00.546] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:00:00.759] DEBUG [Eureka-PeerNodesUpdater]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[17:00:00.759] WARN  [Eureka-PeerNodesUpdater]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[17:00:01.100] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[17:00:01.100] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:00:01.100] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:00:11.949] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:00:11.949] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:00:11.949] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:00:11.949] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:00:11.949] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:00:24.227] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:00:24.227] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:00:24.227] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:00:24.227] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:00:24.227] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:00:26.843] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:00:26.843] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:00:26.843] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:00:26.843] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:00:26.843] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:00:30.547] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:00:30.547] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:00:30.547] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:00:41.957] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:00:41.957] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:00:41.957] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:00:41.957] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:00:41.957] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:00:54.237] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:00:54.237] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:00:54.237] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:00:54.237] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:00:54.237] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:00:56.851] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:00:56.851] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:00:56.851] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:00:56.851] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:00:56.852] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:01:00.551] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:01:00.551] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:01:00.551] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:01:01.103] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[17:01:01.103] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:01:01.103] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:01:11.963] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:01:11.963] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:01:11.963] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:01:11.963] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:01:11.963] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:01:24.243] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:01:24.243] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:01:24.243] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:01:24.243] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:01:24.243] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:01:26.864] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:01:26.864] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:01:26.864] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:01:26.865] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:01:26.865] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:01:30.553] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:01:30.553] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:01:30.553] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:01:41.971] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:01:41.971] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:01:41.971] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:01:41.971] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:01:41.971] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:01:54.252] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:01:54.252] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:01:54.252] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:01:54.252] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:01:54.252] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:01:56.874] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:01:56.874] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:01:56.874] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:01:56.874] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:01:56.874] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:02:00.559] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:02:00.559] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:02:00.559] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:02:01.108] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[17:02:01.108] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:02:01.108] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:02:11.978] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:02:11.978] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:02:11.978] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:02:11.978] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:02:11.978] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:02:24.261] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:02:24.261] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:02:24.261] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:02:24.261] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:02:24.261] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:02:26.885] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:02:26.885] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:02:26.885] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:02:26.885] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:02:26.885] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:02:30.562] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:02:30.562] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:02:30.563] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[17:02:30.563] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[17:02:30.563] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:02:30.563] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:02:30.564] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[17:02:41.985] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:02:41.985] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:02:41.985] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:02:41.985] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:02:41.985] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:02:54.270] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:02:54.270] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:02:54.270] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:02:54.270] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:02:54.270] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:02:56.896] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:02:56.896] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:02:56.896] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:02:56.896] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:02:56.896] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:03:00.563] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:03:00.564] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:03:00.564] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:03:01.113] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[17:03:01.113] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:03:01.113] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:03:11.996] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:03:11.997] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:03:11.997] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:03:11.997] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:03:11.997] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:03:24.282] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:03:24.282] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:03:24.283] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:03:24.283] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:03:24.283] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:03:26.909] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:03:26.909] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:03:26.909] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:03:26.909] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:03:26.909] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:03:30.566] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:03:30.567] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:03:30.567] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:03:42.006] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:03:42.006] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:03:42.006] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:03:42.006] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:03:42.006] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:03:54.296] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:03:54.296] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:03:54.296] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:03:54.296] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:03:54.296] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:03:56.920] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:03:56.920] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:03:56.920] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:03:56.920] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:03:56.920] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:04:00.570] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:04:00.570] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:04:00.570] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:04:01.117] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[17:04:01.117] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:04:01.117] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:04:12.016] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:04:12.016] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:04:12.017] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:04:12.017] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:04:12.017] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:04:24.310] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:04:24.310] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:04:24.310] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:04:24.310] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:04:24.310] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:04:26.931] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:04:26.931] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:04:26.931] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:04:26.931] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:04:26.931] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:04:30.572] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:04:30.572] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:04:30.572] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:04:42.028] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:04:42.028] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:04:42.028] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:04:42.028] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:04:42.028] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:04:54.319] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:04:54.319] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:04:54.319] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:04:54.319] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:04:54.319] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:04:56.942] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:04:56.942] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:04:56.942] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:04:56.943] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:04:56.943] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:05:00.574] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:05:00.574] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:05:00.574] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:05:00.816] INFO  [ReplicaAwareInstanceRegistry - RenewalThresholdUpdater]c.n.e.r.PeerAwareInstanceRegistryImpl - Current renewal threshold is : 6
[17:05:01.123] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 5ms
[17:05:01.124] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:05:01.124] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:05:12.039] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:05:12.039] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:05:12.039] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:05:12.039] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:05:12.039] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:05:24.330] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:05:24.330] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:05:24.331] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:05:24.331] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:05:24.331] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:05:26.951] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:05:26.951] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:05:26.951] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:05:26.951] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:05:26.951] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:05:30.580] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:05:30.580] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:05:30.580] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[17:05:30.581] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[17:05:30.581] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:05:30.581] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:05:30.582] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[17:05:42.050] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:05:42.050] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:05:42.050] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:05:42.050] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:05:42.050] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:05:54.341] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:05:54.341] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:05:54.341] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:05:54.341] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:05:54.341] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:05:56.959] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:05:56.960] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:05:56.960] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:05:56.960] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:05:56.960] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:06:00.582] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:06:00.582] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:06:00.582] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:06:01.124] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[17:06:01.124] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:06:01.124] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:06:12.060] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:06:12.060] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:06:12.060] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:06:12.060] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:06:12.060] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:06:24.349] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:06:24.349] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:06:24.349] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:06:24.349] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:06:24.349] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:06:26.969] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:06:26.969] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:06:26.969] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:06:26.969] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:06:26.969] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:06:30.583] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:06:30.583] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:06:30.583] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:06:42.071] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:06:42.071] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:06:42.071] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:06:42.071] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:06:42.071] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:06:54.363] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:06:54.364] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:06:54.364] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:06:54.364] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:06:54.364] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:06:56.977] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:06:56.977] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:06:56.977] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:06:56.977] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:06:56.977] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:07:00.584] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:07:00.585] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:07:00.585] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:07:01.132] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 5ms
[17:07:01.132] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:07:01.132] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:07:12.079] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:07:12.079] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:07:12.080] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:07:12.080] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:07:12.080] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:07:24.376] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:07:24.376] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:07:24.376] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:07:24.376] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:07:24.376] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:07:26.982] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:07:26.982] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:07:26.982] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:07:26.982] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:07:26.982] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:07:30.585] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:07:30.585] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:07:30.585] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:07:42.092] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:07:42.092] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:07:42.092] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:07:42.092] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:07:42.092] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:07:54.390] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:07:54.390] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:07:54.390] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:07:54.391] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:07:54.391] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:07:56.992] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:07:56.992] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:07:56.992] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:07:56.992] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:07:56.992] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:08:00.588] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:08:00.589] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:08:00.589] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:08:01.134] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[17:08:01.134] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:08:01.134] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:08:12.105] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:08:12.105] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:08:12.105] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:08:12.105] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:08:12.105] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:08:24.400] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:08:24.400] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:08:24.400] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:08:24.400] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:08:24.400] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:08:26.998] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:08:26.998] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:08:26.998] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:08:26.998] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:08:26.998] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:08:30.589] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:08:30.589] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:08:30.589] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[17:08:30.589] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[17:08:30.589] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:08:30.590] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:08:30.590] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[17:08:42.115] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:08:42.115] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:08:42.115] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:08:42.115] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:08:42.115] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:08:54.410] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:08:54.410] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:08:54.410] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:08:54.410] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:08:54.410] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:08:57.006] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:08:57.006] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:08:57.006] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:08:57.006] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:08:57.006] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:09:00.594] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:09:00.594] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:09:00.594] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:09:01.139] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[17:09:01.140] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:09:01.140] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:09:12.127] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:09:12.127] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:09:12.127] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:09:12.127] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:09:12.127] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:09:24.420] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:09:24.420] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:09:24.420] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:09:24.420] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:09:24.420] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:09:27.013] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:09:27.013] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:09:27.013] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:09:27.013] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:09:27.013] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:09:30.595] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:09:30.595] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:09:30.595] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:09:42.139] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:09:42.139] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:09:42.139] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:09:42.139] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:09:42.139] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:09:54.429] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:09:54.429] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:09:54.429] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:09:54.429] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:09:54.429] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:09:57.023] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:09:57.023] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:09:57.023] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:09:57.023] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:09:57.023] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:10:00.597] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:10:00.597] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:10:00.597] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:10:00.779] DEBUG [Eureka-PeerNodesUpdater]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[17:10:00.779] WARN  [Eureka-PeerNodesUpdater]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[17:10:01.141] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[17:10:01.141] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:10:01.141] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:10:12.153] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:10:12.153] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:10:12.153] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:10:12.153] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:10:12.153] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:10:24.442] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:10:24.442] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:10:24.442] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:10:24.442] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:10:24.442] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:10:27.032] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:10:27.032] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:10:27.032] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:10:27.032] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:10:27.032] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:10:30.602] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:10:30.602] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:10:30.602] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:10:42.164] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:10:42.164] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:10:42.164] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:10:42.164] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:10:42.164] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:10:54.451] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:10:54.451] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:10:54.451] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:10:54.451] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:10:54.451] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:10:57.044] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:10:57.044] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:10:57.044] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:10:57.044] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:10:57.044] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:11:00.604] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:11:00.605] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:11:00.605] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:11:01.147] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 5ms
[17:11:01.148] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:11:01.148] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:11:12.173] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:11:12.173] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:11:12.173] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:11:12.173] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:11:12.173] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:11:24.461] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:11:24.461] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:11:24.461] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:11:24.461] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:11:24.461] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:11:27.057] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:11:27.057] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:11:27.058] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:11:27.058] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:11:27.058] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:11:30.606] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:11:30.606] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:11:30.606] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[17:11:30.606] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[17:11:30.606] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:11:30.606] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:11:30.607] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[17:11:42.183] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:11:42.183] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:11:42.183] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:11:42.183] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:11:42.183] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:11:54.472] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:11:54.473] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:11:54.473] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:11:54.473] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:11:54.473] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:11:57.065] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:11:57.065] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:11:57.065] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:11:57.065] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:11:57.065] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:12:00.608] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:12:00.609] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:12:00.609] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:12:01.149] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[17:12:01.149] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:12:01.149] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:12:12.196] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:12:12.196] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:12:12.196] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:12:12.196] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:12:12.196] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:12:24.484] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:12:24.484] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:12:24.484] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:12:24.484] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:12:24.484] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:12:27.073] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:12:27.074] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:12:27.074] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:12:27.074] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:12:27.074] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:12:30.611] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:12:30.611] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:12:30.611] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:12:42.210] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:12:42.210] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:12:42.210] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:12:42.210] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:12:42.210] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:12:54.495] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:12:54.495] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:12:54.495] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:12:54.495] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:12:54.495] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:12:57.081] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:12:57.081] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:12:57.081] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:12:57.081] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:12:57.081] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:13:00.612] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:13:00.612] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:13:00.612] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:13:01.152] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[17:13:01.152] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:13:01.152] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:13:12.222] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:13:12.222] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:13:12.222] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:13:12.222] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:13:12.222] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:13:24.504] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:13:24.504] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:13:24.504] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:13:24.504] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:13:24.504] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:13:27.092] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:13:27.092] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:13:27.092] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:13:27.092] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:13:27.092] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:13:30.618] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:13:30.618] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:13:30.618] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:13:42.233] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:13:42.233] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:13:42.233] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:13:42.234] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:13:42.234] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:13:54.511] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:13:54.511] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:13:54.511] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:13:54.511] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:13:54.511] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:13:57.102] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:13:57.102] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:13:57.102] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:13:57.102] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:13:57.102] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:14:00.619] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:14:00.619] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:14:00.620] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:14:01.157] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[17:14:01.157] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:14:01.157] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:14:12.244] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:14:12.244] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:14:12.244] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:14:12.244] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:14:12.244] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:14:24.519] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:14:24.519] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:14:24.519] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:14:24.519] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:14:24.519] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:14:27.112] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:14:27.112] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:14:27.112] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:14:27.112] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:14:27.112] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:14:30.619] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:14:30.620] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:14:30.620] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[17:14:30.620] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[17:14:30.620] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:14:30.620] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:14:30.621] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[17:14:42.254] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:14:42.254] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:14:42.254] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:14:42.254] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:14:42.254] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:14:54.530] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:14:54.530] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:14:54.530] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:14:54.530] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:14:54.530] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:14:57.124] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:14:57.124] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:14:57.125] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:14:57.125] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:14:57.125] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:15:00.624] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:15:00.624] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:15:00.624] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:15:01.162] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[17:15:01.162] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:15:01.162] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:15:12.260] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:15:12.261] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:15:12.261] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:15:12.261] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:15:12.261] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:15:24.540] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:15:24.540] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:15:24.540] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:15:24.540] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:15:24.540] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:15:27.134] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:15:27.134] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:15:27.134] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:15:27.134] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:15:27.134] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:15:30.627] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:15:30.627] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:15:30.628] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:15:42.271] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:15:42.271] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:15:42.271] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:15:42.271] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:15:42.271] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:15:54.551] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:15:54.551] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:15:54.552] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:15:54.552] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:15:54.552] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:15:57.143] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:15:57.143] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:15:57.143] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:15:57.143] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:15:57.143] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:16:00.629] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:16:00.629] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:16:00.629] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:16:01.167] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[17:16:01.167] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:16:01.167] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:16:12.280] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:16:12.280] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:16:12.281] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:16:12.281] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:16:12.281] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:16:24.563] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:16:24.563] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:16:24.563] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:16:24.563] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:16:24.563] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:16:27.152] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:16:27.152] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:16:27.152] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:16:27.152] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:16:27.152] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:16:30.634] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:16:30.634] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:16:30.634] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:16:42.293] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:16:42.293] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:16:42.293] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:16:42.294] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:16:42.294] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:16:54.571] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:16:54.571] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:16:54.571] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:16:54.571] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:16:54.571] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:16:57.160] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:16:57.160] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:16:57.160] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:16:57.160] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:16:57.160] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:17:00.635] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:17:00.635] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:17:00.635] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:17:01.172] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[17:17:01.172] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:17:01.172] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:17:12.299] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:17:12.299] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:17:12.299] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:17:12.299] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:17:12.299] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:17:24.582] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:17:24.582] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:17:24.582] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:17:24.582] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:17:24.582] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:17:27.170] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:17:27.170] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:17:27.170] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:17:27.170] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:17:27.170] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:17:30.641] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:17:30.641] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:17:30.641] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[17:17:30.642] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[17:17:30.642] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:17:30.642] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:17:30.642] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[17:17:42.306] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:17:42.306] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:17:42.306] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:17:42.306] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:17:42.306] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:17:54.592] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:17:54.592] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:17:54.592] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:17:54.592] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:17:54.592] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:17:57.176] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:17:57.176] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:17:57.176] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:17:57.176] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:17:57.176] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:18:00.643] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:18:00.643] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:18:00.643] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:18:01.177] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[17:18:01.177] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:18:01.177] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:18:12.314] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:18:12.314] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:18:12.314] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:18:12.314] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:18:12.314] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:18:24.602] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:18:24.602] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:18:24.602] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:18:24.602] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:18:24.602] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:18:27.186] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:18:27.186] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:18:27.186] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:18:27.186] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:18:27.186] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:18:30.647] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:18:30.648] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:18:30.648] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:18:42.326] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:18:42.326] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:18:42.326] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:18:42.326] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:18:42.326] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:18:54.611] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:18:54.611] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:18:54.611] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:18:54.611] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:18:54.611] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:18:57.196] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:18:57.196] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:18:57.196] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:18:57.196] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:18:57.196] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:19:00.648] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:19:00.648] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:19:00.648] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:19:01.182] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[17:19:01.182] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:19:01.182] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:19:12.335] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:19:12.335] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:19:12.335] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:19:12.335] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:19:12.335] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:19:24.624] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:19:24.624] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:19:24.624] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:19:24.624] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:19:24.624] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:19:27.203] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:19:27.203] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:19:27.203] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:19:27.203] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:19:27.203] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:19:30.651] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:19:30.651] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:19:30.651] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:19:42.345] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:19:42.345] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:19:42.345] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:19:42.345] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:19:42.345] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:19:54.636] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:19:54.636] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:19:54.636] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:19:54.636] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:19:54.636] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:19:57.209] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:19:57.209] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:19:57.209] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:19:57.209] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:19:57.209] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:20:00.656] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:20:00.656] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:20:00.656] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:20:00.799] DEBUG [Eureka-PeerNodesUpdater]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[17:20:00.799] WARN  [Eureka-PeerNodesUpdater]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[17:20:00.839] INFO  [ReplicaAwareInstanceRegistry - RenewalThresholdUpdater]c.n.e.r.PeerAwareInstanceRegistryImpl - Current renewal threshold is : 6
[17:20:01.186] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[17:20:01.186] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:20:01.186] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:20:12.358] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:20:12.358] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:20:12.358] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:20:12.358] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:20:12.358] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:20:24.646] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:20:24.646] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:20:24.646] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:20:24.646] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:20:24.646] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:20:27.214] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:20:27.214] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:20:27.214] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:20:27.214] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:20:27.214] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:20:30.661] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:20:30.661] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:20:30.661] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[17:20:30.661] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[17:20:30.662] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:20:30.662] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:20:30.662] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[17:20:42.366] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:20:42.366] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:20:42.366] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:20:42.366] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:20:42.366] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:20:54.657] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:20:54.657] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:20:54.657] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:20:54.657] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:20:54.657] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:20:57.223] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:20:57.223] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:20:57.223] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:20:57.223] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:20:57.223] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:21:00.666] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:21:00.666] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:21:00.666] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:21:01.190] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[17:21:01.190] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:21:01.190] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:21:12.375] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:21:12.375] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:21:12.375] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:21:12.375] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:21:12.375] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:21:24.667] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:21:24.667] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:21:24.667] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:21:24.667] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:21:24.667] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:21:27.234] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:21:27.234] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:21:27.234] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:21:27.234] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:21:27.234] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:21:30.668] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:21:30.668] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:21:30.668] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:21:42.383] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:21:42.383] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:21:42.383] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:21:42.383] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:21:42.383] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:21:54.677] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:21:54.677] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:21:54.677] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:21:54.677] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:21:54.677] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:21:57.243] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:21:57.243] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:21:57.243] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:21:57.243] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:21:57.243] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:22:00.669] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:22:00.669] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:22:00.669] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:22:01.193] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[17:22:01.193] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:22:01.193] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:22:12.396] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:22:12.396] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:22:12.396] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:22:12.396] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:22:12.396] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:22:24.686] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:22:24.686] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:22:24.686] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:22:24.686] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:22:24.687] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:22:27.249] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:22:27.249] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:22:27.250] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:22:27.250] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:22:27.250] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:22:30.670] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:22:30.670] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:22:30.670] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:22:42.410] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:22:42.410] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:22:42.410] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:22:42.410] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:22:42.410] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:22:54.700] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:22:54.700] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:22:54.700] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:22:54.700] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:22:54.700] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:22:57.255] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:22:57.255] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:22:57.255] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:22:57.255] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:22:57.255] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:23:00.671] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:23:00.671] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:23:00.671] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:23:01.198] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[17:23:01.199] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:23:01.199] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:23:12.422] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:23:12.422] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:23:12.422] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:23:12.422] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:23:12.422] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:23:24.710] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:23:24.710] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:23:24.711] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:23:24.711] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:23:24.711] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:23:27.265] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:23:27.265] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:23:27.265] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:23:27.265] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:23:27.265] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:23:30.672] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:23:30.672] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:23:30.672] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[17:23:30.673] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[17:23:30.673] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:23:30.673] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:23:30.673] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[17:23:42.432] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:23:42.432] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:23:42.432] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:23:42.432] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:23:42.432] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:23:54.721] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:23:54.721] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:23:54.721] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:23:54.721] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:23:54.721] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:23:57.276] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:23:57.276] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:23:57.276] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:23:57.276] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:23:57.276] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:24:00.678] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:24:00.678] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:24:00.678] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:24:01.202] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[17:24:01.203] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:24:01.203] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:24:12.444] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:24:12.444] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:24:12.444] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:24:12.444] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:24:12.444] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:24:24.731] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:24:24.731] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:24:24.731] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:24:24.731] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:24:24.731] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:24:27.285] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:24:27.285] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:24:27.285] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:24:27.285] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:24:27.285] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:24:30.682] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:24:30.682] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:24:30.682] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:24:42.454] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:24:42.454] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:24:42.454] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:24:42.454] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:24:42.455] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:24:54.738] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:24:54.739] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:24:54.739] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:24:54.739] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:24:54.739] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:24:57.295] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:24:57.295] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:24:57.295] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:24:57.295] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:24:57.295] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:25:00.684] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:25:00.685] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:25:00.685] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:25:01.207] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[17:25:01.207] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:25:01.208] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:25:12.463] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:25:12.463] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:25:12.463] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:25:12.463] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:25:12.463] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:25:24.750] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:25:24.750] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:25:24.750] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:25:24.750] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:25:24.750] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:25:27.302] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:25:27.302] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:25:27.302] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:25:27.302] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:25:27.302] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:25:30.686] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:25:30.686] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:25:30.686] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:25:42.472] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:25:42.472] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:25:42.472] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:25:42.472] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:25:42.472] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:25:54.759] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:25:54.760] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:25:54.760] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:25:54.760] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:25:54.760] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:25:57.310] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:25:57.310] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:25:57.310] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:25:57.310] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:25:57.310] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:26:00.687] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:26:01.067] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:26:01.067] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:26:01.211] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[17:26:01.211] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:26:01.211] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:26:12.481] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:26:12.481] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:26:12.481] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:26:12.481] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:26:12.481] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:26:24.769] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:26:24.769] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:26:24.769] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:26:24.769] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:26:24.769] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:26:27.316] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:26:27.316] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:26:27.316] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:26:27.316] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:26:27.316] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:26:30.692] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:26:30.692] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:26:30.692] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[17:26:30.692] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[17:26:30.692] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:26:30.692] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:26:30.692] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[17:26:42.490] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:26:42.490] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:26:42.491] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:26:42.491] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:26:42.491] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:26:54.777] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:26:54.777] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:26:54.777] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:26:54.777] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:26:54.777] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:26:57.323] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:26:57.323] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:26:57.323] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:26:57.323] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:26:57.323] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:27:00.697] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:27:00.697] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:27:00.697] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:27:01.217] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 5ms
[17:27:01.217] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:27:01.217] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:27:12.499] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:27:12.499] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:27:12.499] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:27:12.499] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:27:12.499] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:27:24.782] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:27:24.783] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:27:24.783] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:27:24.783] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:27:24.783] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:27:27.331] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:27:27.331] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:27:27.331] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:27:27.331] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:27:27.331] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:27:30.701] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:27:30.701] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:27:30.701] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:27:42.508] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:27:42.508] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:27:42.508] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:27:42.508] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:27:42.508] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:27:54.791] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:27:54.791] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:27:54.791] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:27:54.791] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:27:54.791] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:27:57.338] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:27:57.338] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:27:57.338] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:27:57.338] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:27:57.338] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:28:00.706] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:28:00.706] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:28:00.706] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:28:01.223] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[17:28:01.223] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:28:01.223] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:28:12.515] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:28:12.516] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:28:12.516] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:28:12.516] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:28:12.516] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:28:24.802] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:28:24.803] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:28:24.803] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:28:24.803] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:28:24.803] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:28:27.347] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:28:27.347] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:28:27.347] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:28:27.347] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:28:27.347] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:28:30.708] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:28:30.708] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:28:30.708] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:28:42.521] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:28:42.521] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:28:42.521] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:28:42.521] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:28:42.521] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:28:54.808] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:28:54.808] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:28:54.808] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:28:54.808] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:28:54.808] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:28:57.354] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:28:57.354] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:28:57.354] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:28:57.354] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:28:57.355] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:29:00.709] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:29:00.709] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:29:00.709] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:29:01.228] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[17:29:01.228] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:29:01.228] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:29:12.530] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:29:12.530] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:29:12.531] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:29:12.531] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:29:12.531] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:29:24.816] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:29:24.817] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:29:24.817] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:29:24.817] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:29:24.817] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:29:27.363] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:29:27.363] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:29:27.363] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:29:27.363] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:29:27.363] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:29:30.714] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:29:30.714] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:29:30.714] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[17:29:30.715] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[17:29:30.715] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:29:30.715] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:29:30.715] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[17:29:42.539] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:29:42.539] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:29:42.539] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:29:42.539] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:29:42.539] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:29:54.825] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:29:54.826] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:29:54.826] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:29:54.826] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:29:54.826] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:29:57.372] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:29:57.372] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:29:57.372] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:29:57.372] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:29:57.372] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:30:00.719] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:30:00.719] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:30:00.719] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:30:00.815] DEBUG [Eureka-PeerNodesUpdater]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[17:30:00.815] WARN  [Eureka-PeerNodesUpdater]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[17:30:01.233] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[17:30:01.233] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:30:01.233] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:30:12.547] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:30:12.548] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:30:12.548] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:30:12.548] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:30:12.548] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:30:24.832] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:30:24.833] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:30:24.833] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:30:24.833] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:30:24.833] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:30:27.381] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:30:27.381] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:30:27.381] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:30:27.381] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:30:27.381] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:30:30.724] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:30:30.724] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:30:30.724] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:30:42.557] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:30:42.557] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:30:42.557] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:30:42.557] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:30:42.557] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:30:54.839] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:30:54.839] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:30:54.839] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:30:54.840] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:30:54.840] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:30:57.389] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:30:57.389] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:30:57.390] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:30:57.390] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:30:57.390] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:31:00.727] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:31:00.727] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:31:00.727] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:31:01.236] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[17:31:01.236] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:31:01.236] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:31:12.566] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:31:12.566] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:31:12.566] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:31:12.566] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:31:12.566] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:31:24.848] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:31:24.848] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:31:24.848] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:31:24.848] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:31:24.848] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:31:27.397] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:31:27.397] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:31:27.397] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:31:27.398] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:31:27.398] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:31:30.731] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:31:30.731] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:31:30.731] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:31:42.573] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:31:42.573] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:31:42.573] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:31:42.573] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:31:42.573] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:31:54.856] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:31:54.856] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:31:54.856] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:31:54.856] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:31:54.856] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:31:57.405] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:31:57.405] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:31:57.405] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:31:57.405] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:31:57.405] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:32:00.736] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:32:00.736] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:32:00.736] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:32:01.240] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[17:32:01.240] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:32:01.240] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:32:12.582] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:32:12.582] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:32:12.582] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:32:12.582] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:32:12.582] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:32:24.862] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:32:24.862] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:32:24.862] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:32:24.862] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:32:24.862] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:32:27.412] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:32:27.412] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:32:27.412] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:32:27.412] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:32:27.412] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:32:30.741] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:32:30.741] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:32:30.741] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[17:32:30.741] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[17:32:30.741] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:32:30.741] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:32:30.742] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[17:32:42.588] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:32:42.588] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:32:42.589] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:32:42.589] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:32:42.589] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:32:54.872] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:32:54.872] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:32:54.873] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:32:54.873] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:32:54.873] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:32:57.422] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:32:57.422] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:32:57.422] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:32:57.422] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:32:57.422] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:33:00.746] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:33:00.746] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:33:00.746] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:33:01.246] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[17:33:01.246] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:33:01.246] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:33:12.598] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:33:12.598] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:33:12.598] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:33:12.598] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:33:12.598] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:33:24.881] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:33:24.881] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:33:24.882] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:33:24.882] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:33:24.882] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:33:27.427] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:33:27.427] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:33:27.427] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:33:27.427] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:33:27.427] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:33:30.751] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:33:30.751] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:33:30.751] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:33:42.608] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:33:42.608] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:33:42.608] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:33:42.608] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:33:42.608] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:33:54.892] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:33:54.892] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:33:54.892] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:33:54.892] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:33:54.892] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:33:57.432] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:33:57.432] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:33:57.432] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:33:57.432] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:33:57.432] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:34:00.754] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:34:00.754] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:34:00.754] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:34:01.248] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[17:34:01.248] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:34:01.248] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:34:12.614] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:34:12.614] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:34:12.614] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:34:12.614] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:34:12.614] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:34:24.897] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:34:24.897] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:34:24.897] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:34:24.897] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:34:24.897] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:34:27.440] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:34:27.440] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:34:27.440] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:34:27.440] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:34:27.440] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:34:30.759] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:34:30.759] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:34:30.759] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:34:42.623] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:34:42.624] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:34:42.624] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:34:42.624] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:34:42.624] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:34:54.907] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:34:54.907] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:34:54.907] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:34:54.907] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:34:54.907] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:34:57.447] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:34:57.447] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:34:57.447] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:34:57.447] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:34:57.447] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:35:00.761] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:35:00.761] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:35:00.761] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:35:00.866] INFO  [ReplicaAwareInstanceRegistry - RenewalThresholdUpdater]c.n.e.r.PeerAwareInstanceRegistryImpl - Current renewal threshold is : 6
[17:35:01.251] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[17:35:01.251] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:35:01.251] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:35:12.634] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:35:12.634] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:35:12.634] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:35:12.634] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:35:12.634] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:35:24.914] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:35:24.914] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:35:24.914] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:35:24.914] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:35:24.914] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:35:27.454] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:35:27.454] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:35:27.454] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:35:27.454] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:35:27.454] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:35:30.762] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:35:30.762] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:35:30.762] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[17:35:30.762] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[17:35:30.762] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:35:30.762] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:35:30.763] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[17:35:42.641] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:35:42.641] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:35:42.641] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:35:42.641] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:35:42.641] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:35:54.921] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:35:54.921] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:35:54.921] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:35:54.921] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:35:54.921] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:35:57.463] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:35:57.463] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:35:57.463] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:35:57.463] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:35:57.463] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:36:00.765] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:36:00.765] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:36:00.765] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:36:01.257] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[17:36:01.257] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:36:01.257] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:36:12.657] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:36:12.657] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:36:12.657] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:36:12.657] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:36:12.657] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:36:24.929] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:36:24.929] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:36:24.929] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:36:24.929] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:36:24.929] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:36:27.465] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:36:27.465] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:36:27.465] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:36:27.465] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:36:27.465] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:36:30.766] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:36:30.766] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:36:30.766] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:36:42.659] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:36:42.659] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:36:42.659] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:36:42.659] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:36:42.659] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:36:54.926] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:36:54.926] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:36:54.926] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:36:54.926] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:36:54.926] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:36:57.466] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:36:57.466] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:36:57.466] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:36:57.466] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:36:57.466] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:37:00.766] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:37:00.767] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:37:00.767] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:37:01.258] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 12ms
[17:37:01.258] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:37:01.258] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:37:12.667] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:37:12.667] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:37:12.667] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:37:12.667] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:37:12.667] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:37:24.931] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:37:24.931] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:37:24.931] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:37:24.931] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:37:24.932] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:37:27.473] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:37:27.473] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:37:27.473] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:37:27.473] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:37:27.473] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:37:30.766] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:37:30.766] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:37:30.766] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:37:42.672] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:37:42.672] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:37:42.672] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:37:42.672] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:37:42.672] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:37:54.939] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:37:54.939] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:37:54.939] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:37:54.939] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:37:54.939] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:37:57.481] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:37:57.482] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:37:57.482] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:37:57.482] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:37:57.482] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:38:00.771] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:38:00.771] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:38:00.771] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:38:01.262] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[17:38:01.262] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:38:01.262] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:38:12.679] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:38:12.679] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:38:12.679] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:38:12.679] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:38:12.679] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:38:24.946] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:38:24.946] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:38:24.946] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:38:24.946] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:38:24.946] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:38:27.488] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:38:27.488] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:38:27.488] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:38:27.488] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:38:27.488] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:38:30.776] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:38:30.776] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:38:30.777] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[17:38:30.777] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[17:38:30.777] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:38:30.777] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:38:30.777] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[17:38:42.685] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:38:42.685] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:38:42.685] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:38:42.685] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:38:42.686] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:38:55.090] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:38:55.090] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:38:55.090] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:38:55.090] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:38:55.090] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:38:57.493] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:38:57.493] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:38:57.493] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:38:57.493] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:38:57.493] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:39:00.780] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:39:00.780] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:39:00.780] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:39:01.264] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[17:39:01.264] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:39:01.264] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:39:12.691] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:39:12.691] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:39:12.691] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:39:12.691] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:39:12.691] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:39:25.099] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:39:25.099] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:39:25.099] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:39:25.099] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:39:25.099] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:39:27.502] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:39:27.502] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:39:27.502] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:39:27.502] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:39:27.502] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:39:30.785] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:39:30.785] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:39:30.785] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:39:42.727] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:39:42.727] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:39:42.727] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:39:42.727] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:39:42.727] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:39:55.107] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:39:55.107] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:39:55.107] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:39:55.107] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:39:55.107] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:39:57.511] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:39:57.511] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:39:57.511] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:39:57.511] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:39:57.511] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:40:00.790] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:40:00.790] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:40:00.790] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:40:00.820] DEBUG [Eureka-PeerNodesUpdater]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[17:40:00.820] WARN  [Eureka-PeerNodesUpdater]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[17:40:01.269] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[17:40:01.269] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:40:01.269] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:40:12.735] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:40:12.735] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:40:12.735] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:40:12.735] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:40:12.735] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:40:25.116] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:40:25.116] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:40:25.116] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:40:25.116] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:40:25.116] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:40:27.518] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:40:27.518] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:40:27.519] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:40:27.519] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:40:27.519] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:40:30.792] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:40:30.792] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:40:30.792] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:40:42.740] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:40:42.740] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:40:42.740] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:40:42.740] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:40:42.740] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:40:55.123] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:40:55.123] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:40:55.123] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:40:55.123] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:40:55.123] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:40:57.529] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:40:57.529] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:40:57.529] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:40:57.529] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:40:57.529] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:41:00.796] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:41:00.796] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:41:00.796] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:41:01.274] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[17:41:01.274] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:41:01.274] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:41:12.747] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:41:12.747] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:41:12.747] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:41:12.748] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:41:12.748] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:41:25.130] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:41:25.130] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:41:25.130] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:41:25.130] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:41:25.130] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:41:27.539] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:41:27.539] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:41:27.539] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:41:27.539] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:41:27.539] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:41:30.800] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:41:30.800] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:41:30.800] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[17:41:30.801] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[17:41:30.801] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:41:30.801] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:41:30.801] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[17:41:42.754] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:41:42.754] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:41:42.754] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:41:42.754] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:41:42.754] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:41:55.140] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:41:55.140] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:41:55.140] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:41:55.140] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:41:55.140] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:41:57.548] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:41:57.548] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:41:57.548] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:41:57.548] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:41:57.548] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:42:00.806] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:42:00.806] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:42:00.806] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:42:01.278] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[17:42:01.278] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:42:01.278] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:42:12.763] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:42:12.763] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:42:12.763] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:42:12.763] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:42:12.763] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:42:25.151] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:42:25.151] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:42:25.151] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:42:25.151] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:42:25.151] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:42:27.554] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:42:27.554] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:42:27.554] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:42:27.554] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:42:27.554] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:42:30.807] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:42:30.807] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:42:30.807] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:42:42.772] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:42:42.772] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:42:42.772] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:42:42.772] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:42:42.772] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:42:55.162] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:42:55.162] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:42:55.162] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:42:55.162] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:42:55.162] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:42:57.562] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:42:57.562] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:42:57.562] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:42:57.562] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:42:57.562] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:43:00.813] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:43:00.813] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:43:00.813] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:43:01.284] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[17:43:01.284] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:43:01.284] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:43:12.782] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:43:12.782] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:43:12.782] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:43:12.782] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:43:12.782] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:43:25.174] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:43:25.174] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:43:25.174] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:43:25.174] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:43:25.174] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:43:27.574] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:43:27.574] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:43:27.574] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:43:27.574] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:43:27.575] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:43:30.818] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:43:30.819] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:43:30.819] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:43:42.794] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:43:42.794] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:43:42.794] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:43:42.794] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:43:42.794] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:43:55.185] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:43:55.185] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:43:55.185] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:43:55.185] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:43:55.185] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:43:57.585] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:43:57.585] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:43:57.585] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:43:57.585] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:43:57.585] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:44:00.823] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:44:00.823] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:44:00.823] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:44:01.287] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[17:44:01.287] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:44:01.287] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:44:12.801] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:44:12.801] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:44:12.801] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:44:12.801] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:44:12.802] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:44:25.195] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:44:25.195] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:44:25.195] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:44:25.195] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:44:25.195] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:44:27.591] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:44:27.591] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:44:27.591] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:44:27.591] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:44:27.591] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:44:30.828] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:44:30.828] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:44:30.828] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[17:44:30.828] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[17:44:30.828] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:44:30.829] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:44:30.829] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[17:44:42.812] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:44:42.812] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:44:42.812] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:44:42.812] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:44:42.812] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:44:55.206] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:44:55.206] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:44:55.206] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:44:55.206] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:44:55.206] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:44:57.602] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:44:57.602] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:44:57.602] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:44:57.602] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:44:57.603] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:45:00.832] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:45:00.832] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:45:00.832] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:45:01.288] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[17:45:01.289] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:45:01.289] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:45:12.822] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:45:12.822] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:45:12.822] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:45:12.822] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:45:12.822] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:45:25.217] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:45:25.217] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:45:25.218] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:45:25.218] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:45:25.218] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:45:27.612] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:45:27.612] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:45:27.612] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:45:27.612] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:45:27.612] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:45:30.837] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:45:30.837] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:45:30.837] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:45:42.835] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:45:42.835] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:45:42.835] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:45:42.835] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:45:42.835] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:45:55.226] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:45:55.226] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:45:55.226] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:45:55.226] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:45:55.226] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:45:57.621] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:45:57.621] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:45:57.621] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:45:57.621] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:45:57.621] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:46:00.841] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:46:00.841] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:46:00.841] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:46:01.291] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[17:46:01.291] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:46:01.291] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:46:12.843] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:46:12.843] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:46:12.843] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:46:12.843] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:46:12.843] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:46:25.232] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:46:25.232] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:46:25.233] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:46:25.233] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:46:25.233] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:46:27.629] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:46:27.629] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:46:27.629] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:46:27.629] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:46:27.629] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:46:30.843] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:46:30.843] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:46:30.843] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:46:42.852] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:46:42.852] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:46:42.852] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:46:42.852] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:46:42.852] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:46:55.242] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:46:55.242] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:46:55.243] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:46:55.243] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:46:55.243] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:46:57.636] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:46:57.636] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:46:57.636] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:46:57.636] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:46:57.636] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:47:00.848] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:47:00.848] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:47:00.848] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:47:01.292] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[17:47:01.293] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:47:01.293] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:47:12.862] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:47:12.862] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:47:12.862] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:47:12.863] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:47:12.863] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:47:25.256] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:47:25.256] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:47:25.256] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:47:25.256] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:47:25.256] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:47:27.645] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:47:27.645] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:47:27.645] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:47:27.645] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:47:27.645] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:47:30.850] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:47:30.850] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:47:30.850] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[17:47:30.850] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[17:47:30.850] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:47:30.850] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:47:30.851] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[17:47:42.875] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:47:42.875] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:47:42.875] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:47:42.875] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:47:42.876] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:47:55.266] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:47:55.266] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:47:55.266] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:47:55.266] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:47:55.266] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:47:57.655] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:47:57.655] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:47:57.655] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:47:57.655] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:47:57.655] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:48:00.852] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:48:00.853] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:48:00.853] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:48:01.297] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[17:48:01.297] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:48:01.298] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:48:12.883] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:48:12.883] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:48:12.883] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:48:12.883] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:48:12.883] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:48:25.278] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:48:25.278] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:48:25.278] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:48:25.278] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:48:25.278] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:48:27.665] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:48:27.665] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:48:27.665] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:48:27.665] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:48:27.665] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:48:30.855] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:48:30.856] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:48:30.856] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:48:42.892] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:48:42.892] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:48:42.892] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:48:42.892] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:48:42.892] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:48:55.286] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:48:55.286] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:48:55.286] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:48:55.286] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:48:55.286] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:48:57.676] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:48:57.676] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:48:57.676] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:48:57.676] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:48:57.676] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:49:00.859] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:49:00.859] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:49:00.859] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:49:01.299] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[17:49:01.299] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:49:01.299] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:49:12.901] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:49:12.901] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:49:12.901] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:49:12.901] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:49:12.901] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:49:25.296] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:49:25.296] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:49:25.297] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:49:25.297] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:49:25.297] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:49:27.684] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:49:27.684] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:49:27.684] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:49:27.684] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:49:27.684] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:49:30.864] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:49:30.864] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:49:30.864] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:49:42.908] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:49:42.908] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:49:42.908] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:49:42.908] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:49:42.908] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:49:55.306] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:49:55.306] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:49:55.306] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:49:55.306] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:49:55.306] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:49:57.695] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:49:57.695] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:49:57.695] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:49:57.695] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:49:57.695] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:50:00.835] DEBUG [Eureka-PeerNodesUpdater]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[17:50:00.835] WARN  [Eureka-PeerNodesUpdater]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[17:50:00.866] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:50:00.867] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:50:00.867] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:50:00.877] INFO  [ReplicaAwareInstanceRegistry - RenewalThresholdUpdater]c.n.e.r.PeerAwareInstanceRegistryImpl - Current renewal threshold is : 6
[17:50:01.305] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[17:50:01.305] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:50:01.305] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:50:12.920] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:50:12.920] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:50:12.920] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:50:12.920] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:50:12.920] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:50:25.317] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:50:25.317] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:50:25.317] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:50:25.317] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:50:25.317] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:50:27.705] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:50:27.705] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:50:27.705] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:50:27.705] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:50:27.705] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:50:30.868] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:50:30.868] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:50:30.868] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[17:50:30.868] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[17:50:30.869] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:50:30.869] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:50:30.869] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[17:50:42.928] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:50:42.928] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:50:42.928] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:50:42.928] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:50:42.928] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:50:55.326] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:50:55.326] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:50:55.326] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:50:55.326] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:50:55.326] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:50:57.711] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:50:57.711] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:50:57.711] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:50:57.712] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:50:57.712] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:51:00.869] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:51:00.869] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:51:00.869] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:51:01.307] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[17:51:01.307] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:51:01.307] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:51:12.940] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:51:12.940] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:51:12.940] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:51:12.940] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:51:12.940] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:51:25.333] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:51:25.333] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:51:25.333] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:51:25.333] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:51:25.333] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:51:27.719] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:51:27.719] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:51:27.719] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:51:27.719] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:51:27.719] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:51:30.871] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:51:30.871] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:51:30.871] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:51:42.949] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:51:42.949] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:51:42.949] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:51:42.949] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:51:42.949] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:51:55.342] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:51:55.342] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:51:55.342] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:51:55.342] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:51:55.342] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:51:57.729] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:51:57.729] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:51:57.729] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:51:57.729] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:51:57.729] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:52:00.874] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:52:00.875] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:52:00.875] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:52:01.310] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[17:52:01.310] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:52:01.311] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:52:12.961] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:52:12.961] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:52:12.961] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:52:12.961] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:52:12.961] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:52:25.350] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:52:25.350] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:52:25.350] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:52:25.350] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:52:25.350] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:52:27.734] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:52:27.734] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:52:27.734] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:52:27.734] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:52:27.734] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:52:30.877] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:52:30.877] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:52:30.878] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:52:42.971] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:52:42.971] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:52:42.971] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:52:42.971] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:52:42.972] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:52:55.360] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:52:55.360] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:52:55.360] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:52:55.360] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:52:55.360] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:52:57.744] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:52:57.744] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:52:57.744] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:52:57.744] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:52:57.744] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:53:00.881] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:53:00.881] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:53:00.881] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:53:01.316] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[17:53:01.316] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:53:01.316] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:53:12.978] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:53:12.978] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:53:12.978] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:53:12.979] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:53:12.979] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:53:25.370] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:53:25.370] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:53:25.370] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:53:25.370] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:53:25.370] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:53:27.749] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:53:27.749] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:53:27.749] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:53:27.749] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:53:27.749] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:53:30.886] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:53:30.886] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:53:30.886] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[17:53:30.887] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[17:53:30.887] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:53:30.887] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:53:30.887] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[17:53:42.983] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:53:42.983] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:53:42.983] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:53:42.983] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:53:42.983] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:53:55.378] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:53:55.378] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:53:55.378] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:53:55.378] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:53:55.378] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:53:57.756] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:53:57.756] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:53:57.756] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:53:57.756] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:53:57.756] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:54:00.888] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:54:00.888] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:54:00.888] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:54:01.321] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[17:54:01.321] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:54:01.321] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:54:12.991] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:54:12.991] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:54:12.991] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:54:12.991] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:54:12.991] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:54:25.385] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:54:25.385] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:54:25.385] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:54:25.385] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:54:25.385] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:54:27.762] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:54:27.762] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:54:27.762] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:54:27.762] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:54:27.762] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:54:30.891] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:54:30.891] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:54:30.891] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:54:42.997] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:54:42.997] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:54:42.997] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:54:42.997] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:54:42.997] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:54:55.394] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:54:55.394] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:54:55.394] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:54:55.394] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:54:55.394] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:54:57.769] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:54:57.769] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:54:57.769] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:54:57.769] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:54:57.769] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:55:00.894] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:55:00.894] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:55:00.894] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:55:01.326] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[17:55:01.326] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:55:01.326] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:55:13.007] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:55:13.007] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:55:13.007] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:55:13.007] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:55:13.007] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:55:25.404] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:55:25.404] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:55:25.404] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:55:25.404] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:55:25.404] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:55:27.776] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:55:27.776] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:55:27.777] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:55:27.777] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:55:27.777] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:55:30.898] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:55:30.898] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:55:30.898] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:55:43.017] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:55:43.017] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:55:43.017] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:55:43.017] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:55:43.017] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:55:55.411] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:55:55.411] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:55:55.411] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:55:55.411] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:55:55.411] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:55:57.783] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:55:57.783] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:55:57.783] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:55:57.783] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:55:57.783] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:56:00.903] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:56:00.903] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:56:00.903] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:56:01.328] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[17:56:01.328] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:56:01.328] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:56:13.024] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:56:13.024] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:56:13.024] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:56:13.024] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:56:13.024] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:56:25.417] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:56:25.417] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:56:25.417] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:56:25.417] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:56:25.417] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:56:27.792] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:56:27.792] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:56:27.792] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:56:27.792] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:56:27.792] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:56:30.904] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:56:30.904] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:56:30.904] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[17:56:30.905] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[17:56:30.905] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:56:30.905] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:56:30.905] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[17:56:43.030] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:56:43.030] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:56:43.030] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:56:43.030] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:56:43.030] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:56:55.426] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:56:55.426] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:56:55.426] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:56:55.426] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:56:55.426] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:56:57.800] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:56:57.800] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:56:57.800] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:56:57.800] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:56:57.801] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:57:00.909] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:57:00.909] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:57:00.909] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:57:01.334] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[17:57:01.334] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:57:01.334] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:57:13.040] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:57:13.040] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:57:13.041] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:57:13.041] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:57:13.041] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:57:25.432] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:57:25.432] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:57:25.432] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:57:25.432] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:57:25.432] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:57:27.811] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:57:27.811] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:57:27.811] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:57:27.811] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:57:27.811] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:57:30.914] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:57:30.915] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:57:30.915] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:57:43.050] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:57:43.050] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:57:43.050] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:57:43.050] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:57:43.050] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:57:55.440] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:57:55.440] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:57:55.440] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:57:55.440] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:57:55.440] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:57:57.821] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:57:57.821] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:57:57.821] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:57:57.821] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:57:57.821] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:58:00.918] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:58:00.918] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:58:00.918] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:58:01.336] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[17:58:01.336] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:58:01.336] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:58:13.059] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:58:13.059] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:58:13.059] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:58:13.059] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:58:13.059] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:58:25.448] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:58:25.448] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:58:25.448] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:58:25.448] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:58:25.448] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:58:27.830] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:58:27.830] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:58:27.830] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:58:27.830] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:58:27.830] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:58:30.919] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:58:30.919] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:58:30.920] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:58:43.065] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:58:43.065] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:58:43.065] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:58:43.065] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:58:43.065] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:58:55.457] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:58:55.458] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:58:55.458] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:58:55.458] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:58:55.458] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:58:57.839] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:58:57.839] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:58:57.839] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:58:57.839] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:58:57.839] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:59:00.923] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:59:00.923] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:59:00.923] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:59:01.341] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[17:59:01.341] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[17:59:01.341] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[17:59:13.071] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:59:13.071] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:59:13.071] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:59:13.071] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:59:13.071] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:59:25.469] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:59:25.469] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:59:25.469] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:59:25.469] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:59:25.469] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:59:27.848] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:59:27.848] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:59:27.848] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:59:27.848] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:59:27.848] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[17:59:30.928] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[17:59:30.928] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[17:59:30.928] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[17:59:30.928] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[17:59:30.928] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[17:59:30.929] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:59:30.929] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[17:59:43.080] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[17:59:43.080] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:59:43.080] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:59:43.080] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[17:59:43.080] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[17:59:55.477] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[17:59:55.477] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:59:55.477] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:59:55.477] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[17:59:55.478] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[17:59:57.856] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[17:59:57.856] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[17:59:57.856] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[17:59:57.856] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[17:59:57.856] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:00:00.850] DEBUG [Eureka-PeerNodesUpdater]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[18:00:00.850] WARN  [Eureka-PeerNodesUpdater]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[18:00:00.933] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:00:00.933] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:00:00.933] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:00:01.347] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[18:00:01.347] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:00:01.347] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:00:13.085] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:00:13.085] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:00:13.085] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:00:13.085] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:00:13.085] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:00:25.996] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:00:25.996] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:00:25.996] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:00:25.996] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:00:25.996] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:00:27.866] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:00:27.866] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:00:27.866] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:00:27.866] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:00:27.866] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:00:30.938] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:00:30.938] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:00:30.938] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:00:43.095] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:00:43.095] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:00:43.095] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:00:43.095] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:00:43.095] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:00:56.005] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:00:56.005] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:00:56.005] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:00:56.005] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:00:56.005] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:00:57.875] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:00:57.875] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:00:57.875] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:00:57.875] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:00:57.875] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:01:00.943] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:01:00.943] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:01:00.943] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:01:01.353] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[18:01:01.353] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:01:01.353] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:01:13.103] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:01:13.104] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:01:13.104] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:01:13.104] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:01:13.104] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:01:26.013] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:01:26.013] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:01:26.013] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:01:26.013] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:01:26.013] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:01:27.885] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:01:27.885] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:01:27.885] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:01:27.885] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:01:27.885] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:01:30.949] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:01:30.949] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:01:30.949] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:01:43.113] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:01:43.113] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:01:43.113] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:01:43.113] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:01:43.113] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:01:56.022] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:01:56.022] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:01:56.022] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:01:56.022] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:01:56.022] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:01:57.892] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:01:57.892] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:01:57.892] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:01:57.892] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:01:57.892] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:02:00.952] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:02:00.952] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:02:00.952] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:02:01.355] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[18:02:01.355] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:02:01.355] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:02:13.122] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:02:13.122] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:02:13.123] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:02:13.123] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:02:13.123] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:02:26.030] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:02:26.030] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:02:26.030] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:02:26.030] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:02:26.030] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:02:27.898] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:02:27.898] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:02:27.898] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:02:27.898] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:02:27.898] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:02:30.955] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:02:30.955] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:02:30.955] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[18:02:30.956] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[18:02:30.956] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:02:30.956] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:02:30.956] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[18:02:43.130] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:02:43.130] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:02:43.130] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:02:43.130] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:02:43.130] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:02:56.038] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:02:56.039] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:02:56.039] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:02:56.039] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:02:56.039] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:02:57.906] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:02:57.906] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:02:57.906] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:02:57.906] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:02:57.906] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:03:00.960] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:03:00.960] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:03:00.960] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:03:01.362] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 5ms
[18:03:01.362] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:03:01.362] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:03:13.140] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:03:13.140] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:03:13.140] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:03:13.140] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:03:13.140] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:03:26.044] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:03:26.044] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:03:26.044] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:03:26.044] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:03:26.044] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:03:27.911] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:03:27.911] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:03:27.911] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:03:27.911] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:03:27.911] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:03:30.966] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:03:30.966] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:03:30.966] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:03:43.149] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:03:43.149] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:03:43.149] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:03:43.149] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:03:43.149] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:03:56.049] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:03:56.050] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:03:56.050] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:03:56.050] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:03:56.050] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:03:57.917] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:03:57.917] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:03:57.917] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:03:57.917] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:03:57.917] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:04:00.971] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:04:00.971] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:04:00.971] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:04:01.366] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[18:04:01.366] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:04:01.366] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:04:13.155] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:04:13.155] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:04:13.155] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:04:13.155] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:04:13.156] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:04:26.056] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:04:26.056] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:04:26.056] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:04:26.056] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:04:26.056] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:04:27.922] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:04:27.922] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:04:27.922] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:04:27.922] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:04:27.922] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:04:30.975] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:04:30.975] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:04:30.975] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:04:43.165] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:04:43.165] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:04:43.165] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:04:43.165] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:04:43.165] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:04:56.065] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:04:56.065] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:04:56.065] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:04:56.065] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:04:56.065] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:04:57.931] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:04:57.931] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:04:57.931] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:04:57.931] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:04:57.931] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:05:00.896] INFO  [ReplicaAwareInstanceRegistry - RenewalThresholdUpdater]c.n.e.r.PeerAwareInstanceRegistryImpl - Current renewal threshold is : 6
[18:05:00.980] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:05:00.980] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:05:00.980] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:05:01.371] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[18:05:01.372] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:05:01.372] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:05:13.171] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:05:13.171] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:05:13.171] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:05:13.171] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:05:13.171] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:05:26.072] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:05:26.072] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:05:26.073] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:05:26.073] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:05:26.073] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:05:27.940] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:05:27.940] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:05:27.940] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:05:27.940] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:05:27.940] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:05:30.984] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:05:30.984] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:05:30.984] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[18:05:30.984] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[18:05:30.985] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:05:30.985] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:05:30.985] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[18:05:43.180] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:05:43.180] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:05:43.180] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:05:43.180] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:05:43.180] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:05:56.081] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:05:56.081] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:05:56.081] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:05:56.082] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:05:56.082] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:05:57.947] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:05:57.947] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:05:57.947] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:05:57.947] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:05:57.947] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:06:00.989] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:06:00.989] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:06:00.989] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:06:01.376] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[18:06:01.377] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:06:01.377] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:06:13.189] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:06:13.189] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:06:13.189] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:06:13.189] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:06:13.189] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:06:26.085] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:06:26.085] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:06:26.085] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:06:26.085] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:06:26.085] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:06:27.951] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:06:27.951] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:06:27.951] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:06:27.951] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:06:27.951] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:06:30.989] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:06:30.989] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:06:30.989] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:06:43.183] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:06:43.183] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:06:43.183] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:06:43.183] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:06:43.183] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:06:56.081] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:06:56.081] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:06:56.081] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:06:56.081] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:06:56.081] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:06:57.946] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:06:57.946] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:06:57.946] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:06:57.946] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:06:57.946] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:07:00.990] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:07:00.990] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:07:00.990] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:07:01.377] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 14ms
[18:07:01.377] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:07:01.377] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:07:13.185] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:07:13.185] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:07:13.185] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:07:13.185] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:07:13.185] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:07:26.086] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:07:26.086] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:07:26.086] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:07:26.087] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:07:26.087] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:07:27.953] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:07:27.953] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:07:27.953] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:07:27.953] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:07:27.953] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:07:30.994] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:07:30.994] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:07:30.994] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:07:43.194] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:07:43.194] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:07:43.194] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:07:43.194] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:07:43.194] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:07:56.094] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:07:56.094] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:07:56.094] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:07:56.094] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:07:56.094] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:07:57.961] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:07:57.961] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:07:57.961] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:07:57.961] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:07:57.961] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:08:01.000] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:08:01.000] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:08:01.000] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:08:01.379] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[18:08:01.379] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:08:01.379] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:08:13.204] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:08:13.204] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:08:13.204] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:08:13.204] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:08:13.204] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:08:26.171] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:08:26.171] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:08:26.171] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:08:26.171] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:08:26.171] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:08:27.968] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:08:27.968] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:08:27.968] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:08:27.968] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:08:27.968] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:08:31.003] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:08:31.003] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:08:31.003] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[18:08:31.003] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[18:08:31.003] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:08:31.003] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:08:31.004] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[18:08:43.213] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:08:43.213] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:08:43.213] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:08:43.213] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:08:43.213] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:08:56.180] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:08:56.180] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:08:56.180] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:08:56.180] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:08:56.180] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:08:57.978] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:08:57.978] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:08:57.978] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:08:57.978] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:08:57.979] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:09:01.008] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:09:01.008] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:09:01.008] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:09:01.384] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[18:09:01.384] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:09:01.384] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:09:13.220] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:09:13.220] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:09:13.220] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:09:13.220] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:09:13.220] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:09:26.190] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:09:26.190] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:09:26.190] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:09:26.190] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:09:26.190] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:09:27.986] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:09:27.986] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:09:27.986] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:09:27.987] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:09:27.987] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:09:31.012] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:09:31.012] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:09:31.012] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:09:43.231] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:09:43.231] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:09:43.231] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:09:43.231] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:09:43.231] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:09:56.195] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:09:56.195] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:09:56.195] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:09:56.196] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:09:56.196] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:09:57.997] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:09:57.997] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:09:57.997] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:09:57.997] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:09:57.997] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:10:00.852] DEBUG [Eureka-PeerNodesUpdater]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[18:10:00.852] WARN  [Eureka-PeerNodesUpdater]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[18:10:01.016] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:10:01.016] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:10:01.016] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:10:01.386] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[18:10:01.386] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:10:01.386] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:10:13.243] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:10:13.243] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:10:13.243] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:10:13.243] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:10:13.243] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:10:26.203] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:10:26.203] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:10:26.203] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:10:26.203] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:10:26.203] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:10:28.006] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:10:28.006] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:10:28.006] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:10:28.006] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:10:28.006] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:10:31.019] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:10:31.019] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:10:31.020] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:10:43.256] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:10:43.256] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:10:43.256] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:10:43.256] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:10:43.256] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:10:56.214] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:10:56.214] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:10:56.214] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:10:56.214] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:10:56.214] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:10:58.012] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:10:58.012] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:10:58.012] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:10:58.012] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:10:58.012] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:11:01.020] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:11:01.020] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:11:01.020] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:11:01.390] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[18:11:01.390] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:11:01.390] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:11:13.265] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:11:13.265] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:11:13.266] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:11:13.266] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:11:13.266] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:11:26.224] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:11:26.224] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:11:26.224] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:11:26.224] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:11:26.224] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:11:28.021] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:11:28.021] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:11:28.022] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:11:28.022] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:11:28.022] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:11:31.022] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:11:31.023] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:11:31.023] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[18:11:31.023] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[18:11:31.023] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:11:31.023] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:11:31.023] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[18:11:43.273] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:11:43.273] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:11:43.273] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:11:43.273] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:11:43.273] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:11:56.232] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:11:56.232] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:11:56.232] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:11:56.232] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:11:56.232] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:11:58.027] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:11:58.027] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:11:58.027] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:11:58.027] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:11:58.028] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:12:01.027] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:12:01.027] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:12:01.027] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:12:01.394] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[18:12:01.394] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:12:01.394] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:12:13.284] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:12:13.284] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:12:13.284] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:12:13.284] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:12:13.284] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:12:26.238] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:12:26.238] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:12:26.238] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:12:26.238] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:12:26.239] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:12:28.038] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:12:28.038] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:12:28.039] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:12:28.039] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:12:28.039] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:12:31.030] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:12:31.030] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:12:31.030] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:12:43.293] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:12:43.293] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:12:43.293] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:12:43.293] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:12:43.293] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:12:56.246] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:12:56.247] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:12:56.247] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:12:56.247] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:12:56.247] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:12:58.046] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:12:58.046] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:12:58.046] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:12:58.046] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:12:58.046] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:13:01.033] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:13:01.033] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:13:01.033] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:13:01.398] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[18:13:01.398] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:13:01.398] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:13:13.301] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:13:13.301] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:13:13.301] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:13:13.301] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:13:13.301] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:13:26.257] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:13:26.257] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:13:26.257] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:13:26.257] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:13:26.257] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:13:28.055] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:13:28.055] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:13:28.055] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:13:28.055] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:13:28.055] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:13:31.034] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:13:31.034] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:13:31.034] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:13:43.312] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:13:43.312] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:13:43.312] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:13:43.312] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:13:43.312] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:13:56.265] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:13:56.265] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:13:56.265] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:13:56.265] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:13:56.265] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:13:58.063] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:13:58.063] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:13:58.064] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:13:58.064] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:13:58.064] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:14:01.038] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:14:01.038] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:14:01.038] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:14:01.403] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[18:14:01.403] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:14:01.403] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:14:13.320] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:14:13.320] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:14:13.320] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:14:13.320] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:14:13.320] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:14:26.277] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:14:26.277] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:14:26.277] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:14:26.277] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:14:26.277] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:14:28.074] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:14:28.074] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:14:28.074] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:14:28.074] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:14:28.074] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:14:31.043] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:14:31.043] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:14:31.044] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[18:14:31.044] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[18:14:31.044] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:14:31.044] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:14:31.045] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[18:14:43.331] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:14:43.331] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:14:43.331] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:14:43.331] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:14:43.331] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:14:56.289] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:14:56.289] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:14:56.289] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:14:56.289] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:14:56.289] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:14:58.085] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:14:58.085] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:14:58.085] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:14:58.085] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:14:58.085] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:15:01.045] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:15:01.045] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:15:01.045] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:15:01.408] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[18:15:01.409] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:15:01.409] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:15:13.341] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:15:13.341] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:15:13.341] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:15:13.341] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:15:13.341] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:15:26.300] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:15:26.300] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:15:26.300] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:15:26.300] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:15:26.300] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:15:28.096] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:15:28.096] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:15:28.096] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:15:28.096] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:15:28.096] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:15:31.050] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:15:31.050] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:15:31.050] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:15:43.350] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:15:43.350] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:15:43.350] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:15:43.350] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:15:43.350] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:15:56.310] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:15:56.310] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:15:56.310] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:15:56.310] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:15:56.310] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:15:58.104] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:15:58.104] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:15:58.104] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:15:58.104] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:15:58.104] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:16:01.056] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:16:01.056] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:16:01.056] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:16:01.413] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[18:16:01.413] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:16:01.413] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:16:13.360] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:16:13.360] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:16:13.360] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:16:13.360] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:16:13.360] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:16:26.316] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:16:26.316] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:16:26.316] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:16:26.316] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:16:26.316] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:16:28.112] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:16:28.112] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:16:28.112] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:16:28.112] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:16:28.112] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:16:31.060] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:16:31.060] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:16:31.060] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:16:43.368] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:16:43.368] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:16:43.368] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:16:43.368] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:16:43.368] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:16:56.324] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:16:56.325] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:16:56.325] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:16:56.325] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:16:56.325] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:16:58.117] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:16:58.117] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:16:58.117] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:16:58.117] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:16:58.117] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:17:01.060] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:17:01.060] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:17:01.060] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:17:01.414] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[18:17:01.414] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:17:01.414] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:17:13.376] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:17:13.376] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:17:13.376] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:17:13.376] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:17:13.376] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:17:26.333] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:17:26.333] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:17:26.333] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:17:26.333] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:17:26.333] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:17:29.242] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:17:29.242] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:17:29.242] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:17:29.242] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:17:29.242] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:17:31.063] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:17:31.064] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:17:31.064] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[18:17:31.064] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[18:17:31.064] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:17:31.064] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:17:31.065] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[18:17:43.383] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:17:43.383] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:17:43.383] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:17:43.383] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:17:43.383] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:17:56.342] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:17:56.342] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:17:56.342] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:17:56.342] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:17:56.342] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:17:59.303] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:17:59.303] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:17:59.303] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:17:59.303] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:17:59.303] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:18:01.064] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:18:01.064] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:18:01.064] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:18:01.418] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[18:18:01.418] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:18:01.418] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:18:13.394] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:18:13.394] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:18:13.394] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:18:13.395] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:18:13.395] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:18:26.348] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:18:26.348] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:18:26.348] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:18:26.348] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:18:26.348] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:18:29.311] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:18:29.311] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:18:29.311] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:18:29.311] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:18:29.311] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:18:31.070] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:18:31.070] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:18:31.070] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:18:43.404] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:18:43.405] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:18:43.405] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:18:43.405] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:18:43.405] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:18:56.358] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:18:56.358] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:18:56.358] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:18:56.358] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:18:56.358] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:18:59.321] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:18:59.321] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:18:59.321] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:18:59.321] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:18:59.321] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:19:01.076] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:19:01.076] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:19:01.076] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:19:01.420] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[18:19:01.421] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:19:01.421] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:19:13.413] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:19:13.413] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:19:13.413] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:19:13.413] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:19:13.414] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:19:26.367] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:19:26.367] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:19:26.367] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:19:26.367] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:19:26.367] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:19:29.331] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:19:29.331] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:19:29.331] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:19:29.331] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:19:29.331] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:19:31.078] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:19:31.078] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:19:31.078] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:19:43.424] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:19:43.424] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:19:43.424] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:19:43.424] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:19:43.424] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:19:56.376] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:19:56.376] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:19:56.377] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:19:56.377] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:19:56.377] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:19:59.340] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:19:59.340] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:19:59.340] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:19:59.340] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:19:59.340] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:20:00.866] DEBUG [Eureka-PeerNodesUpdater]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[18:20:00.866] WARN  [Eureka-PeerNodesUpdater]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[18:20:00.900] INFO  [ReplicaAwareInstanceRegistry - RenewalThresholdUpdater]c.n.e.r.PeerAwareInstanceRegistryImpl - Current renewal threshold is : 6
[18:20:01.083] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:20:01.083] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:20:01.083] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:20:01.426] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[18:20:01.426] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:20:01.426] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:20:13.431] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:20:13.431] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:20:13.431] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:20:13.431] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:20:13.431] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:20:26.386] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:20:26.386] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:20:26.386] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:20:26.386] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:20:26.386] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:20:29.346] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:20:29.347] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:20:29.347] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:20:29.347] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:20:29.347] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:20:31.087] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:20:31.087] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:20:31.087] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[18:20:31.087] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[18:20:31.088] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:20:31.088] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:20:31.088] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[18:20:43.442] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:20:43.442] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:20:43.442] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:20:43.442] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:20:43.442] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:20:56.397] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:20:56.397] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:20:56.397] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:20:56.397] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:20:56.397] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:20:59.356] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:20:59.356] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:20:59.357] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:20:59.357] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:20:59.357] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:21:01.089] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:21:01.089] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:21:01.089] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:21:01.432] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[18:21:01.432] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:21:01.432] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:21:13.455] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:21:13.455] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:21:13.455] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:21:13.455] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:21:13.455] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:21:26.397] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:21:26.397] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:21:26.397] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:21:26.397] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:21:26.397] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:21:29.352] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:21:29.352] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:21:29.352] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:21:29.352] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:21:29.352] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:21:31.091] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:21:31.091] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:21:31.091] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:21:43.444] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:21:43.444] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:21:43.444] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:21:43.444] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:21:43.444] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:21:56.390] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:21:56.390] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:21:56.391] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:21:56.391] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:21:56.391] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:21:59.347] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:21:59.347] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:21:59.348] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:21:59.348] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:21:59.348] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:22:01.092] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:22:01.092] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:22:01.092] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:22:01.432] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 23ms
[18:22:01.432] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:22:01.432] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:22:13.449] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:22:13.449] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:22:13.449] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:22:13.449] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:22:13.449] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:22:26.399] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:22:26.399] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:22:26.399] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:22:26.399] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:22:26.399] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:22:29.353] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:22:29.353] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:22:29.353] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:22:29.353] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:22:29.353] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:22:31.094] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:22:31.094] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:22:31.094] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:22:43.458] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:22:43.458] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:22:43.458] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:22:43.458] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:22:43.458] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:22:56.407] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:22:56.407] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:22:56.408] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:22:56.408] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:22:56.408] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:22:59.361] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:22:59.361] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:22:59.361] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:22:59.361] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:22:59.361] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:23:01.097] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:23:01.097] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:23:01.097] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:23:01.433] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[18:23:01.433] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:23:01.433] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:23:13.471] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:23:13.471] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:23:13.471] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:23:13.471] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:23:13.471] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:23:26.419] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:23:26.419] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:23:26.419] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:23:26.419] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:23:26.419] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:23:29.370] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:23:29.370] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:23:29.370] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:23:29.370] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:23:29.370] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:23:31.100] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:23:31.100] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:23:31.100] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[18:23:31.100] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[18:23:31.100] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:23:31.100] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:23:31.101] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[18:23:43.479] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:23:43.479] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:23:43.479] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:23:43.480] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:23:43.480] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:23:56.429] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:23:56.429] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:23:56.430] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:23:56.430] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:23:56.430] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:23:59.379] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:23:59.380] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:23:59.380] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:23:59.380] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:23:59.380] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:24:01.105] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:24:01.105] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:24:01.105] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:24:01.435] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[18:24:01.435] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:24:01.435] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:24:13.490] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:24:13.490] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:24:13.490] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:24:13.490] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:24:13.490] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:24:26.438] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:24:26.438] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:24:26.438] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:24:26.438] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:24:26.438] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:24:29.390] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:24:29.390] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:24:29.390] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:24:29.390] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:24:29.390] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:24:31.107] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:24:31.107] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:24:31.107] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:24:43.500] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:24:43.500] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:24:43.500] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:24:43.500] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:24:43.500] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:24:56.446] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:24:56.446] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:24:56.446] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:24:56.446] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:24:56.446] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:24:59.402] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:24:59.402] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:24:59.402] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:24:59.402] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:24:59.402] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:25:01.109] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:25:01.110] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:25:01.110] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:25:01.436] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[18:25:01.436] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:25:01.436] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:25:13.511] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:25:13.511] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:25:13.511] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:25:13.511] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:25:13.511] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:25:26.457] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:25:26.457] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:25:26.457] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:25:26.457] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:25:26.457] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:25:29.411] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:25:29.411] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:25:29.411] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:25:29.411] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:25:29.411] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:25:31.110] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:25:31.110] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:25:31.110] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:25:43.521] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:25:43.521] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:25:43.521] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:25:43.521] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:25:43.521] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:25:56.468] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:25:56.468] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:25:56.468] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:25:56.468] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:25:56.468] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:25:59.422] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:25:59.422] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:25:59.423] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:25:59.423] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:25:59.423] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:26:01.112] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:26:01.112] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:26:01.112] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:26:01.443] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 5ms
[18:26:01.443] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:26:01.443] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:26:13.532] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:26:13.532] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:26:13.532] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:26:13.532] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:26:13.532] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:26:26.480] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:26:26.480] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:26:26.480] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:26:26.480] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:26:26.480] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:26:29.429] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:26:29.429] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:26:29.429] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:26:29.429] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:26:29.429] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:26:31.117] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:26:31.130] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:26:31.131] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[18:26:31.131] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[18:26:31.131] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:26:31.132] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:26:31.133] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[18:26:43.544] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:26:43.544] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:26:43.544] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:26:43.544] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:26:43.544] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:26:56.487] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:26:56.487] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:26:56.487] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:26:56.487] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:26:56.487] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:26:59.437] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:26:59.437] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:26:59.437] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:26:59.437] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:26:59.437] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:27:01.120] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:27:01.120] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:27:01.120] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:27:01.448] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[18:27:01.449] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:27:01.449] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:27:13.555] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:27:13.555] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:27:13.555] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:27:13.555] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:27:13.555] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:27:26.498] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:27:26.498] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:27:26.498] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:27:26.498] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:27:26.498] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:27:29.445] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:27:29.445] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:27:29.445] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:27:29.445] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:27:29.445] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:27:31.124] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:27:31.124] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:27:31.124] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:27:43.564] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:27:43.565] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:27:43.565] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:27:43.565] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:27:43.565] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:27:56.506] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:27:56.506] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:27:56.506] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:27:56.506] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:27:56.506] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:27:59.454] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:27:59.454] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:27:59.454] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:27:59.454] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:27:59.454] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:28:01.125] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:28:01.125] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:28:01.125] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:28:01.453] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[18:28:01.453] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:28:01.453] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:28:13.572] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:28:13.572] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:28:13.572] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:28:13.572] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:28:13.572] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:28:26.516] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:28:26.516] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:28:26.516] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:28:26.517] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:28:26.517] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:28:29.461] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:28:29.461] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:28:29.461] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:28:29.461] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:28:29.461] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:28:31.130] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:28:31.130] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:28:31.130] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:28:43.580] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:28:43.580] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:28:43.580] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:28:43.580] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:28:43.580] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:28:56.528] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:28:56.528] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:28:56.528] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:28:56.528] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:28:56.528] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:28:59.473] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:28:59.473] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:28:59.474] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:28:59.474] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:28:59.474] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:29:01.133] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:29:01.133] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:29:01.133] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:29:01.456] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[18:29:01.456] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:29:01.456] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:29:13.586] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:29:13.586] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:29:13.586] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:29:13.586] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:29:13.586] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:29:26.536] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:29:26.536] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:29:26.536] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:29:26.536] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:29:26.536] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:29:29.481] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:29:29.481] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:29:29.481] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:29:29.481] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:29:29.481] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:29:31.138] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:29:31.138] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:29:31.138] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[18:29:31.138] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[18:29:31.138] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:29:43.596] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:29:43.596] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:29:43.596] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:29:43.596] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:29:43.596] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:29:56.545] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:29:56.545] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:29:56.545] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:29:56.545] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:29:56.545] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:29:59.485] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:29:59.485] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:29:59.485] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:29:59.485] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:29:59.485] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:30:00.855] DEBUG [Eureka-PeerNodesUpdater]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[18:30:00.855] WARN  [Eureka-PeerNodesUpdater]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[18:30:01.142] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:30:01.142] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:30:01.142] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:30:01.142] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:30:01.142] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[18:30:01.458] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[18:30:01.459] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:30:01.459] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:30:13.607] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:30:13.607] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:30:13.607] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:30:13.607] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:30:13.607] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:30:26.553] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:30:26.554] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:30:26.554] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:30:26.554] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:30:26.554] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:30:29.493] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:30:29.493] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:30:29.493] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:30:29.493] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:30:29.493] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:30:31.143] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:30:31.143] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:30:31.143] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:30:43.616] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:30:43.616] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:30:43.616] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:30:43.616] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:30:43.616] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:30:56.563] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:30:56.563] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:30:56.563] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:30:56.563] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:30:56.563] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:30:59.501] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:30:59.501] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:30:59.501] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:30:59.501] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:30:59.501] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:31:01.145] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:31:01.145] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:31:01.145] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:31:01.463] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[18:31:01.463] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:31:01.463] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:31:13.626] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:31:13.626] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:31:13.626] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:31:13.626] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:31:13.626] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:31:26.570] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:31:26.570] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:31:26.570] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:31:26.570] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:31:26.570] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:31:29.507] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:31:29.507] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:31:29.507] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:31:29.507] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:31:29.507] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:31:31.146] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:31:31.146] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:31:31.146] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:31:43.634] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:31:43.634] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:31:43.634] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:31:43.634] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:31:43.634] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:31:56.582] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:31:56.582] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:31:56.582] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:31:56.582] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:31:56.582] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:31:59.515] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:31:59.515] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:31:59.515] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:31:59.515] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:31:59.515] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:32:01.147] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:32:01.147] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:32:01.147] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:32:01.465] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[18:32:01.465] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:32:01.465] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:32:13.643] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:32:13.643] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:32:13.643] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:32:13.643] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:32:13.643] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:32:26.590] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:32:26.590] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:32:26.590] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:32:26.590] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:32:26.590] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:32:29.524] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:32:29.524] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:32:29.525] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:32:29.525] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:32:29.525] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:32:31.150] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:32:31.150] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:32:31.150] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[18:32:31.150] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[18:32:31.150] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:32:43.653] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:32:43.653] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:32:43.653] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:32:43.653] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:32:43.653] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:32:56.599] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:32:56.599] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:32:56.600] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:32:56.600] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:32:56.600] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:32:59.533] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:32:59.533] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:32:59.533] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:32:59.533] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:32:59.533] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:33:01.152] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:33:01.152] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:33:01.152] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:33:01.152] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:33:01.153] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[18:33:01.469] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[18:33:01.470] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:33:01.470] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:33:13.661] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:33:13.661] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:33:13.661] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:33:13.661] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:33:13.661] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:33:26.611] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:33:26.611] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:33:26.611] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:33:26.611] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:33:26.611] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:33:29.543] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:33:29.543] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:33:29.544] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:33:29.544] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:33:29.544] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:33:31.153] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:33:31.153] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:33:31.153] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:33:43.670] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:33:43.670] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:33:43.670] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:33:43.670] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:33:43.670] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:33:56.621] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:33:56.621] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:33:56.621] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:33:56.621] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:33:56.621] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:33:59.554] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:33:59.554] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:33:59.554] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:33:59.554] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:33:59.554] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:34:01.157] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:34:01.158] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:34:01.158] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:34:01.470] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[18:34:01.470] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:34:01.470] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:34:13.680] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:34:13.680] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:34:13.680] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:34:13.680] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:34:13.680] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:34:26.632] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:34:26.633] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:34:26.633] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:34:26.633] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:34:26.633] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:34:29.562] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:34:29.562] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:34:29.562] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:34:29.562] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:34:29.562] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:34:31.161] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:34:31.161] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:34:31.161] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:34:43.686] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:34:43.686] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:34:43.687] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:34:43.687] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:34:43.687] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:34:56.642] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:34:56.642] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:34:56.642] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:34:56.642] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:34:56.643] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:34:59.568] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:34:59.568] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:34:59.569] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:34:59.569] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:34:59.569] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:35:00.901] INFO  [ReplicaAwareInstanceRegistry - RenewalThresholdUpdater]c.n.e.r.PeerAwareInstanceRegistryImpl - Current renewal threshold is : 6
[18:35:01.162] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:35:01.162] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:35:01.162] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:35:01.474] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[18:35:01.474] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:35:01.474] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:35:13.692] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:35:13.692] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:35:13.692] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:35:13.692] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:35:13.693] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:35:26.649] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:35:26.650] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:35:26.650] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:35:26.650] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:35:26.650] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:35:29.576] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:35:29.576] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:35:29.576] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:35:29.576] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:35:29.576] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:35:31.164] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:35:31.164] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:35:31.164] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[18:35:31.164] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[18:35:31.164] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:35:43.702] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:35:43.702] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:35:43.703] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:35:43.703] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:35:43.703] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:35:56.659] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:35:56.659] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:35:56.659] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:35:56.659] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:35:56.659] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:35:59.586] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:35:59.586] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:35:59.586] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:35:59.586] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:35:59.586] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:36:01.166] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:36:01.166] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:36:01.166] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:36:01.166] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:36:01.167] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[18:36:01.478] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[18:36:01.478] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:36:01.478] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:36:13.712] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:36:13.712] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:36:13.712] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:36:13.712] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:36:13.712] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:36:26.666] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:36:26.666] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:36:26.666] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:36:26.666] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:36:26.666] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:36:29.591] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:36:29.591] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:36:29.592] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:36:29.592] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:36:29.592] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:36:31.167] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:36:31.167] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:36:31.167] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:36:43.717] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:36:43.717] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:36:43.717] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:36:43.717] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:36:43.717] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:36:56.670] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:36:56.670] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:36:56.671] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:36:56.671] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:36:56.671] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:36:59.597] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:36:59.597] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:36:59.597] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:36:59.597] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:36:59.597] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:37:01.167] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:37:01.167] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:37:01.167] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:37:01.482] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[18:37:01.482] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:37:01.482] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:37:13.722] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:37:13.722] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:37:13.722] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:37:13.722] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:37:13.722] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:37:26.674] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:37:26.674] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:37:26.674] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:37:26.674] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:37:26.674] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:37:29.603] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:37:29.603] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:37:29.603] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:37:29.603] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:37:29.603] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:37:31.169] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:37:31.169] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:37:31.169] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:37:43.731] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:37:43.731] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:37:43.731] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:37:43.731] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:37:43.731] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:37:56.683] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:37:56.683] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:37:56.683] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:37:56.683] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:37:56.683] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:37:59.612] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:37:59.612] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:37:59.612] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:37:59.612] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:37:59.612] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:38:01.172] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:38:01.172] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:38:01.172] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:38:01.488] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 5ms
[18:38:01.488] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:38:01.488] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:38:13.740] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:38:13.740] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:38:13.740] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:38:13.740] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:38:13.740] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:38:26.687] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:38:26.687] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:38:26.687] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:38:26.687] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:38:26.687] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:38:29.623] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:38:29.623] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:38:29.623] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:38:29.623] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:38:29.623] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:38:31.176] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:38:31.176] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:38:31.176] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[18:38:31.176] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[18:38:31.177] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:38:43.748] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:38:43.748] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:38:43.749] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:38:43.749] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:38:43.749] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:38:56.691] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:38:56.691] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:38:56.691] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:38:56.691] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:38:56.691] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:38:59.632] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:38:59.632] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:38:59.633] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:38:59.633] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:38:59.633] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:39:01.179] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:39:01.179] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:39:01.179] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:39:01.180] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:39:01.180] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[18:39:01.493] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[18:39:01.493] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:39:01.493] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:39:13.758] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:39:13.758] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:39:13.758] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:39:13.758] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:39:13.758] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:39:26.696] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:39:26.696] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:39:26.696] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:39:26.696] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:39:26.696] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:39:29.640] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:39:29.640] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:39:29.641] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:39:29.641] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:39:29.641] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:39:31.184] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:39:31.184] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:39:31.184] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:39:43.767] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:39:43.767] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:39:43.767] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:39:43.767] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:39:43.767] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:39:56.700] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:39:56.700] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:39:56.700] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:39:56.700] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:39:56.700] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:39:59.651] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:39:59.651] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:39:59.651] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:39:59.651] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:39:59.651] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:40:00.869] DEBUG [Eureka-PeerNodesUpdater]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[18:40:00.869] WARN  [Eureka-PeerNodesUpdater]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[18:40:01.186] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:40:01.186] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:40:01.186] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:40:01.498] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[18:40:01.499] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:40:01.499] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:40:13.775] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:40:13.775] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:40:13.775] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:40:13.775] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:40:13.775] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:40:26.704] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:40:26.704] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:40:26.704] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:40:26.704] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:40:26.704] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:40:29.657] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:40:29.657] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:40:29.657] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:40:29.657] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:40:29.657] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:40:31.190] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:40:31.190] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:40:31.190] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:40:43.781] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:40:43.781] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:40:43.781] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:40:43.781] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:40:43.782] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:40:56.710] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:40:56.710] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:40:56.710] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:40:56.710] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:40:56.710] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:40:59.665] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:40:59.665] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:40:59.665] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:40:59.665] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:40:59.665] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:41:01.192] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:41:01.192] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:41:01.192] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:41:01.501] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[18:41:01.502] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:41:01.502] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:41:13.793] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:41:13.793] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:41:13.793] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:41:13.793] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:41:13.793] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:41:26.718] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:41:26.718] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:41:26.718] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:41:26.718] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:41:26.718] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:41:29.671] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:41:29.671] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:41:29.671] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:41:29.671] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:41:29.671] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:41:31.197] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:41:31.197] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:41:31.198] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[18:41:31.198] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[18:41:31.198] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:41:43.802] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:41:43.802] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:41:43.803] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:41:43.803] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:41:43.803] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:41:56.727] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:41:56.727] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:41:56.727] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:41:56.727] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:41:56.727] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:41:59.675] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:41:59.675] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:41:59.675] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:41:59.675] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:41:59.675] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:42:01.203] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:42:01.203] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:42:01.203] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:42:01.203] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:42:01.203] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[18:42:01.506] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[18:42:01.507] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:42:01.507] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:42:13.812] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:42:13.812] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:42:13.812] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:42:13.812] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:42:13.812] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:42:26.734] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:42:26.734] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:42:26.734] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:42:26.734] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:42:26.734] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:42:29.679] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:42:29.679] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:42:29.679] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:42:29.679] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:42:29.679] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:42:31.207] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:42:31.207] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:42:31.207] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:42:43.819] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:42:43.820] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:42:43.820] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:42:43.820] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:42:43.820] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:42:56.746] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:42:56.746] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:42:56.746] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:42:56.746] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:42:56.746] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:42:59.683] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:42:59.683] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:42:59.683] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:42:59.683] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:42:59.683] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:43:01.210] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:43:01.210] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:43:01.210] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:43:01.509] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[18:43:01.509] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:43:01.509] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:43:13.828] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:43:13.828] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:43:13.828] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:43:13.828] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:43:13.828] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:43:26.752] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:43:26.752] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:43:26.752] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:43:26.752] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:43:26.752] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:43:29.692] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:43:29.692] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:43:29.692] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:43:29.692] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:43:29.692] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:43:31.215] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:43:31.215] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:43:31.215] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:43:43.838] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:43:43.838] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:43:43.838] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:43:43.838] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:43:43.838] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:43:56.763] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:43:56.763] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:43:56.763] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:43:56.763] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:43:56.763] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:43:59.696] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:43:59.696] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:43:59.696] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:43:59.696] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:43:59.696] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:44:01.217] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:44:01.217] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:44:01.217] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:44:01.515] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 5ms
[18:44:01.515] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:44:01.515] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:44:13.847] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:44:13.847] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:44:13.848] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:44:13.848] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:44:13.848] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:44:26.775] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:44:26.775] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:44:26.775] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:44:26.775] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:44:26.776] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:44:29.704] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:44:29.704] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:44:29.704] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:44:29.704] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:44:29.704] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:44:31.216] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:44:31.216] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:44:31.217] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[18:44:31.217] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[18:44:31.217] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:44:43.859] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:44:43.859] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:44:43.859] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:44:43.859] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:44:43.859] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:44:56.786] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:44:56.786] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:44:56.786] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:44:56.786] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:44:56.786] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:44:59.713] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:44:59.713] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:44:59.713] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:44:59.713] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:44:59.713] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:45:01.217] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:45:01.217] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:45:01.217] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:45:01.217] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:45:01.217] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[18:45:01.517] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[18:45:01.518] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:45:01.518] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:45:13.871] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:45:13.871] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:45:13.871] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:45:13.871] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:45:13.871] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:45:26.793] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:45:26.793] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:45:26.793] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:45:26.793] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:45:26.793] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:45:29.720] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:45:29.720] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:45:29.720] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:45:29.720] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:45:29.720] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:45:31.218] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:45:31.218] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:45:31.218] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:45:43.882] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:45:43.882] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:45:43.882] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:45:43.882] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:45:43.882] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:45:56.801] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:45:56.801] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:45:56.801] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:45:56.801] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:45:56.801] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:45:59.728] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:45:59.728] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:45:59.728] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:45:59.728] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:45:59.728] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:46:01.224] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:46:01.224] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:46:01.224] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:46:01.519] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[18:46:01.519] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:46:01.519] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:46:13.891] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:46:13.891] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:46:13.891] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:46:13.892] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:46:13.892] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:46:26.812] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:46:26.812] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:46:26.812] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:46:26.813] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:46:26.813] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:46:29.740] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:46:29.740] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:46:29.740] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:46:29.740] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:46:29.740] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:46:31.229] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:46:31.229] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:46:31.229] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:46:43.903] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:46:43.904] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:46:43.904] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:46:43.904] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:46:43.904] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:46:56.819] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:46:56.819] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:46:56.819] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:46:56.819] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:46:56.819] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:46:59.747] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:46:59.747] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:46:59.747] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:46:59.747] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:46:59.747] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:47:01.233] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:47:01.233] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:47:01.233] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:47:01.525] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[18:47:01.525] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:47:01.525] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:47:13.914] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:47:13.914] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:47:13.914] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:47:13.914] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:47:13.914] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:47:26.832] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:47:26.832] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:47:26.833] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:47:26.833] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:47:26.833] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:47:29.753] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:47:29.753] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:47:29.753] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:47:29.753] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:47:29.753] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:47:31.238] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:47:31.238] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:47:31.238] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[18:47:31.239] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[18:47:31.239] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:47:43.923] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:47:43.923] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:47:43.923] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:47:43.923] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:47:43.923] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:47:56.838] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:47:56.838] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:47:56.838] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:47:56.838] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:47:56.838] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:47:59.761] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:47:59.761] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:47:59.761] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:47:59.761] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:47:59.761] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:48:01.243] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:48:01.243] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:48:01.244] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:48:01.244] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:48:01.244] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[18:48:01.531] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[18:48:01.531] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:48:01.531] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:48:13.931] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:48:13.931] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:48:13.931] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:48:13.931] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:48:13.931] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:48:26.849] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:48:26.849] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:48:26.849] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:48:26.849] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:48:26.850] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:48:29.767] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:48:29.767] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:48:29.767] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:48:29.767] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:48:29.767] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:48:31.247] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:48:31.247] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:48:31.247] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:48:43.941] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:48:43.941] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:48:43.941] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:48:43.941] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:48:43.941] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:48:56.856] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:48:56.856] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:48:56.856] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:48:56.856] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:48:56.856] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:48:59.777] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:48:59.777] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:48:59.777] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:48:59.777] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:48:59.777] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:49:01.250] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:49:01.250] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:49:01.250] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:49:01.532] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[18:49:01.532] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:49:01.532] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:49:13.948] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:49:13.948] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:49:13.948] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:49:13.948] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:49:13.948] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:49:26.866] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:49:26.866] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:49:26.866] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:49:26.866] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:49:26.866] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:49:29.786] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:49:29.786] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:49:29.786] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:49:29.786] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:49:29.786] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:49:31.256] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:49:31.256] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:49:31.256] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:49:43.955] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:49:43.955] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:49:43.955] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:49:43.955] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:49:43.955] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:49:56.874] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:49:56.875] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:49:56.875] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:49:56.875] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:49:56.875] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:49:59.795] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:49:59.795] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:49:59.795] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:49:59.795] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:49:59.795] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:50:00.880] DEBUG [Eureka-PeerNodesUpdater]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[18:50:00.880] WARN  [Eureka-PeerNodesUpdater]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[18:50:00.920] INFO  [ReplicaAwareInstanceRegistry - RenewalThresholdUpdater]c.n.e.r.PeerAwareInstanceRegistryImpl - Current renewal threshold is : 6
[18:50:01.261] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:50:01.261] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:50:01.261] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:50:01.536] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[18:50:01.536] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:50:01.536] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:50:13.965] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:50:13.965] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:50:13.965] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:50:13.965] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:50:13.965] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:50:26.882] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:50:26.882] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:50:26.883] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:50:26.883] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:50:26.883] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:50:29.801] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:50:29.801] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:50:29.801] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:50:29.801] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:50:29.801] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:50:31.262] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:50:31.263] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:50:31.263] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[18:50:31.263] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[18:50:31.263] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:50:43.975] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:50:43.975] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:50:43.975] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:50:43.975] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:50:43.975] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:50:56.891] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:50:56.891] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:50:56.891] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:50:56.891] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:50:56.891] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:50:59.809] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:50:59.809] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:50:59.809] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:50:59.809] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:50:59.809] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:51:01.266] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:51:01.266] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:51:01.266] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:51:01.266] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:51:01.267] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[18:51:01.542] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[18:51:01.542] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:51:01.542] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:51:14.718] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:51:14.718] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:51:14.718] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:51:14.718] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:51:14.718] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:51:26.901] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:51:26.901] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:51:26.901] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:51:26.901] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:51:26.901] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:51:29.815] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:51:29.815] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:51:29.815] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:51:29.815] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:51:29.815] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:51:31.267] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:51:31.267] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:51:31.267] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:51:44.723] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:51:44.723] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:51:44.723] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:51:44.723] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:51:44.723] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:51:56.906] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:51:56.906] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:51:56.906] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:51:56.907] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:51:56.907] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:51:59.823] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:51:59.823] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:51:59.823] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:51:59.823] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:51:59.823] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:52:01.270] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:52:01.270] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:52:01.270] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:52:01.542] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[18:52:01.543] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:52:01.543] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:52:14.730] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:52:14.730] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:52:14.730] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:52:14.730] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:52:14.730] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:52:26.926] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:52:26.926] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:52:26.926] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:52:26.926] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:52:26.926] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:52:29.831] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:52:29.831] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:52:29.831] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:52:29.831] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:52:29.831] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:52:31.275] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:52:31.275] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:52:31.275] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:52:44.737] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:52:44.737] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:52:44.737] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:52:44.737] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:52:44.737] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:52:56.937] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:52:56.937] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:52:56.937] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:52:56.937] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:52:56.937] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:52:59.836] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:52:59.836] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:52:59.836] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:52:59.837] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:52:59.837] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:53:01.278] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:53:01.278] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:53:01.278] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:53:01.545] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[18:53:01.545] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:53:01.545] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:53:14.748] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:53:14.749] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:53:14.749] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:53:14.749] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:53:14.749] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:53:26.948] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:53:26.948] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:53:26.948] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:53:26.948] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:53:26.948] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:53:29.848] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:53:29.848] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:53:29.848] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:53:29.848] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:53:29.848] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:53:31.283] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:53:31.283] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:53:31.284] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[18:53:31.284] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[18:53:31.284] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:53:44.758] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:53:44.758] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:53:44.758] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:53:44.758] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:53:44.758] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:53:56.959] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:53:56.959] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:53:56.959] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:53:56.959] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:53:56.959] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:53:59.859] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:53:59.859] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:53:59.859] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:53:59.859] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:53:59.859] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:54:01.285] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:54:01.285] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:54:01.285] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:54:01.286] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:54:01.286] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[18:54:01.546] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[18:54:01.547] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:54:01.547] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:54:14.769] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:54:14.769] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:54:14.769] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:54:14.769] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:54:14.769] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:54:26.969] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:54:26.969] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:54:26.969] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:54:26.969] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:54:26.969] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:54:29.870] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:54:29.870] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:54:29.870] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:54:29.870] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:54:29.870] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:54:31.290] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:54:31.290] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:54:31.290] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:54:44.778] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:54:44.778] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:54:44.778] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:54:44.778] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:54:44.778] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:54:56.979] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:54:56.979] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:54:56.979] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:54:56.979] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:54:56.979] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:54:59.880] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:54:59.880] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:54:59.880] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:54:59.880] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:54:59.880] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:55:01.295] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:55:01.295] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:55:01.295] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:55:01.550] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[18:55:01.551] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:55:01.551] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:55:14.791] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:55:14.791] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:55:14.791] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:55:14.791] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:55:14.791] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:55:26.991] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:55:26.991] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:55:26.992] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:55:26.992] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:55:26.992] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:55:29.889] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:55:29.890] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:55:29.890] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:55:29.890] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:55:29.890] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:55:31.296] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:55:31.296] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:55:31.296] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:55:44.801] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:55:44.801] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:55:44.801] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:55:44.801] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:55:44.802] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:55:57.002] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:55:57.002] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:55:57.002] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:55:57.002] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:55:57.002] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:55:59.902] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:55:59.902] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:55:59.902] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:55:59.902] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:55:59.902] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:56:01.301] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:56:01.301] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:56:01.301] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:56:01.554] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[18:56:01.554] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:56:01.554] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:56:14.812] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:56:14.812] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:56:14.813] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:56:14.813] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:56:14.813] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:56:27.007] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:56:27.007] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:56:27.007] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:56:27.007] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:56:27.007] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:56:29.912] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:56:29.912] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:56:29.912] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:56:29.912] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:56:29.912] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:56:31.307] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:56:31.307] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:56:31.307] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[18:56:31.307] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[18:56:31.307] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:56:44.821] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:56:44.821] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:56:44.821] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:56:44.821] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:56:44.821] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:56:57.012] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:56:57.012] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:56:57.012] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:56:57.012] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:56:57.012] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:56:59.922] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:56:59.922] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:56:59.922] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:56:59.922] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:56:59.923] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:57:01.308] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:57:01.309] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:57:01.309] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:57:01.309] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:57:01.309] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[18:57:01.557] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[18:57:01.557] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:57:01.557] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:57:14.832] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:57:14.832] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:57:14.832] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:57:14.832] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:57:14.832] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:57:27.020] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:57:27.020] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:57:27.020] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:57:27.020] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:57:27.020] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:57:29.929] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:57:29.929] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:57:29.929] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:57:29.929] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:57:29.929] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:57:31.312] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:57:31.312] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:57:31.312] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:57:44.843] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:57:44.844] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:57:44.844] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:57:44.844] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:57:44.844] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:57:57.031] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:57:57.031] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:57:57.031] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:57:57.031] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:57:57.031] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:57:59.940] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:57:59.940] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:57:59.940] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:57:59.940] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:57:59.940] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:58:01.312] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:58:01.312] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:58:01.312] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:58:01.562] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[18:58:01.562] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:58:01.562] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:58:14.853] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:58:14.854] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:58:14.854] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:58:14.854] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:58:14.854] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:58:27.039] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:58:27.039] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:58:27.039] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:58:27.039] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:58:27.039] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:58:29.951] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:58:29.951] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:58:29.951] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:58:29.951] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:58:29.951] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:58:31.314] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:58:31.314] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:58:31.314] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:58:44.864] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:58:44.864] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:58:44.864] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:58:44.864] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:58:44.864] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:58:57.047] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:58:57.047] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:58:57.047] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:58:57.047] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:58:57.047] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:58:59.958] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:58:59.958] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:58:59.958] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:58:59.958] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:58:59.958] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:59:01.319] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:59:01.319] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:59:01.319] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:59:01.568] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[18:59:01.568] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[18:59:01.568] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[18:59:14.875] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:59:14.875] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:59:14.875] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:59:14.875] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:59:14.875] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:59:27.055] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:59:27.055] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:59:27.055] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:59:27.055] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:59:27.055] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:59:29.967] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:59:29.967] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:59:29.967] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:59:29.967] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:59:29.967] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[18:59:31.324] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[18:59:31.324] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[18:59:31.324] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[18:59:31.324] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[18:59:31.324] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[18:59:44.886] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[18:59:44.886] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:59:44.886] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:59:44.886] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[18:59:44.886] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[18:59:57.062] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[18:59:57.062] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:59:57.063] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:59:57.063] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[18:59:57.063] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[18:59:59.976] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[18:59:59.976] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[18:59:59.976] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[18:59:59.976] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[18:59:59.976] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:00:00.891] DEBUG [Eureka-PeerNodesUpdater]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[19:00:00.892] WARN  [Eureka-PeerNodesUpdater]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[19:00:01.329] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:00:01.329] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:00:01.329] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:00:01.329] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:00:01.330] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[19:00:01.570] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[19:00:01.570] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:00:01.570] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:00:14.897] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:00:14.897] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:00:14.897] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:00:14.897] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:00:14.897] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:00:27.072] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:00:27.072] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:00:27.072] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:00:27.072] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:00:27.072] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:00:29.985] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:00:29.985] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:00:29.985] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:00:29.985] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:00:29.985] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:00:31.331] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:00:31.331] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:00:31.331] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:00:44.907] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:00:44.907] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:00:44.907] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:00:44.907] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:00:44.907] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:00:57.078] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:00:57.078] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:00:57.078] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:00:57.078] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:00:57.078] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:00:59.995] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:00:59.995] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:00:59.995] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:00:59.995] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:00:59.995] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:01:01.334] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:01:01.335] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:01:01.335] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:01:01.575] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[19:01:01.576] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:01:01.576] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:01:14.917] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:01:14.917] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:01:14.917] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:01:14.917] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:01:14.917] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:01:27.087] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:01:27.087] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:01:27.087] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:01:27.087] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:01:27.087] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:01:30.003] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:01:30.004] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:01:30.004] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:01:30.004] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:01:30.004] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:01:31.337] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:01:31.338] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:01:31.338] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:01:44.926] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:01:44.926] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:01:44.926] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:01:44.926] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:01:44.926] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:01:57.096] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:01:57.096] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:01:57.096] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:01:57.096] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:01:57.096] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:02:00.008] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:02:00.008] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:02:00.008] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:02:00.008] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:02:00.008] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:02:01.338] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:02:01.338] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:02:01.338] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:02:01.576] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[19:02:01.577] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:02:01.577] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:02:14.935] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:02:14.935] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:02:14.935] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:02:14.935] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:02:14.935] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:02:27.104] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:02:27.104] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:02:27.104] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:02:27.104] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:02:27.105] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:02:30.017] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:02:30.017] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:02:30.017] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:02:30.017] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:02:30.017] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:02:31.343] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:02:31.343] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:02:31.343] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[19:02:31.343] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[19:02:31.344] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:02:44.944] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:02:44.944] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:02:44.944] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:02:44.944] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:02:44.944] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:02:57.112] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:02:57.112] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:02:57.112] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:02:57.112] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:02:57.112] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:03:00.022] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:03:00.022] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:03:00.022] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:03:00.022] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:03:00.022] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:03:01.345] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:03:01.345] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:03:01.345] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:03:01.345] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:03:01.345] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[19:03:01.577] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[19:03:01.577] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:03:01.577] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:03:14.953] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:03:14.953] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:03:14.954] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:03:14.954] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:03:14.954] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:03:27.123] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:03:27.123] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:03:27.123] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:03:27.123] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:03:27.123] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:03:30.031] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:03:30.031] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:03:30.031] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:03:30.031] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:03:30.031] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:03:31.349] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:03:31.350] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:03:31.350] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:03:44.962] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:03:44.962] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:03:44.962] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:03:44.962] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:03:44.962] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:03:57.131] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:03:57.131] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:03:57.131] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:03:57.131] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:03:57.131] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:04:00.038] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:04:00.038] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:04:00.038] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:04:00.038] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:04:00.038] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:04:01.352] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:04:01.352] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:04:01.352] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:04:01.583] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[19:04:01.583] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:04:01.583] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:04:14.969] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:04:14.969] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:04:14.969] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:04:14.969] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:04:14.969] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:04:27.138] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:04:27.138] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:04:27.139] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:04:27.139] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:04:27.139] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:04:30.047] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:04:30.047] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:04:30.048] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:04:30.048] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:04:30.048] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:04:31.355] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:04:31.355] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:04:31.355] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:04:44.980] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:04:44.980] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:04:44.980] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:04:44.980] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:04:44.980] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:04:57.145] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:04:57.145] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:04:57.145] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:04:57.145] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:04:57.145] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:05:00.055] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:05:00.055] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:05:00.055] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:05:00.055] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:05:00.055] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:05:00.938] INFO  [ReplicaAwareInstanceRegistry - RenewalThresholdUpdater]c.n.e.r.PeerAwareInstanceRegistryImpl - Current renewal threshold is : 6
[19:05:01.359] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:05:01.359] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:05:01.359] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:05:01.585] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[19:05:01.586] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:05:01.586] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:05:14.987] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:05:14.987] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:05:14.987] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:05:14.987] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:05:14.987] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:05:27.155] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:05:27.155] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:05:27.155] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:05:27.155] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:05:27.155] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:05:30.063] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:05:30.063] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:05:30.063] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:05:30.063] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:05:30.063] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:05:31.360] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:05:31.360] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:05:31.360] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[19:05:31.360] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[19:05:31.360] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:05:44.993] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:05:44.993] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:05:44.993] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:05:44.993] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:05:44.993] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:05:57.165] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:05:57.165] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:05:57.165] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:05:57.165] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:05:57.165] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:06:00.070] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:06:00.070] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:06:00.070] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:06:00.070] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:06:00.070] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:06:01.361] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:06:01.361] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:06:01.361] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:06:01.361] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:06:01.362] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[19:06:01.590] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[19:06:01.590] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:06:01.590] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:06:15.004] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:06:15.004] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:06:15.004] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:06:15.004] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:06:15.004] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:06:27.167] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:06:27.167] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:06:27.167] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:06:27.168] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:06:27.168] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:06:30.064] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:06:30.064] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:06:30.064] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:06:30.064] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:06:30.064] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:06:31.361] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:06:31.361] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:06:31.361] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:06:44.993] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:06:44.993] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:06:44.993] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:06:44.993] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:06:44.994] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:06:57.158] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:06:57.158] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:06:57.158] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:06:57.158] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:06:57.158] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:07:00.059] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:07:00.059] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:07:00.059] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:07:00.059] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:07:00.060] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:07:01.361] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:07:01.361] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:07:01.361] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:07:01.593] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 26ms
[19:07:01.593] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:07:01.593] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:07:14.996] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:07:14.996] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:07:14.996] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:07:14.996] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:07:14.997] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:07:27.166] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:07:27.166] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:07:27.166] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:07:27.166] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:07:27.166] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:07:30.063] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:07:30.063] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:07:30.063] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:07:30.063] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:07:30.063] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:07:31.363] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:07:31.363] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:07:31.363] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:07:45.005] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:07:45.005] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:07:45.005] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:07:45.005] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:07:45.005] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:07:57.176] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:07:57.176] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:07:57.176] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:07:57.176] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:07:57.176] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:08:00.073] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:08:00.073] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:08:00.073] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:08:00.073] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:08:00.073] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:08:01.364] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:08:01.364] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:08:01.364] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:08:01.596] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[19:08:01.597] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:08:01.597] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:08:15.014] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:08:15.014] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:08:15.014] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:08:15.014] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:08:15.014] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:08:27.188] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:08:27.188] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:08:27.188] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:08:27.188] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:08:27.188] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:08:30.084] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:08:30.084] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:08:30.084] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:08:30.084] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:08:30.084] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:08:31.369] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:08:31.369] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:08:31.369] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[19:08:31.369] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[19:08:31.370] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:08:45.024] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:08:45.024] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:08:45.024] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:08:45.024] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:08:45.024] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:08:57.195] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:08:57.195] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:08:57.195] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:08:57.195] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:08:57.195] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:09:00.091] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:09:00.091] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:09:00.092] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:09:00.092] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:09:00.092] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:09:01.373] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:09:01.373] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:09:01.373] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:09:01.373] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:09:01.373] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[19:09:01.597] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[19:09:01.597] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:09:01.597] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:09:15.117] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:09:15.118] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:09:15.118] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:09:15.118] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:09:15.118] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:09:27.203] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:09:27.203] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:09:27.203] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:09:27.203] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:09:27.203] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:09:30.099] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:09:30.099] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:09:30.099] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:09:30.099] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:09:30.099] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:09:31.374] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:09:31.374] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:09:31.374] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:09:45.122] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:09:45.122] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:09:45.122] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:09:45.122] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:09:45.122] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:09:57.215] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:09:57.215] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:09:57.216] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:09:57.216] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:09:57.216] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:10:00.104] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:10:00.104] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:10:00.104] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:10:00.105] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:10:00.105] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:10:00.879] DEBUG [Eureka-PeerNodesUpdater]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[19:10:00.879] WARN  [Eureka-PeerNodesUpdater]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[19:10:01.379] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:10:01.379] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:10:01.379] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:10:01.598] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[19:10:01.598] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:10:01.599] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:10:15.129] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:10:15.129] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:10:15.129] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:10:15.129] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:10:15.129] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:10:27.225] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:10:27.225] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:10:27.225] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:10:27.225] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:10:27.225] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:10:30.110] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:10:30.110] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:10:30.110] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:10:30.110] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:10:30.110] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:10:31.382] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:10:31.382] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:10:31.382] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:10:45.140] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:10:45.140] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:10:45.140] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:10:45.140] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:10:45.140] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:10:57.235] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:10:57.235] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:10:57.235] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:10:57.235] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:10:57.235] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:11:00.115] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:11:00.115] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:11:00.115] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:11:00.115] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:11:00.115] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:11:01.386] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:11:01.386] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:11:01.386] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:11:01.599] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[19:11:01.599] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:11:01.599] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:11:15.153] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:11:15.153] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:11:15.153] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:11:15.153] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:11:15.153] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:11:27.243] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:11:27.243] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:11:27.243] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:11:27.243] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:11:27.243] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:11:30.120] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:11:30.120] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:11:30.121] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:11:30.121] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:11:30.121] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:11:31.387] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:11:31.387] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:11:31.387] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[19:11:31.388] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[19:11:31.388] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:11:45.166] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:11:45.166] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:11:45.166] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:11:45.166] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:11:45.166] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:11:57.254] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:11:57.254] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:11:57.254] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:11:57.254] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:11:57.254] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:12:00.133] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:12:00.133] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:12:00.133] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:12:00.133] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:12:00.133] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:12:01.388] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:12:01.388] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:12:01.389] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:12:01.389] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:12:01.389] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[19:12:01.605] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[19:12:01.605] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:12:01.605] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:12:15.172] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:12:15.172] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:12:15.172] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:12:15.172] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:12:15.172] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:12:27.264] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:12:27.264] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:12:27.264] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:12:27.264] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:12:27.264] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:12:30.143] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:12:30.143] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:12:30.143] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:12:30.143] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:12:30.143] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:12:31.394] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:12:31.394] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:12:31.394] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:12:45.182] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:12:45.182] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:12:45.182] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:12:45.182] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:12:45.182] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:12:57.271] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:12:57.271] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:12:57.271] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:12:57.271] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:12:57.271] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:13:00.150] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:13:00.150] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:13:00.150] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:13:00.150] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:13:00.150] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:13:01.398] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:13:01.398] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:13:01.398] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:13:01.610] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[19:13:01.610] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:13:01.610] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:13:15.189] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:13:15.189] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:13:15.189] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:13:15.189] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:13:15.189] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:13:27.279] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:13:27.280] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:13:27.280] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:13:27.280] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:13:27.280] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:13:30.159] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:13:30.159] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:13:30.159] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:13:30.159] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:13:30.159] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:13:31.400] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:13:31.401] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:13:31.401] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:13:45.196] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:13:45.196] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:13:45.196] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:13:45.196] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:13:45.196] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:13:57.287] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:13:57.287] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:13:57.287] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:13:57.287] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:13:57.287] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:14:00.165] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:14:00.165] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:14:00.165] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:14:00.165] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:14:00.165] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:14:01.403] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:14:01.403] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:14:01.403] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:14:01.616] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[19:14:01.616] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:14:01.616] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:14:15.204] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:14:15.204] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:14:15.205] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:14:15.205] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:14:15.205] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:14:27.293] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:14:27.293] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:14:27.293] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:14:27.293] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:14:27.293] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:14:30.174] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:14:30.174] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:14:30.174] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:14:30.174] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:14:30.174] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:14:31.408] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:14:31.408] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:14:31.408] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[19:14:31.408] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[19:14:31.409] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:14:45.214] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:14:45.214] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:14:45.214] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:14:45.214] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:14:45.214] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:14:57.300] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:14:57.300] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:14:57.301] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:14:57.301] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:14:57.301] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:15:00.185] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:15:00.185] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:15:00.185] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:15:00.185] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:15:00.185] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:15:01.410] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:15:01.410] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:15:01.410] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:15:01.410] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:15:01.410] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[19:15:01.620] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[19:15:01.620] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:15:01.620] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:15:15.224] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:15:15.224] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:15:15.224] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:15:15.224] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:15:15.224] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:15:27.308] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:15:27.308] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:15:27.308] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:15:27.308] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:15:27.308] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:15:30.192] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:15:30.193] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:15:30.193] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:15:30.193] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:15:30.193] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:15:31.414] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:15:31.414] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:15:31.414] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:15:45.235] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:15:45.235] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:15:45.235] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:15:45.235] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:15:45.235] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:15:57.314] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:15:57.314] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:15:57.315] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:15:57.315] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:15:57.315] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:16:00.201] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:16:00.201] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:16:00.201] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:16:00.201] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:16:00.201] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:16:01.417] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:16:01.417] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:16:01.417] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:16:01.625] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[19:16:01.625] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:16:01.625] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:16:15.244] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:16:15.244] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:16:15.244] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:16:15.244] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:16:15.244] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:16:27.322] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:16:27.322] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:16:27.322] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:16:27.322] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:16:27.322] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:16:30.206] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:16:30.206] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:16:30.206] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:16:30.206] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:16:30.206] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:16:31.421] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:16:31.421] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:16:31.421] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:16:45.253] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:16:45.253] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:16:45.253] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:16:45.253] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:16:45.253] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:16:57.328] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:16:57.328] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:16:57.328] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:16:57.328] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:16:57.328] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:17:00.212] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:17:00.212] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:17:00.212] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:17:00.212] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:17:00.212] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:17:01.424] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:17:01.425] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:17:01.425] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:17:01.629] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[19:17:01.629] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:17:01.629] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:17:15.262] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:17:15.262] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:17:15.262] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:17:15.262] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:17:15.262] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:17:27.338] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:17:27.338] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:17:27.339] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:17:27.339] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:17:27.339] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:17:30.220] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:17:30.220] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:17:30.220] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:17:30.220] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:17:30.220] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:17:31.429] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:17:31.429] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:17:31.429] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[19:17:31.429] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[19:17:31.430] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:17:45.273] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:17:45.273] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:17:45.273] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:17:45.273] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:17:45.273] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:17:57.344] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:17:57.344] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:17:57.344] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:17:57.344] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:17:57.344] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:18:00.230] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:18:00.230] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:18:00.230] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:18:00.230] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:18:00.230] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:18:01.432] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:18:01.432] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:18:01.432] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:18:01.432] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:18:01.433] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[19:18:01.631] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[19:18:01.631] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:18:01.631] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:18:15.280] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:18:15.280] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:18:15.280] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:18:15.280] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:18:15.280] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:18:27.348] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:18:27.348] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:18:27.348] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:18:27.348] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:18:27.348] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:18:30.239] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:18:30.239] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:18:30.239] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:18:30.239] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:18:30.239] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:18:31.434] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:18:31.434] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:18:31.434] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:18:45.291] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:18:45.291] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:18:45.291] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:18:45.291] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:18:45.291] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:18:57.352] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:18:57.352] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:18:57.352] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:18:57.352] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:18:57.352] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:19:00.256] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:19:00.256] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:19:00.256] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:19:00.256] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:19:00.256] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:19:01.435] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:19:01.435] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:19:01.435] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:19:01.636] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[19:19:01.636] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:19:01.636] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:19:15.300] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:19:15.300] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:19:15.300] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:19:15.300] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:19:15.300] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:19:27.358] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:19:27.358] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:19:27.358] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:19:27.358] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:19:27.358] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:19:30.263] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:19:30.264] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:19:30.264] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:19:30.264] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:19:30.264] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:19:31.439] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:19:31.440] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:19:31.440] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:19:45.311] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:19:45.311] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:19:45.311] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:19:45.311] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:19:45.311] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:19:57.368] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:19:57.368] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:19:57.368] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:19:57.368] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:19:57.368] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:20:00.274] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:20:00.274] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:20:00.274] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:20:00.274] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:20:00.274] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:20:00.891] DEBUG [Eureka-PeerNodesUpdater]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[19:20:00.892] WARN  [Eureka-PeerNodesUpdater]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[19:20:00.939] INFO  [ReplicaAwareInstanceRegistry - RenewalThresholdUpdater]c.n.e.r.PeerAwareInstanceRegistryImpl - Current renewal threshold is : 6
[19:20:01.440] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:20:01.440] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:20:01.440] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:20:01.639] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[19:20:01.639] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:20:01.639] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:20:15.320] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:20:15.320] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:20:15.320] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:20:15.320] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:20:15.320] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:20:27.377] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:20:27.377] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:20:27.377] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:20:27.377] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:20:27.377] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:20:30.282] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:20:30.282] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:20:30.282] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:20:30.282] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:20:30.282] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:20:31.444] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:20:31.444] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:20:31.444] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[19:20:31.444] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[19:20:31.444] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:20:45.326] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:20:45.326] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:20:45.326] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:20:45.326] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:20:45.326] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:20:57.386] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:20:57.386] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:20:57.386] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:20:57.386] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:20:57.386] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:21:00.290] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:21:00.290] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:21:00.290] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:21:00.290] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:21:00.290] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:21:01.446] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:21:01.446] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:21:01.446] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:21:01.446] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:21:01.447] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[19:21:01.644] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[19:21:01.644] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:21:01.644] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:21:15.335] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:21:15.335] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:21:15.335] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:21:15.335] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:21:15.335] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:21:27.393] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:21:27.393] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:21:27.393] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:21:27.393] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:21:27.393] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:21:30.303] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:21:30.303] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:21:30.303] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:21:30.303] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:21:30.303] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:21:31.453] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:21:31.453] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:21:31.453] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:21:45.348] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:21:45.348] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:21:45.348] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:21:45.348] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:21:45.349] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:21:57.403] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:21:57.403] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:21:57.403] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:21:57.403] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:21:57.403] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:22:00.312] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:22:00.312] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:22:00.312] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:22:00.312] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:22:00.312] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:22:01.462] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:22:01.462] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:22:01.462] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:22:01.657] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[19:22:01.657] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:22:01.657] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:22:15.359] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:22:15.359] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:22:15.359] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:22:15.359] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:22:15.359] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:22:27.410] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:22:27.410] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:22:27.410] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:22:27.410] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:22:27.410] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:22:30.319] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:22:30.319] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:22:30.319] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:22:30.319] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:22:30.319] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:22:31.466] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:22:31.466] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:22:31.466] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:22:45.368] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:22:45.368] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:22:45.368] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:22:45.368] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:22:45.368] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:22:57.418] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:22:57.418] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:22:57.418] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:22:57.418] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:22:57.418] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:23:00.327] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:23:00.327] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:23:00.327] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:23:00.327] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:23:00.328] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:23:01.468] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:23:01.468] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:23:01.468] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:23:01.663] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[19:23:01.663] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:23:01.663] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:23:15.377] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:23:15.377] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:23:15.377] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:23:15.378] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:23:15.378] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:23:27.428] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:23:27.428] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:23:27.428] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:23:27.428] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:23:27.428] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:23:30.336] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:23:30.336] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:23:30.336] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:23:30.336] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:23:30.336] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:23:31.468] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:23:31.469] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:23:31.469] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[19:23:31.469] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[19:23:31.469] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:23:45.390] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:23:45.390] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:23:45.390] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:23:45.390] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:23:45.390] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:23:57.438] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:23:57.438] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:23:57.439] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:23:57.439] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:23:57.439] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:24:00.347] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:24:00.347] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:24:00.347] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:24:00.347] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:24:00.348] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:24:01.474] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:24:01.474] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:24:01.474] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:24:01.474] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:24:01.474] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[19:24:01.668] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[19:24:01.668] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:24:01.668] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:24:15.400] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:24:15.400] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:24:15.401] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:24:15.401] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:24:15.401] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:24:27.446] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:24:27.446] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:24:27.446] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:24:27.446] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:24:27.446] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:24:30.355] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:24:30.355] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:24:30.355] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:24:30.355] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:24:30.355] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:24:31.475] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:24:31.475] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:24:31.475] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:24:45.412] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:24:45.412] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:24:45.412] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:24:45.412] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:24:45.412] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:24:57.455] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:24:57.455] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:24:57.455] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:24:57.455] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:24:57.455] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:25:00.362] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:25:00.362] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:25:00.362] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:25:00.362] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:25:00.362] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:25:01.481] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:25:01.481] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:25:01.481] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:25:01.672] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[19:25:01.672] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:25:01.673] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:25:15.421] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:25:15.421] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:25:15.421] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:25:15.421] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:25:15.421] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:25:27.464] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:25:27.464] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:25:27.464] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:25:27.464] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:25:27.464] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:25:30.370] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:25:30.370] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:25:30.370] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:25:30.370] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:25:30.370] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:25:31.485] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:25:31.485] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:25:31.485] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:25:45.432] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:25:45.432] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:25:45.432] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:25:45.433] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:25:45.433] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:25:57.476] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:25:57.476] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:25:57.476] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:25:57.476] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:25:57.476] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:26:00.382] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:26:00.382] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:26:00.382] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:26:00.382] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:26:00.382] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:26:01.487] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:26:01.487] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:26:01.487] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:26:01.676] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[19:26:01.677] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:26:01.677] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:26:15.441] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:26:15.441] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:26:15.441] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:26:15.441] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:26:15.441] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:26:27.484] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:26:27.484] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:26:27.485] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:26:27.485] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:26:27.485] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:26:30.391] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:26:30.391] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:26:30.391] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:26:30.391] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:26:30.391] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:26:31.491] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:26:31.491] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:26:31.492] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[19:26:31.492] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[19:26:31.492] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:26:45.449] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:26:45.449] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:26:45.449] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:26:45.449] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:26:45.449] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:26:57.493] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:26:57.493] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:26:57.493] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:26:57.493] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:26:57.493] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:27:00.801] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:27:00.801] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:27:00.801] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:27:00.801] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:27:00.801] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:27:01.494] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:27:01.494] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:27:01.494] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:27:01.494] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:27:01.494] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[19:27:01.677] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[19:27:01.677] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:27:01.677] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:27:15.456] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:27:15.456] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:27:15.456] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:27:15.456] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:27:15.456] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:27:27.505] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:27:27.505] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:27:27.505] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:27:27.505] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:27:27.505] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:27:30.808] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:27:30.808] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:27:30.808] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:27:30.808] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:27:30.808] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:27:31.495] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:27:31.495] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:27:31.495] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:27:45.467] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:27:45.467] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:27:45.467] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:27:45.467] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:27:45.467] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:27:57.515] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:27:57.515] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:27:57.515] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:27:57.515] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:27:57.515] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:28:00.816] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:28:00.816] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:28:00.816] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:28:00.816] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:28:00.816] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:28:01.500] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:28:01.500] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:28:01.500] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:28:01.682] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[19:28:01.682] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:28:01.682] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:28:15.477] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:28:15.477] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:28:15.477] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:28:15.477] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:28:15.477] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:28:27.547] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:28:27.547] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:28:27.547] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:28:27.547] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:28:27.547] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:28:30.828] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:28:30.828] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:28:30.828] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:28:30.828] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:28:30.828] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:28:31.501] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:28:31.502] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:28:31.502] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:28:45.498] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:28:45.498] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:28:45.498] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:28:45.498] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:28:45.498] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:28:57.555] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:28:57.555] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:28:57.555] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:28:57.555] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:28:57.555] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:29:00.839] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:29:00.839] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:29:00.839] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:29:00.839] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:29:00.839] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:29:01.503] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:29:01.503] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:29:01.503] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:29:01.688] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[19:29:01.688] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:29:01.688] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:29:15.504] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:29:15.504] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:29:15.504] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:29:15.504] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:29:15.504] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:29:27.563] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:29:27.563] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:29:27.563] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:29:27.563] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:29:27.563] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:29:30.844] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:29:30.844] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:29:30.845] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:29:30.845] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:29:30.845] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:29:31.506] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:29:31.506] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:29:31.507] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[19:29:31.507] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[19:29:31.507] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:29:45.513] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:29:45.513] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:29:45.513] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:29:45.513] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:29:45.513] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:29:57.569] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:29:57.569] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:29:57.569] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:29:57.569] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:29:57.570] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:30:00.856] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:30:00.856] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:30:00.856] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:30:00.856] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:30:00.856] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:30:00.912] DEBUG [Eureka-PeerNodesUpdater]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[19:30:00.912] WARN  [Eureka-PeerNodesUpdater]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[19:30:01.512] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:30:01.512] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:30:01.512] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:30:01.512] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:30:01.512] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[19:30:01.690] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[19:30:01.691] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:30:01.691] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:30:15.522] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:30:15.522] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:30:15.522] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:30:15.522] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:30:15.522] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:30:27.580] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:30:27.580] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:30:27.580] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:30:27.580] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:30:27.580] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:30:30.865] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:30:30.865] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:30:30.865] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:30:30.865] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:30:30.865] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:30:31.515] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:30:31.515] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:30:31.515] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:30:45.529] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:30:45.529] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:30:45.530] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:30:45.530] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:30:45.530] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:30:57.588] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:30:57.589] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:30:57.589] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:30:57.589] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:30:57.589] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:31:00.876] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:31:00.876] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:31:00.876] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:31:00.876] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:31:00.876] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:31:01.519] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:31:01.519] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:31:01.519] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:31:01.692] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[19:31:01.692] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:31:01.692] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:31:15.537] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:31:15.537] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:31:15.537] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:31:15.537] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:31:15.537] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:31:27.596] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:31:27.596] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:31:27.596] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:31:27.596] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:31:27.596] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:31:30.886] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:31:30.886] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:31:30.886] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:31:30.886] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:31:30.886] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:31:31.522] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:31:31.522] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:31:31.522] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:31:45.547] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:31:45.547] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:31:45.547] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:31:45.547] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:31:45.547] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:31:57.608] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:31:57.608] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:31:57.608] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:31:57.608] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:31:57.608] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:32:00.895] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:32:00.895] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:32:00.895] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:32:00.895] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:32:00.895] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:32:01.525] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:32:01.525] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:32:01.525] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:32:01.693] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[19:32:01.693] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:32:01.693] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:32:15.555] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:32:15.555] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:32:15.555] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:32:15.555] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:32:15.555] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:32:27.618] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:32:27.618] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:32:27.619] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:32:27.619] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:32:27.619] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:32:30.907] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:32:30.907] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:32:30.907] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:32:30.907] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:32:30.907] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:32:31.529] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:32:31.529] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:32:31.529] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[19:32:31.529] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[19:32:31.530] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:32:45.564] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:32:45.564] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:32:45.564] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:32:45.564] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:32:45.564] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:32:57.628] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:32:57.628] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:32:57.628] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:32:57.628] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:32:57.628] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:33:00.917] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:33:00.917] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:33:00.917] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:33:00.917] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:33:00.917] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:33:01.533] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:33:01.533] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:33:01.533] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:33:01.533] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:33:01.534] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[19:33:01.696] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[19:33:01.696] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:33:01.696] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:33:15.572] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:33:15.572] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:33:15.572] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:33:15.572] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:33:15.572] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:33:27.639] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:33:27.639] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:33:27.639] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:33:27.639] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:33:27.639] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:33:30.923] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:33:30.924] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:33:30.924] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:33:30.924] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:33:30.924] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:33:31.536] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:33:31.536] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:33:31.536] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:33:45.582] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:33:45.582] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:33:45.582] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:33:45.582] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:33:45.582] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:33:57.647] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:33:57.647] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:33:57.647] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:33:57.648] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:33:57.648] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:34:00.929] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:34:00.929] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:34:00.929] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:34:00.929] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:34:00.929] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:34:01.540] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:34:01.540] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:34:01.540] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:34:01.699] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[19:34:01.700] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:34:01.700] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:34:15.593] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:34:15.593] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:34:15.593] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:34:15.593] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:34:15.593] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:34:27.659] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:34:27.659] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:34:27.659] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:34:27.659] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:34:27.659] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:34:30.938] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:34:30.938] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:34:30.938] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:34:30.938] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:34:30.938] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:34:31.543] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:34:31.543] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:34:31.543] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:34:45.701] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:34:45.701] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:34:45.701] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:34:45.701] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:34:45.701] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:34:57.669] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:34:57.669] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:34:57.669] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:34:57.669] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:34:57.669] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:35:00.946] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:35:00.946] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:35:00.946] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:35:00.946] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:35:00.946] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:35:00.962] INFO  [ReplicaAwareInstanceRegistry - RenewalThresholdUpdater]c.n.e.r.PeerAwareInstanceRegistryImpl - Current renewal threshold is : 6
[19:35:01.548] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:35:01.549] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:35:01.549] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:35:01.700] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[19:35:01.700] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:35:01.700] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:35:15.709] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:35:15.709] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:35:15.709] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:35:15.709] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:35:15.709] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:35:27.681] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:35:27.681] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:35:27.681] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:35:27.681] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:35:27.681] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:35:30.954] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:35:30.954] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:35:30.954] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:35:30.954] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:35:30.954] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:35:31.551] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:35:31.551] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:35:31.551] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[19:35:31.551] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[19:35:31.551] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:35:45.714] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:35:45.714] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:35:45.714] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:35:45.714] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:35:45.714] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:35:57.691] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:35:57.691] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:35:57.691] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:35:57.691] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:35:57.691] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:36:00.962] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:36:00.962] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:36:00.962] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:36:00.962] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:36:00.962] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:36:01.556] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:36:01.556] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:36:01.556] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:36:01.557] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:36:01.557] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[19:36:01.705] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[19:36:01.705] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:36:01.705] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:36:15.720] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:36:15.720] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:36:15.720] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:36:15.720] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:36:15.720] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:36:27.702] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:36:27.702] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:36:27.702] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:36:27.702] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:36:27.702] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:36:30.974] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:36:30.974] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:36:30.974] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:36:30.974] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:36:30.975] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:36:31.562] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:36:31.562] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:36:31.562] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:36:45.730] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:36:45.730] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:36:45.730] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:36:45.730] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:36:45.730] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:36:57.710] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:36:57.710] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:36:57.710] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:36:57.710] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:36:57.710] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:37:00.987] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:37:00.987] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:37:00.987] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:37:00.987] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:37:00.987] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:37:01.568] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:37:01.568] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:37:01.568] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:37:01.712] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[19:37:01.712] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:37:01.712] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:37:15.741] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:37:15.741] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:37:15.741] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:37:15.741] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:37:15.741] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:37:27.721] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:37:27.721] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:37:27.721] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:37:27.721] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:37:27.721] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:37:30.996] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:37:30.996] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:37:30.996] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:37:30.996] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:37:30.996] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:37:31.571] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:37:31.571] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:37:31.572] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:37:45.753] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:37:45.753] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:37:45.753] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:37:45.753] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:37:45.753] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:37:57.731] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:37:57.731] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:37:57.731] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:37:57.731] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:37:57.731] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:38:01.006] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:38:01.006] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:38:01.006] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:38:01.006] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:38:01.006] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:38:01.574] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:38:01.574] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:38:01.574] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:38:01.718] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[19:38:01.718] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:38:01.718] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:38:15.765] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:38:15.765] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:38:15.765] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:38:15.765] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:38:15.765] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:38:27.740] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:38:27.740] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:38:27.740] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:38:27.740] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:38:27.740] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:38:31.015] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:38:31.015] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:38:31.015] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:38:31.015] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:38:31.015] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:38:31.576] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:38:31.576] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:38:31.576] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[19:38:31.576] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[19:38:31.577] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:38:45.771] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:38:45.771] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:38:45.772] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:38:45.772] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:38:45.772] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:38:57.749] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:38:57.749] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:38:57.749] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:38:57.749] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:38:57.749] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:39:01.022] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:39:01.022] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:39:01.022] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:39:01.022] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:39:01.022] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:39:01.578] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:39:01.579] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:39:01.579] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:39:01.579] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:39:01.579] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[19:39:01.723] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[19:39:01.724] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:39:01.724] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:39:15.780] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:39:15.780] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:39:15.780] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:39:15.780] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:39:15.780] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:39:27.755] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:39:27.755] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:39:27.755] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:39:27.755] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:39:27.755] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:39:31.029] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:39:31.029] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:39:31.029] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:39:31.029] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:39:31.029] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:39:31.583] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:39:31.583] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:39:31.583] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:39:45.790] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:39:45.790] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:39:45.790] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:39:45.790] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:39:45.790] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:39:57.764] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:39:57.765] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:39:57.765] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:39:57.765] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:39:57.765] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:40:00.931] DEBUG [Eureka-PeerNodesUpdater]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[19:40:00.931] WARN  [Eureka-PeerNodesUpdater]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[19:40:01.039] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:40:01.039] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:40:01.039] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:40:01.039] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:40:01.040] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:40:01.584] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:40:01.584] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:40:01.584] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:40:01.724] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[19:40:01.739] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:40:01.739] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:40:15.797] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:40:15.797] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:40:15.797] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:40:15.797] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:40:15.797] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:40:27.774] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:40:27.774] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:40:27.774] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:40:27.774] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:40:27.775] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:40:31.048] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:40:31.049] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:40:31.049] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:40:31.049] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:40:31.049] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:40:31.587] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:40:31.587] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:40:31.588] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:40:45.807] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:40:45.807] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:40:45.807] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:40:45.807] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:40:45.807] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:40:57.782] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:40:57.782] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:40:57.782] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:40:57.782] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:40:57.782] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:41:01.055] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:41:01.055] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:41:01.055] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:41:01.055] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:41:01.055] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:41:01.590] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:41:01.591] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:41:01.591] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:41:01.725] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[19:41:01.725] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:41:01.725] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:41:15.817] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:41:15.817] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:41:15.817] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:41:15.817] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:41:15.817] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:41:27.790] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:41:27.790] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:41:27.790] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:41:27.790] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:41:27.790] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:41:31.062] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:41:31.062] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:41:31.062] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:41:31.062] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:41:31.062] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:41:31.590] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:41:31.590] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:41:31.591] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[19:41:31.591] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[19:41:31.591] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:41:45.825] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:41:45.827] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:41:45.827] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:41:45.827] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:41:45.827] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:41:57.812] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:41:57.812] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:41:57.812] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:41:57.812] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:41:57.812] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:42:01.070] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:42:01.070] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:42:01.070] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:42:01.070] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:42:01.070] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:42:01.591] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:42:01.591] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:42:01.591] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:42:01.591] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:42:01.591] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[19:42:01.730] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[19:42:01.730] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:42:01.730] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:42:15.974] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:42:15.974] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:42:15.974] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:42:15.974] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:42:15.974] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:42:27.821] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:42:27.821] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:42:27.821] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:42:27.821] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:42:27.821] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:42:31.080] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:42:31.081] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:42:31.081] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:42:31.081] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:42:31.081] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:42:31.596] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:42:31.597] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:42:31.597] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:42:45.983] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:42:45.983] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:42:45.983] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:42:45.983] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:42:45.983] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:42:57.829] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:42:57.829] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:42:57.829] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:42:57.829] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:42:57.829] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:43:01.092] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:43:01.092] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:43:01.092] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:43:01.092] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:43:01.092] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:43:01.600] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:43:01.600] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:43:01.600] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:43:01.734] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[19:43:01.734] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:43:01.734] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:43:15.993] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:43:15.994] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:43:15.994] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:43:15.994] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:43:15.994] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:43:27.834] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:43:27.834] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:43:27.834] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:43:27.834] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:43:27.834] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:43:31.101] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:43:31.101] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:43:31.101] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:43:31.101] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:43:31.101] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:43:31.603] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:43:31.603] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:43:31.603] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:43:46.003] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:43:46.003] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:43:46.003] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:43:46.003] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:43:46.003] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:43:57.844] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:43:57.844] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:43:57.844] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:43:57.844] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:43:57.844] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:44:01.112] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:44:01.112] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:44:01.112] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:44:01.112] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:44:01.112] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:44:01.605] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:44:01.605] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:44:01.605] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:44:01.737] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[19:44:01.737] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:44:01.737] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:44:16.012] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:44:16.012] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:44:16.012] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:44:16.012] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:44:16.012] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:44:27.850] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:44:27.850] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:44:27.851] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:44:27.851] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:44:27.851] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:44:31.122] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:44:31.122] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:44:31.122] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:44:31.122] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:44:31.122] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:44:31.607] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:44:31.607] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:44:31.607] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[19:44:31.607] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[19:44:31.607] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:44:46.021] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:44:46.021] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:44:46.022] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:44:46.022] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:44:46.022] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:44:57.861] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:44:57.861] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:44:57.861] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:44:57.861] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:44:57.861] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:45:01.132] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:45:01.132] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:45:01.132] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:45:01.132] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:45:01.132] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:45:01.612] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:45:01.612] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:45:01.612] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:45:01.612] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:45:01.612] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[19:45:01.742] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[19:45:01.742] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:45:01.742] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:45:16.028] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:45:16.028] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:45:16.028] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:45:16.028] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:45:16.028] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:45:27.868] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:45:27.868] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:45:27.868] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:45:27.868] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:45:27.868] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:45:31.145] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:45:31.145] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:45:31.145] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:45:31.145] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:45:31.145] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:45:31.616] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:45:31.616] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:45:31.616] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:45:46.036] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:45:46.036] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:45:46.036] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:45:46.037] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:45:46.037] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:45:57.878] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:45:57.878] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:45:57.878] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:45:57.878] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:45:57.878] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:46:01.155] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:46:01.155] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:46:01.155] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:46:01.155] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:46:01.155] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:46:01.622] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:46:01.622] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:46:01.622] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:46:01.744] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[19:46:01.744] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:46:01.744] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:46:16.047] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:46:16.047] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:46:16.047] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:46:16.047] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:46:16.047] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:46:27.888] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:46:27.888] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:46:27.889] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:46:27.889] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:46:27.889] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:46:31.161] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:46:31.161] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:46:31.161] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:46:31.161] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:46:31.161] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:46:31.625] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:46:31.625] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:46:31.626] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:46:46.059] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:46:46.059] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:46:46.059] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:46:46.059] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:46:46.059] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:46:57.899] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:46:57.899] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:46:57.899] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:46:57.899] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:46:57.899] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:47:01.169] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:47:01.170] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:47:01.170] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:47:01.170] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:47:01.170] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:47:01.630] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:47:01.630] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:47:01.630] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:47:01.750] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 5ms
[19:47:01.750] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:47:01.750] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:47:16.066] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:47:16.066] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:47:16.066] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:47:16.066] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:47:16.066] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:47:27.905] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:47:27.905] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:47:27.905] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:47:27.905] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:47:27.905] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:47:31.179] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:47:31.179] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:47:31.179] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:47:31.179] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:47:31.180] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:47:31.635] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:47:31.635] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:47:31.635] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[19:47:31.635] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[19:47:31.635] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:47:46.072] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:47:46.072] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:47:46.072] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:47:46.072] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:47:46.072] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:47:57.916] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:47:57.916] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:47:57.916] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:47:57.916] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:47:57.916] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:48:01.190] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:48:01.190] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:48:01.190] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:48:01.190] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:48:01.190] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:48:01.637] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:48:01.638] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:48:01.638] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:48:01.638] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:48:01.638] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[19:48:01.751] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[19:48:01.751] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:48:01.751] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:48:16.078] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:48:16.078] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:48:16.078] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:48:16.078] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:48:16.078] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:48:27.927] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:48:27.927] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:48:27.927] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:48:27.927] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:48:27.927] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:48:31.202] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:48:31.202] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:48:31.202] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:48:31.202] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:48:31.202] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:48:31.642] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:48:31.642] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:48:31.642] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:48:46.090] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:48:46.090] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:48:46.090] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:48:46.090] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:48:46.090] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:48:57.938] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:48:57.938] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:48:57.938] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:48:57.938] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:48:57.938] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:49:01.209] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:49:01.209] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:49:01.209] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:49:01.209] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:49:01.209] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:49:01.643] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:49:01.643] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:49:01.643] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:49:01.756] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[19:49:01.756] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:49:01.756] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:49:16.099] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:49:16.099] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:49:16.099] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:49:16.099] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:49:16.099] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:49:27.945] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:49:27.945] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:49:27.945] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:49:27.945] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:49:27.945] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:49:31.218] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:49:31.218] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:49:31.218] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:49:31.218] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:49:31.218] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:49:31.645] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:49:31.645] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:49:31.645] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:49:46.108] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:49:46.108] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:49:46.108] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:49:46.108] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:49:46.108] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:49:57.954] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:49:57.954] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:49:57.954] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:49:57.954] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:49:57.954] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:50:00.944] DEBUG [Eureka-PeerNodesUpdater]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[19:50:00.944] WARN  [Eureka-PeerNodesUpdater]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[19:50:00.985] INFO  [ReplicaAwareInstanceRegistry - RenewalThresholdUpdater]c.n.e.r.PeerAwareInstanceRegistryImpl - Current renewal threshold is : 6
[19:50:01.227] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:50:01.227] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:50:01.227] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:50:01.228] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:50:01.228] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:50:01.648] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:50:01.649] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:50:01.649] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:50:01.758] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[19:50:01.758] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:50:01.758] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:50:16.115] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:50:16.115] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:50:16.116] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:50:16.116] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:50:16.116] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:50:27.961] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:50:27.961] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:50:27.961] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:50:27.961] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:50:27.961] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:50:31.237] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:50:31.237] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:50:31.238] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:50:31.238] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:50:31.238] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:50:31.652] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:50:31.652] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:50:31.652] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[19:50:31.652] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[19:50:31.652] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:50:46.126] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:50:46.126] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:50:46.126] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:50:46.126] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:50:46.126] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:50:57.968] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:50:57.968] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:50:57.968] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:50:57.968] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:50:57.968] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:51:01.250] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:51:01.250] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:51:01.250] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:51:01.250] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:51:01.250] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:51:01.655] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:51:01.655] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:51:01.655] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:51:01.655] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:51:01.656] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[19:51:01.764] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[19:51:01.764] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:51:01.764] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:51:16.138] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:51:16.138] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:51:16.138] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:51:16.138] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:51:16.138] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:51:27.960] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:51:27.960] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:51:27.960] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:51:27.960] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:51:27.960] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:51:31.240] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:51:31.240] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:51:31.240] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:51:31.240] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:51:31.240] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:51:31.657] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:51:31.657] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:51:31.657] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:51:46.115] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:51:46.115] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:51:46.115] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:51:46.115] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:51:46.115] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:51:57.950] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:51:57.950] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:51:57.950] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:51:57.950] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:51:57.950] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:52:01.235] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:52:01.235] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:52:01.235] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:52:01.235] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:52:01.235] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:52:01.659] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:52:01.659] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:52:01.659] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:52:01.766] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 37ms
[19:52:01.766] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:52:01.766] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:52:16.117] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:52:16.117] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:52:16.117] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:52:16.117] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:52:16.117] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:52:27.957] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:52:27.957] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:52:27.957] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:52:27.957] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:52:27.957] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:52:31.239] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:52:31.239] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:52:31.239] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:52:31.239] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:52:31.239] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:52:31.661] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:52:31.661] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:52:31.662] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:52:46.125] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:52:46.125] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:52:46.125] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:52:46.125] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:52:46.125] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:52:57.965] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:52:57.965] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:52:57.965] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:52:57.965] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:52:57.966] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:53:01.245] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:53:01.245] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:53:01.245] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:53:01.246] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:53:01.246] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:53:01.662] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:53:01.662] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:53:01.662] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:53:01.767] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[19:53:01.767] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:53:01.767] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:53:16.130] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:53:16.130] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:53:16.130] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:53:16.130] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:53:16.130] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:53:27.972] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:53:27.972] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:53:27.972] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:53:27.972] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:53:27.972] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:53:31.257] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:53:31.257] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:53:31.257] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:53:31.257] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:53:31.257] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:53:31.665] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:53:31.665] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:53:31.665] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[19:53:31.665] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[19:53:31.666] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:53:46.141] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:53:46.141] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:53:46.141] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:53:46.141] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:53:46.141] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:53:57.979] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:53:57.979] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:53:57.979] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:53:57.979] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:53:57.979] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:54:01.268] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:54:01.268] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:54:01.268] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:54:01.268] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:54:01.268] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:54:01.668] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:54:01.668] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:54:01.668] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:54:01.669] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:54:01.669] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[19:54:01.772] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 5ms
[19:54:01.772] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:54:01.772] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:54:16.151] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:54:16.151] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:54:16.151] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:54:16.151] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:54:16.151] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:54:27.985] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:54:27.985] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:54:27.985] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:54:27.985] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:54:27.985] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:54:31.277] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:54:31.277] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:54:31.277] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:54:31.277] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:54:31.277] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:54:31.673] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:54:31.674] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:54:31.674] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:54:46.158] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:54:46.158] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:54:46.158] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:54:46.158] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:54:46.158] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:54:57.996] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:54:57.996] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:54:57.996] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:54:57.996] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:54:57.996] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:55:01.285] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:55:01.285] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:55:01.285] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:55:01.285] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:55:01.285] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:55:01.677] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:55:01.677] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:55:01.678] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:55:01.773] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[19:55:01.773] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:55:01.773] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:55:16.168] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:55:16.168] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:55:16.168] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:55:16.168] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:55:16.168] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:55:28.005] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:55:28.005] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:55:28.005] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:55:28.005] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:55:28.005] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:55:31.296] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:55:31.296] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:55:31.296] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:55:31.296] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:55:31.296] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:55:31.679] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:55:31.679] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:55:31.679] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:55:46.179] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:55:46.179] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:55:46.179] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:55:46.179] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:55:46.179] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:55:58.015] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:55:58.015] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:55:58.015] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:55:58.015] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:55:58.015] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:56:01.306] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:56:01.307] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:56:01.307] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:56:01.307] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:56:01.307] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:56:01.682] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:56:01.682] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:56:01.682] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:56:01.778] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[19:56:01.778] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:56:01.778] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:56:16.184] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:56:16.184] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:56:16.184] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:56:16.184] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:56:16.184] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:56:28.023] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:56:28.023] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:56:28.023] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:56:28.023] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:56:28.023] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:56:31.314] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:56:31.314] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:56:31.314] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:56:31.314] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:56:31.314] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:56:31.684] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:56:31.684] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:56:31.685] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[19:56:31.685] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[19:56:31.685] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:56:46.194] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:56:46.195] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:56:46.195] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:56:46.195] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:56:46.195] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:56:58.032] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:56:58.033] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:56:58.033] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:56:58.033] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:56:58.033] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:57:01.324] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:57:01.324] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:57:01.324] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:57:01.324] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:57:01.324] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:57:01.686] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:57:01.686] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:57:01.686] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:57:01.686] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:57:01.687] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[19:57:01.779] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[19:57:01.779] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:57:01.779] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:57:16.205] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:57:16.205] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:57:16.205] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:57:16.205] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:57:16.205] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:57:28.042] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:57:28.042] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:57:28.042] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:57:28.042] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:57:28.042] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:57:31.332] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:57:31.332] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:57:31.332] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:57:31.332] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:57:31.332] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:57:31.689] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:57:31.689] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:57:31.689] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:57:46.215] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:57:46.215] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:57:46.215] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:57:46.215] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:57:46.215] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:57:58.052] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:57:58.052] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:57:58.052] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:57:58.052] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:57:58.052] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:58:01.342] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:58:01.342] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:58:01.342] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:58:01.342] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:58:01.342] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:58:01.692] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:58:01.692] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:58:01.692] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:58:01.780] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[19:58:01.780] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:58:01.780] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:58:16.225] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:58:16.225] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:58:16.225] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:58:16.225] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:58:16.225] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:58:28.059] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:58:28.059] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:58:28.059] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:58:28.059] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:58:28.059] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:58:31.349] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:58:31.349] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:58:31.349] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:58:31.349] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:58:31.349] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:58:31.697] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:58:31.697] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:58:31.697] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:58:46.235] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:58:46.235] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:58:46.235] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:58:46.235] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:58:46.235] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:58:58.065] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:58:58.065] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:58:58.065] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:58:58.065] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:58:58.065] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:59:01.359] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:59:01.359] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:59:01.359] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:59:01.359] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:59:01.359] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:59:01.701] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:59:01.701] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:59:01.701] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:59:01.782] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[19:59:01.782] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[19:59:01.782] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[19:59:16.247] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:59:16.247] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:59:16.247] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:59:16.247] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:59:16.247] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:59:28.072] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:59:28.072] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:59:28.072] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:59:28.072] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:59:28.072] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[19:59:31.370] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[19:59:31.370] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:59:31.370] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:59:31.370] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[19:59:31.370] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[19:59:31.704] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[19:59:31.704] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[19:59:31.705] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[19:59:31.705] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[19:59:31.705] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[19:59:46.256] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[19:59:46.257] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:59:46.257] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:59:46.257] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[19:59:46.257] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[19:59:58.083] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[19:59:58.083] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[19:59:58.083] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[19:59:58.083] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[19:59:58.083] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:00:00.915] DEBUG [Eureka-PeerNodesUpdater]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[20:00:00.915] WARN  [Eureka-PeerNodesUpdater]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[20:00:01.380] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:00:01.380] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:00:01.381] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:00:01.381] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:00:01.381] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:00:01.709] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:00:01.709] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:00:01.709] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:00:01.709] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:00:01.710] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[20:00:01.788] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 5ms
[20:00:01.788] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:00:01.788] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:00:16.262] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:00:16.262] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:00:16.262] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:00:16.263] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:00:16.263] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:00:28.093] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:00:28.093] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:00:28.094] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:00:28.094] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:00:28.094] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:00:31.387] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:00:31.387] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:00:31.387] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:00:31.387] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:00:31.387] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:00:31.711] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:00:31.711] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:00:31.711] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:00:46.274] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:00:46.274] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:00:46.274] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:00:46.274] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:00:46.275] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:00:58.105] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:00:58.105] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:00:58.105] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:00:58.105] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:00:58.105] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:01:01.399] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:01:01.399] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:01:01.399] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:01:01.399] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:01:01.399] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:01:01.716] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:01:01.716] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:01:01.716] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:01:01.792] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[20:01:01.792] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:01:01.792] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:01:16.285] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:01:16.285] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:01:16.285] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:01:16.285] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:01:16.285] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:01:28.111] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:01:28.112] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:01:28.112] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:01:28.112] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:01:28.112] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:01:31.408] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:01:31.408] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:01:31.408] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:01:31.408] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:01:31.408] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:01:31.719] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:01:31.719] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:01:31.719] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:01:46.295] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:01:46.295] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:01:46.295] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:01:46.295] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:01:46.295] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:01:58.118] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:01:58.118] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:01:58.118] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:01:58.118] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:01:58.118] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:02:01.416] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:02:01.416] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:02:01.416] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:02:01.417] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:02:01.417] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:02:01.722] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:02:01.722] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:02:01.722] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:02:01.793] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[20:02:01.794] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:02:01.794] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:02:16.304] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:02:16.304] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:02:16.304] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:02:16.304] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:02:16.304] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:02:28.127] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:02:28.127] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:02:28.127] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:02:28.127] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:02:28.127] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:02:31.425] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:02:31.425] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:02:31.425] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:02:31.425] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:02:31.425] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:02:31.727] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:02:31.748] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:02:31.749] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[20:02:31.750] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[20:02:31.750] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:02:46.313] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:02:46.313] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:02:46.313] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:02:46.313] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:02:46.313] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:02:58.134] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:02:58.134] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:02:58.134] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:02:58.134] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:02:58.134] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:03:01.435] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:03:01.435] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:03:01.435] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:03:01.435] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:03:01.435] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:03:01.732] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:03:01.732] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:03:01.732] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:03:01.732] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:03:01.732] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[20:03:01.794] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[20:03:01.795] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:03:01.795] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:03:16.320] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:03:16.320] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:03:16.321] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:03:16.321] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:03:16.321] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:03:28.146] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:03:28.146] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:03:28.146] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:03:28.146] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:03:28.146] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:03:31.444] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:03:31.444] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:03:31.444] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:03:31.444] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:03:31.444] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:03:31.732] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:03:31.732] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:03:31.732] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:03:46.328] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:03:46.328] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:03:46.328] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:03:46.328] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:03:46.328] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:03:58.157] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:03:58.157] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:03:58.157] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:03:58.157] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:03:58.157] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:04:01.454] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:04:01.454] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:04:01.454] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:04:01.454] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:04:01.454] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:04:01.732] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:04:01.732] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:04:01.732] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:04:01.798] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[20:04:01.798] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:04:01.798] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:04:16.339] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:04:16.339] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:04:16.340] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:04:16.340] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:04:16.340] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:04:28.163] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:04:28.163] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:04:28.163] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:04:28.163] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:04:28.163] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:04:31.461] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:04:31.461] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:04:31.461] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:04:31.461] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:04:31.461] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:04:31.733] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:04:31.733] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:04:31.733] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:04:46.350] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:04:46.350] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:04:46.351] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:04:46.351] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:04:46.351] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:04:58.174] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:04:58.174] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:04:58.174] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:04:58.174] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:04:58.174] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:05:00.984] INFO  [ReplicaAwareInstanceRegistry - RenewalThresholdUpdater]c.n.e.r.PeerAwareInstanceRegistryImpl - Current renewal threshold is : 6
[20:05:01.472] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:05:01.472] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:05:01.472] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:05:01.472] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:05:01.473] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:05:01.737] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:05:01.737] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:05:01.737] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:05:01.799] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[20:05:01.799] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:05:01.799] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:05:16.356] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:05:16.356] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:05:16.356] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:05:16.356] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:05:16.356] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:05:28.186] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:05:28.187] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:05:28.187] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:05:28.187] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:05:28.187] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:05:31.484] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:05:31.484] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:05:31.484] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:05:31.484] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:05:31.484] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:05:31.739] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:05:31.739] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:05:31.739] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:05:46.365] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:05:46.366] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:05:46.366] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:05:46.366] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:05:46.366] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:05:58.194] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:05:58.194] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:05:58.194] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:05:58.194] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:05:58.194] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:06:01.492] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:06:01.492] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:06:01.492] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:06:01.492] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:06:01.492] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:06:01.741] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:06:01.741] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:06:01.741] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[20:06:01.741] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[20:06:01.742] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:06:01.742] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:06:01.742] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[20:06:01.804] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[20:06:01.804] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:06:01.805] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:06:16.373] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:06:16.373] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:06:16.373] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:06:16.373] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:06:16.373] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:06:28.209] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:06:28.209] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:06:28.209] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:06:28.209] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:06:28.209] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:06:31.509] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:06:31.509] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:06:31.509] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:06:31.509] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:06:31.509] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:06:31.752] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:06:31.753] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:06:31.753] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:06:46.391] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:06:46.391] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:06:46.391] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:06:46.391] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:06:46.391] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:06:58.224] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:06:58.224] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:06:58.224] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:06:58.224] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:06:58.224] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:07:01.520] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:07:01.520] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:07:01.520] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:07:01.520] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:07:01.520] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:07:01.761] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:07:01.761] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:07:01.761] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:07:01.819] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[20:07:01.820] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:07:01.820] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:07:16.403] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:07:16.403] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:07:16.403] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:07:16.403] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:07:16.403] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:07:28.231] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:07:28.231] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:07:28.231] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:07:28.231] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:07:28.231] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:07:31.530] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:07:31.530] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:07:31.530] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:07:31.530] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:07:31.530] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:07:31.766] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:07:31.766] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:07:31.766] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:07:46.413] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:07:46.413] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:07:46.413] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:07:46.413] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:07:46.413] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:07:58.242] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:07:58.242] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:07:58.242] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:07:58.242] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:07:58.242] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:08:01.539] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:08:01.539] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:08:01.540] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:08:01.540] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:08:01.540] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:08:01.766] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:08:01.766] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:08:01.766] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:08:01.823] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[20:08:01.823] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:08:01.823] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:08:16.424] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:08:16.424] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:08:16.424] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:08:16.424] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:08:16.424] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:08:28.252] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:08:28.252] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:08:28.253] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:08:28.253] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:08:28.253] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:08:31.545] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:08:31.545] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:08:31.545] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:08:31.545] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:08:31.545] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:08:31.771] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:08:31.771] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:08:31.771] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:08:47.059] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:08:47.059] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:08:47.059] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:08:47.059] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:08:47.059] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:08:58.261] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:08:58.261] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:08:58.261] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:08:58.261] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:08:58.261] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:09:01.550] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:09:01.550] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:09:01.550] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:09:01.550] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:09:01.550] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:09:01.775] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:09:01.775] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:09:01.775] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[20:09:01.775] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[20:09:01.775] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:09:01.775] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:09:01.776] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[20:09:01.825] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[20:09:01.825] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:09:01.825] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:09:17.070] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:09:17.070] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:09:17.070] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:09:17.070] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:09:17.070] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:09:28.266] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:09:28.266] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:09:28.266] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:09:28.266] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:09:28.266] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:09:31.555] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:09:31.555] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:09:31.555] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:09:31.555] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:09:31.555] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:09:31.777] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:09:31.777] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:09:31.777] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:09:47.078] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:09:47.078] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:09:47.078] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:09:47.078] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:09:47.078] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:09:58.277] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:09:58.277] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:09:58.277] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:09:58.277] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:09:58.277] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:10:00.936] DEBUG [Eureka-PeerNodesUpdater]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[20:10:00.937] WARN  [Eureka-PeerNodesUpdater]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[20:10:01.563] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:10:01.563] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:10:01.563] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:10:01.563] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:10:01.563] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:10:01.779] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:10:01.779] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:10:01.779] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:10:01.830] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[20:10:01.830] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:10:01.830] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:10:17.085] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:10:17.085] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:10:17.085] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:10:17.085] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:10:17.085] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:10:28.287] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:10:28.287] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:10:28.287] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:10:28.287] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:10:28.287] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:10:31.573] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:10:31.573] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:10:31.573] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:10:31.573] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:10:31.573] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:10:31.785] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:10:31.785] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:10:31.785] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:10:47.092] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:10:47.092] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:10:47.092] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:10:47.092] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:10:47.092] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:10:58.298] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:10:58.298] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:10:58.298] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:10:58.298] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:10:58.298] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:11:01.581] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:11:01.581] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:11:01.581] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:11:01.581] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:11:01.581] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:11:01.787] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:11:01.787] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:11:01.787] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:11:01.832] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[20:11:01.832] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:11:01.832] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:11:17.099] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:11:17.099] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:11:17.099] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:11:17.099] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:11:17.099] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:11:28.308] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:11:28.308] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:11:28.308] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:11:28.308] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:11:28.308] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:11:31.593] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:11:31.593] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:11:31.593] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:11:31.593] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:11:31.593] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:11:31.791] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:11:31.791] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:11:31.791] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:11:47.108] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:11:47.108] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:11:47.108] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:11:47.108] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:11:47.108] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:11:58.319] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:11:58.319] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:11:58.319] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:11:58.319] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:11:58.319] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:12:01.603] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:12:01.603] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:12:01.603] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:12:01.603] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:12:01.603] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:12:01.796] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:12:01.796] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:12:01.796] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[20:12:01.797] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[20:12:01.797] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:12:01.797] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:12:01.797] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[20:12:01.834] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[20:12:01.834] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:12:01.834] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:12:17.115] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:12:17.115] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:12:17.115] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:12:17.115] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:12:17.115] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:12:28.330] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:12:28.330] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:12:28.330] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:12:28.330] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:12:28.330] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:12:31.612] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:12:31.612] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:12:31.612] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:12:31.612] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:12:31.612] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:12:31.798] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:12:31.798] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:12:31.798] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:12:47.123] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:12:47.124] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:12:47.124] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:12:47.124] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:12:47.124] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:12:58.340] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:12:58.340] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:12:58.340] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:12:58.341] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:12:58.341] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:13:01.621] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:13:01.621] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:13:01.621] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:13:01.621] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:13:01.621] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:13:01.802] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:13:01.802] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:13:01.802] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:13:01.838] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[20:13:01.838] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:13:01.838] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:13:17.132] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:13:17.132] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:13:17.132] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:13:17.132] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:13:17.132] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:13:28.350] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:13:28.350] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:13:28.350] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:13:28.350] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:13:28.350] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:13:31.630] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:13:31.630] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:13:31.630] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:13:31.630] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:13:31.630] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:13:31.807] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:13:31.807] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:13:31.807] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:13:47.143] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:13:47.143] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:13:47.143] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:13:47.143] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:13:47.143] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:13:58.358] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:13:58.358] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:13:58.358] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:13:58.359] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:13:58.359] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:14:01.640] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:14:01.640] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:14:01.640] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:14:01.640] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:14:01.640] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:14:01.810] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:14:01.810] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:14:01.810] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:14:01.839] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[20:14:01.839] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:14:01.839] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:14:17.152] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:14:17.152] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:14:17.152] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:14:17.152] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:14:17.153] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:14:28.366] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:14:28.366] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:14:28.366] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:14:28.366] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:14:28.366] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:14:31.649] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:14:31.649] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:14:31.649] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:14:31.649] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:14:31.649] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:14:31.813] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:14:31.813] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:14:31.813] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:14:47.162] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:14:47.162] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:14:47.162] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:14:47.162] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:14:47.162] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:14:58.378] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:14:58.379] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:14:58.379] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:14:58.379] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:14:58.379] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:15:01.658] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:15:01.658] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:15:01.658] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:15:01.658] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:15:01.658] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:15:01.818] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:15:01.818] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:15:01.818] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[20:15:01.818] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[20:15:01.818] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:15:01.818] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:15:01.819] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[20:15:01.845] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 5ms
[20:15:01.845] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:15:01.845] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:15:17.171] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:15:17.171] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:15:17.172] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:15:17.172] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:15:17.172] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:15:28.386] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:15:28.386] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:15:28.386] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:15:28.386] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:15:28.386] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:15:31.665] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:15:31.665] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:15:31.665] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:15:31.665] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:15:31.665] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:15:31.821] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:15:31.821] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:15:31.821] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:15:47.180] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:15:47.180] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:15:47.180] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:15:47.180] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:15:47.180] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:15:58.396] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:15:58.396] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:15:58.396] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:15:58.396] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:15:58.396] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:16:01.675] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:16:01.675] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:16:01.675] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:16:01.675] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:16:01.675] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:16:01.824] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:16:01.825] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:16:01.825] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:16:01.851] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[20:16:01.851] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:16:01.851] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:16:17.189] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:16:17.189] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:16:17.189] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:16:17.189] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:16:17.189] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:16:28.407] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:16:28.407] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:16:28.407] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:16:28.407] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:16:28.407] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:16:31.685] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:16:31.685] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:16:31.685] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:16:31.685] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:16:31.685] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:16:31.827] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:16:31.827] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:16:31.827] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:16:47.200] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:16:47.200] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:16:47.200] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:16:47.200] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:16:47.200] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:16:58.415] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:16:58.415] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:16:58.416] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:16:58.416] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:16:58.416] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:17:01.692] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:17:01.692] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:17:01.692] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:17:01.692] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:17:01.692] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:17:01.831] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:17:01.853] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[20:17:02.839] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:17:02.839] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:17:02.839] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:17:02.839] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:17:17.210] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:17:17.211] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:17:17.211] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:17:17.211] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:17:17.211] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:17:28.421] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:17:28.421] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:17:28.421] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:17:28.422] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:17:28.422] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:17:31.701] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:17:31.701] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:17:31.701] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:17:31.701] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:17:31.701] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:17:31.834] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:17:31.834] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:17:31.834] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:17:47.217] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:17:47.217] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:17:47.217] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:17:47.217] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:17:47.217] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:17:58.428] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:17:58.428] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:17:58.428] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:17:58.428] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:17:58.428] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:18:01.705] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:18:01.705] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:18:01.705] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:18:01.705] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:18:01.705] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:18:01.836] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:18:01.836] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:18:01.836] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[20:18:01.836] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[20:18:01.836] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:18:01.836] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:18:01.837] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[20:18:01.856] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[20:18:01.856] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:18:01.856] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:18:17.226] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:18:17.226] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:18:17.226] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:18:17.226] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:18:17.226] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:18:28.436] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:18:28.436] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:18:28.436] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:18:28.436] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:18:28.436] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:18:31.712] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:18:31.712] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:18:31.712] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:18:31.712] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:18:31.712] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:18:31.836] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:18:31.836] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:18:31.836] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:18:47.237] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:18:47.237] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:18:47.237] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:18:47.237] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:18:47.237] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:18:58.442] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:18:58.442] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:18:58.442] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:18:58.442] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:18:58.442] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:19:01.717] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:19:01.717] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:19:01.717] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:19:01.717] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:19:01.717] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:19:01.839] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:19:01.839] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:19:01.839] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:19:01.859] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[20:19:01.859] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:19:01.859] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:19:17.249] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:19:17.249] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:19:17.249] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:19:17.249] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:19:17.249] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:19:28.453] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:19:28.454] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:19:28.454] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:19:28.454] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:19:28.454] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:19:31.721] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:19:31.721] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:19:31.721] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:19:31.721] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:19:31.721] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:19:31.842] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:19:31.842] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:19:31.842] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:19:47.257] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:19:47.257] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:19:47.257] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:19:47.257] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:19:47.257] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:19:58.459] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:19:58.459] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:19:58.459] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:19:58.459] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:19:58.459] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:20:00.945] DEBUG [Eureka-PeerNodesUpdater]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[20:20:00.945] WARN  [Eureka-PeerNodesUpdater]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[20:20:01.012] INFO  [ReplicaAwareInstanceRegistry - RenewalThresholdUpdater]c.n.e.r.PeerAwareInstanceRegistryImpl - Current renewal threshold is : 6
[20:20:01.729] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:20:01.729] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:20:01.729] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:20:01.729] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:20:01.729] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:20:01.845] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:20:01.845] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:20:01.845] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:20:01.862] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[20:20:01.862] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:20:01.862] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:20:17.266] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:20:17.266] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:20:17.266] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:20:17.266] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:20:17.266] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:20:28.467] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:20:28.468] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:20:28.468] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:20:28.468] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:20:28.468] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:20:31.738] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:20:31.738] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:20:31.738] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:20:31.738] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:20:31.738] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:20:31.847] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:20:31.847] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:20:31.847] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:20:47.275] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:20:47.275] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:20:47.275] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:20:47.275] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:20:47.275] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:20:58.477] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:20:58.477] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:20:58.477] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:20:58.477] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:20:58.477] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:21:01.744] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:21:01.744] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:21:01.744] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:21:01.744] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:21:01.744] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:21:01.851] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:21:01.852] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:21:01.852] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[20:21:01.852] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[20:21:01.852] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:21:01.852] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:21:01.852] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[20:21:01.867] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[20:21:01.867] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:21:01.867] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:21:17.281] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:21:17.281] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:21:17.281] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:21:17.281] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:21:17.281] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:21:28.482] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:21:28.482] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:21:28.482] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:21:28.482] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:21:28.482] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:21:31.745] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:21:31.745] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:21:31.745] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:21:31.745] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:21:31.745] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:21:31.851] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:21:31.851] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:21:31.851] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:21:47.277] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:21:47.277] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:21:47.277] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:21:47.277] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:21:47.277] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:21:58.484] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:21:58.484] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:21:58.484] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:21:58.484] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:21:58.484] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:22:01.749] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:22:01.749] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:22:01.749] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:22:01.749] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:22:01.749] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:22:01.852] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:22:01.852] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:22:01.852] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:22:01.868] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 11ms
[20:22:01.868] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:22:01.868] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:22:17.279] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:22:17.279] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:22:17.279] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:22:17.279] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:22:17.279] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:22:28.491] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:22:28.491] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:22:28.491] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:22:28.491] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:22:28.491] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:22:31.753] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:22:31.753] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:22:31.753] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:22:31.753] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:22:31.753] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:22:31.856] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:22:31.856] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:22:31.856] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:22:47.284] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:22:47.285] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:22:47.285] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:22:47.285] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:22:47.285] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:22:58.497] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:22:58.497] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:22:58.497] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:22:58.497] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:22:58.497] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:23:01.759] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:23:01.759] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:23:01.759] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:23:01.759] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:23:01.760] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:23:01.859] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:23:01.859] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:23:01.859] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:23:01.872] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[20:23:01.886] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:23:01.886] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:23:17.290] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:23:17.290] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:23:17.290] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:23:17.290] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:23:17.290] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:23:28.502] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:23:28.503] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:23:28.503] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:23:28.503] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:23:28.503] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:23:31.768] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:23:31.768] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:23:31.768] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:23:31.768] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:23:31.768] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:23:31.863] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:23:31.863] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:23:31.863] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:23:47.295] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:23:47.295] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:23:47.296] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:23:47.296] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:23:47.296] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:23:58.508] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:23:58.508] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:23:58.508] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:23:58.508] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:23:58.508] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:24:01.777] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:24:01.777] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:24:01.777] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:24:01.777] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:24:01.777] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:24:01.868] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:24:01.868] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:24:01.868] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[20:24:01.868] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[20:24:01.868] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:24:01.868] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:24:01.868] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[20:24:01.872] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[20:24:01.872] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:24:01.872] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:24:17.303] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:24:17.303] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:24:17.303] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:24:17.303] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:24:17.303] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:24:28.513] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:24:28.513] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:24:28.513] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:24:28.513] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:24:28.513] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:24:31.784] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:24:31.785] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:24:31.785] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:24:31.785] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:24:31.785] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:24:31.872] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:24:31.872] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:24:31.872] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:24:47.313] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:24:47.313] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:24:47.313] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:24:47.313] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:24:47.313] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:24:58.522] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:24:58.522] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:24:58.522] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:24:58.522] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:24:58.522] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:25:01.791] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:25:01.791] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:25:01.791] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:25:01.791] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:25:01.791] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:25:01.876] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:25:01.876] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[20:25:01.876] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:25:01.876] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:25:01.876] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:25:01.876] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:25:17.322] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:25:17.322] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:25:17.322] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:25:17.322] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:25:17.322] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:25:28.526] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:25:28.526] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:25:28.526] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:25:28.526] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:25:28.526] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:25:31.798] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:25:31.798] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:25:31.799] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:25:31.799] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:25:31.799] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:25:31.880] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:25:31.881] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:25:31.881] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:25:47.329] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:25:47.329] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:25:47.329] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:25:47.329] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:25:47.329] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:25:58.536] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:25:58.536] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:25:58.536] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:25:58.536] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:25:58.536] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:26:01.807] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:26:01.807] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:26:01.807] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:26:01.807] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:26:01.807] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:26:01.880] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[20:26:01.880] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:26:01.880] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:26:01.880] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:26:01.880] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:26:01.880] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:26:17.339] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:26:17.339] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:26:17.339] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:26:17.339] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:26:17.339] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:26:28.545] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:26:28.545] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:26:28.545] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:26:28.545] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:26:28.545] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:26:31.814] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:26:31.814] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:26:31.814] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:26:31.814] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:26:31.814] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:26:31.881] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:26:31.881] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:26:31.881] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:26:47.349] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:26:47.350] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:26:47.350] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:26:47.350] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:26:47.350] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:26:58.553] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:26:58.553] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:26:58.553] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:26:58.553] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:26:58.553] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:27:01.824] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:27:01.824] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:27:01.824] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:27:01.824] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:27:01.824] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:27:01.887] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 7ms
[20:27:01.887] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:27:01.888] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:27:01.887] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:27:01.890] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:27:01.890] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[20:27:01.891] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[20:27:01.891] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:27:01.891] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:27:01.891] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[20:27:17.359] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:27:17.359] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:27:17.359] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:27:17.359] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:27:17.359] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:27:28.562] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:27:28.562] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:27:28.562] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:27:28.562] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:27:28.562] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:27:31.837] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:27:31.837] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:27:31.837] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:27:31.837] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:27:31.837] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:27:31.892] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:27:31.893] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:27:31.893] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:27:47.368] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:27:47.368] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:27:47.368] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:27:47.368] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:27:47.368] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:27:58.571] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:27:58.571] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:27:58.571] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:27:58.571] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:27:58.571] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:28:01.846] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:28:01.846] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:28:01.846] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:28:01.846] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:28:01.846] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:28:01.891] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[20:28:01.891] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:28:01.891] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:28:01.892] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:28:01.892] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:28:01.892] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:28:17.376] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:28:17.376] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:28:17.376] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:28:17.376] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:28:17.376] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:28:28.581] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:28:28.581] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:28:28.581] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:28:28.582] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:28:28.582] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:28:31.855] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:28:31.855] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:28:31.855] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:28:31.855] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:28:31.855] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:28:31.893] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:28:31.893] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:28:31.893] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:28:47.382] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:28:47.382] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:28:47.382] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:28:47.382] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:28:47.383] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:28:58.586] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:28:58.586] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:28:58.586] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:28:58.586] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:28:58.586] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:29:01.860] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:29:01.860] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:29:01.860] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:29:01.860] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:29:01.860] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:29:01.892] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[20:29:01.892] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:29:01.892] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:29:01.893] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:29:01.893] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:29:01.893] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:29:17.389] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:29:17.389] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:29:17.389] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:29:17.389] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:29:17.389] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:29:28.590] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:29:28.590] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:29:28.590] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:29:28.590] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:29:28.590] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:29:31.865] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:29:31.865] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:29:31.865] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:29:31.865] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:29:31.865] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:29:31.894] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:29:31.894] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:29:31.894] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:29:47.393] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:29:47.393] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:29:47.393] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:29:47.393] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:29:47.393] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:29:58.600] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:29:58.600] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:29:58.600] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:29:58.600] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:29:58.600] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:30:00.941] DEBUG [Eureka-PeerNodesUpdater]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[20:30:00.941] WARN  [Eureka-PeerNodesUpdater]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[20:30:01.873] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:30:01.873] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:30:01.873] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:30:01.873] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:30:01.873] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:30:01.894] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:30:01.894] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:30:01.894] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[20:30:01.894] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:30:01.894] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:30:01.894] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[20:30:01.894] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[20:30:01.894] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:30:01.895] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:30:01.895] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[20:30:17.399] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:30:17.399] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:30:17.399] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:30:17.399] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:30:17.399] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:30:28.605] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:30:28.605] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:30:28.605] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:30:28.605] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:30:28.605] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:30:31.880] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:30:31.880] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:30:31.880] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:30:31.880] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:30:31.880] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:30:31.898] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:30:31.898] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:30:31.898] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:30:47.409] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:30:47.409] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:30:47.409] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:30:47.409] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:30:47.409] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:30:58.614] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:30:58.614] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:30:58.614] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:30:58.614] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:30:58.614] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:31:01.888] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:31:01.888] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:31:01.888] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:31:01.888] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:31:01.888] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:31:01.898] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[20:31:01.899] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:31:01.899] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:31:01.901] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:31:01.901] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:31:01.901] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:31:17.418] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:31:17.418] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:31:17.418] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:31:17.418] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:31:17.418] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:31:28.629] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:31:28.630] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:31:28.630] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:31:28.630] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:31:28.630] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:31:31.894] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:31:31.894] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:31:31.894] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:31:31.894] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:31:31.894] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:31:31.905] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:31:31.905] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:31:31.905] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:31:47.426] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:31:47.426] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:31:47.426] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:31:47.426] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:31:47.426] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:31:58.637] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:31:58.637] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:31:58.637] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:31:58.637] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:31:58.637] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:32:01.902] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:32:01.902] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:32:01.902] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:32:01.902] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:32:01.902] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:32:01.902] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[20:32:01.902] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:32:01.902] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:32:01.910] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:32:01.910] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:32:01.911] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:32:17.434] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:32:17.434] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:32:17.434] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:32:17.434] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:32:17.434] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:32:28.643] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:32:28.643] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:32:28.643] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:32:28.643] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:32:28.643] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:32:31.911] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:32:31.911] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:32:31.911] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:32:31.911] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:32:31.911] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:32:31.913] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:32:31.913] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:32:31.913] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:32:47.443] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:32:47.444] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:32:47.444] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:32:47.444] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:32:47.444] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:32:58.649] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:32:58.649] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:32:58.649] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:32:58.649] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:32:58.649] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:33:01.906] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[20:33:01.906] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:33:01.906] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:33:01.917] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:33:01.917] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:33:01.917] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[20:33:01.917] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[20:33:01.917] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:33:01.917] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:33:01.918] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[20:33:01.921] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:33:01.921] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:33:01.921] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:33:01.921] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:33:01.921] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:33:17.448] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:33:17.448] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:33:17.448] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:33:17.448] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:33:17.448] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:33:28.658] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:33:28.658] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:33:28.658] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:33:28.658] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:33:28.658] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:33:31.921] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:33:31.921] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:33:31.921] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:33:31.930] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:33:31.930] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:33:31.931] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:33:31.931] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:33:31.931] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:33:47.458] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:33:47.458] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:33:47.458] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:33:47.458] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:33:47.458] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:33:58.664] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:33:58.664] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:33:58.664] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:33:58.664] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:33:58.664] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:34:01.912] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[20:34:01.924] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:34:01.925] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:34:01.925] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:34:01.925] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:34:01.925] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:34:01.983] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:34:01.983] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:34:01.983] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:34:01.983] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:34:01.983] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:34:17.466] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:34:17.466] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:34:17.466] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:34:17.466] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:34:17.466] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:34:28.673] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:34:28.673] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:34:28.674] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:34:28.674] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:34:28.674] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:34:31.928] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:34:31.928] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:34:31.928] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:34:31.991] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:34:31.991] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:34:31.991] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:34:31.991] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:34:31.991] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:34:47.473] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:34:47.474] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:34:47.474] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:34:47.474] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:34:47.474] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:34:58.682] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:34:58.682] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:34:58.682] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:34:58.682] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:34:58.682] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:35:01.013] INFO  [ReplicaAwareInstanceRegistry - RenewalThresholdUpdater]c.n.e.r.PeerAwareInstanceRegistryImpl - Current renewal threshold is : 6
[20:35:01.917] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[20:35:01.917] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:35:01.917] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:35:01.933] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:35:01.933] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:35:01.933] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:35:01.998] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:35:01.998] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:35:01.998] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:35:01.998] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:35:01.998] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:35:17.477] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:35:17.477] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:35:17.477] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:35:17.477] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:35:17.477] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:35:28.688] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:35:28.688] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:35:28.688] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:35:28.688] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:35:28.688] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:35:31.935] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:35:31.935] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:35:31.935] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:35:32.006] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:35:32.006] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:35:32.006] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:35:32.006] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:35:32.006] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:35:47.484] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:35:47.484] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:35:47.484] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:35:47.484] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:35:47.484] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:35:58.697] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:35:58.697] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:35:58.697] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:35:58.698] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:35:58.698] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:36:01.921] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[20:36:01.921] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:36:01.921] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:36:01.937] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:36:01.937] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:36:01.937] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[20:36:01.937] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[20:36:01.938] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:36:01.938] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:36:01.938] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[20:36:02.012] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:36:02.012] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:36:02.012] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:36:02.012] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:36:02.012] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:36:17.492] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:36:17.492] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:36:17.492] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:36:17.492] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:36:17.492] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:36:28.699] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:36:28.699] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:36:28.699] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:36:28.699] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:36:28.699] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:36:31.937] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:36:31.937] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:36:31.937] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:36:32.016] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:36:32.016] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:36:32.016] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:36:32.016] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:36:32.016] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:36:47.490] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:36:47.490] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:36:47.490] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:36:47.490] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:36:47.490] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:36:58.701] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:36:58.701] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:36:58.701] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:36:58.701] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:36:58.701] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:37:01.921] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 7ms
[20:37:01.921] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:37:01.921] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:37:01.938] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:37:01.938] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:37:01.938] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:37:02.021] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:37:02.021] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:37:02.021] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:37:02.021] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:37:02.021] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:37:17.494] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:37:17.494] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:37:17.494] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:37:17.494] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:37:17.494] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:37:28.710] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:37:28.710] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:37:28.710] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:37:28.710] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:37:28.711] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:37:31.942] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:37:31.942] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:37:31.942] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:37:32.026] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:37:32.026] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:37:32.026] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:37:32.026] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:37:32.026] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:37:47.502] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:37:47.502] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:37:47.502] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:37:47.502] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:37:47.502] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:37:58.719] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:37:58.719] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:37:58.719] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:37:58.719] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:37:58.719] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:38:01.926] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[20:38:01.926] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:38:01.926] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:38:01.942] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:38:01.943] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:38:01.943] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:38:02.032] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:38:02.032] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:38:02.032] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:38:02.032] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:38:02.032] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:38:17.508] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:38:17.508] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:38:17.508] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:38:17.508] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:38:17.508] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:38:28.728] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:38:28.728] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:38:28.728] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:38:28.728] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:38:28.728] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:38:31.947] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:38:31.947] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:38:31.947] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:38:32.040] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:38:32.040] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:38:32.040] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:38:32.040] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:38:32.040] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:38:47.514] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:38:47.514] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:38:47.514] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:38:47.514] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:38:47.514] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:38:58.736] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:38:58.736] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:38:58.736] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:38:58.736] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:38:58.736] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:39:01.931] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[20:39:01.931] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:39:01.931] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:39:01.948] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:39:01.948] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:39:01.948] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[20:39:01.948] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[20:39:01.948] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:39:01.948] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:39:01.949] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[20:39:02.048] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:39:02.048] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:39:02.048] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:39:02.048] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:39:02.049] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:39:17.522] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:39:17.522] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:39:17.522] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:39:17.522] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:39:17.522] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:39:28.740] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:39:28.740] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:39:28.740] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:39:28.740] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:39:28.741] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:39:31.953] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:39:31.953] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:39:31.953] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:39:32.052] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:39:32.052] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:39:32.052] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:39:32.052] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:39:32.052] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:39:47.526] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:39:47.526] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:39:47.526] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:39:47.526] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:39:47.526] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:39:58.749] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:39:58.749] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:39:58.749] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:39:58.749] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:39:58.749] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:40:00.944] DEBUG [Eureka-PeerNodesUpdater]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[20:40:00.944] WARN  [Eureka-PeerNodesUpdater]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[20:40:01.931] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[20:40:01.931] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:40:01.931] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:40:01.953] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:40:01.953] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:40:01.953] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:40:02.061] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:40:02.061] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:40:02.061] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:40:02.061] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:40:02.061] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:40:17.530] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:40:17.530] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:40:17.530] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:40:17.530] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:40:17.530] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:40:28.758] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:40:28.758] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:40:28.758] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:40:28.758] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:40:28.759] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:40:31.958] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:40:31.958] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:40:31.958] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:40:32.070] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:40:32.070] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:40:32.070] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:40:32.070] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:40:32.070] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:40:47.535] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:40:47.535] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:40:47.535] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:40:47.535] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:40:47.535] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:40:58.767] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:40:58.767] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:40:58.767] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:40:58.767] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:40:58.767] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:41:01.936] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[20:41:01.937] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:41:01.937] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:41:01.960] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:41:01.960] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:41:01.960] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:41:02.078] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:41:02.078] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:41:02.078] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:41:02.078] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:41:02.078] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:41:17.543] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:41:17.543] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:41:17.543] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:41:17.543] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:41:17.543] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:41:28.771] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:41:28.771] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:41:28.771] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:41:28.772] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:41:28.772] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:41:31.964] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:41:31.964] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:41:31.964] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:41:32.085] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:41:32.085] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:41:32.085] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:41:32.085] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:41:32.085] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:41:47.551] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:41:47.551] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:41:47.551] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:41:47.551] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:41:47.551] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:41:58.776] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:41:58.776] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:41:58.776] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:41:58.776] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:41:58.776] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:42:01.939] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[20:42:01.939] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:42:01.939] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:42:01.968] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:42:01.968] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:42:01.968] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[20:42:01.968] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[20:42:01.968] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:42:01.968] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:42:01.969] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[20:42:02.092] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:42:02.092] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:42:02.092] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:42:02.092] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:42:02.092] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:42:17.559] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:42:17.559] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:42:17.559] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:42:17.559] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:42:17.559] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:42:28.783] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:42:28.783] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:42:28.783] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:42:28.783] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:42:28.783] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:42:31.972] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:42:31.972] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:42:31.972] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:42:32.100] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:42:32.100] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:42:32.100] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:42:32.100] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:42:32.100] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:42:47.568] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:42:47.568] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:42:47.568] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:42:47.568] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:42:47.568] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:42:58.791] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:42:58.791] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:42:58.791] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:42:58.791] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:42:58.791] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:43:01.943] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[20:43:01.943] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:43:01.943] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:43:01.973] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:43:01.973] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:43:01.973] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:43:02.108] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:43:02.108] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:43:02.108] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:43:02.108] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:43:02.108] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:43:17.577] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:43:17.578] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:43:17.578] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:43:17.578] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:43:17.578] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:43:28.797] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:43:28.798] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:43:28.798] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:43:28.798] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:43:28.798] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:43:31.976] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:43:31.976] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:43:31.976] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:43:32.115] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:43:32.115] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:43:32.115] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:43:32.115] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:43:32.115] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:43:47.585] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:43:47.585] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:43:47.585] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:43:47.585] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:43:47.585] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:43:58.803] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:43:58.803] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:43:58.803] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:43:58.803] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:43:58.803] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:44:01.944] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[20:44:01.944] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:44:01.944] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:44:01.981] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:44:01.981] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:44:01.981] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:44:02.119] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:44:02.119] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:44:02.120] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:44:02.120] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:44:02.120] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:44:17.590] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:44:17.590] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:44:17.590] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:44:17.590] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:44:17.590] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:44:28.812] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:44:28.812] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:44:28.812] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:44:28.812] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:44:28.812] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:44:31.981] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:44:31.981] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:44:31.981] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:44:32.128] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:44:32.128] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:44:32.128] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:44:32.128] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:44:32.128] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:44:47.599] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:44:47.600] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:44:47.600] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:44:47.600] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:44:47.600] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:44:58.821] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:44:58.821] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:44:58.821] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:44:58.821] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:44:58.821] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:45:01.948] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[20:45:01.948] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:45:01.948] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:45:01.985] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:45:01.985] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:45:01.985] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[20:45:01.985] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[20:45:01.985] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:45:01.985] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:45:01.985] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[20:45:02.136] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:45:02.136] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:45:02.136] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:45:02.136] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:45:02.136] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:45:17.606] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:45:17.606] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:45:17.606] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:45:17.606] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:45:17.606] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:45:28.829] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:45:28.829] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:45:28.829] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:45:28.830] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:45:28.830] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:45:31.989] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:45:31.989] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:45:31.989] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:45:32.142] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:45:32.142] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:45:32.142] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:45:32.142] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:45:32.142] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:45:47.614] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:45:47.614] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:45:47.614] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:45:47.614] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:45:47.614] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:45:58.837] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:45:58.837] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:45:58.837] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:45:58.837] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:45:58.837] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:46:01.953] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[20:46:01.954] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:46:01.954] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:46:01.994] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:46:01.995] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:46:01.995] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:46:02.149] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:46:02.149] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:46:02.149] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:46:02.149] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:46:02.149] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:46:17.619] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:46:17.619] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:46:17.619] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:46:17.619] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:46:17.619] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:46:28.845] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:46:28.845] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:46:28.845] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:46:28.845] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:46:28.845] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:46:31.998] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:46:31.998] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:46:31.998] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:46:32.158] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:46:32.158] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:46:32.158] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:46:32.158] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:46:32.158] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:46:47.624] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:46:47.624] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:46:47.624] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:46:47.624] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:46:47.624] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:46:58.852] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:46:58.852] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:46:58.852] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:46:58.852] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:46:58.852] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:47:01.955] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[20:47:01.955] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:47:01.955] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:47:02.000] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:47:02.000] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:47:02.000] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:47:02.166] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:47:02.166] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:47:02.166] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:47:02.166] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:47:02.166] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:47:17.632] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:47:17.632] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:47:17.632] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:47:17.633] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:47:17.633] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:47:28.856] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:47:28.856] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:47:28.856] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:47:28.856] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:47:28.856] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:47:32.004] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:47:32.004] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:47:32.004] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:47:32.174] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:47:32.174] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:47:32.174] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:47:32.174] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:47:32.174] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:47:47.640] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:47:47.640] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:47:47.640] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:47:47.640] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:47:47.640] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:47:58.866] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:47:58.866] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:47:58.866] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:47:58.866] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:47:58.866] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:48:01.960] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[20:48:01.960] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:48:01.960] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:48:02.009] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:48:02.009] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:48:02.009] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[20:48:02.009] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[20:48:02.009] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:48:02.009] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:48:02.009] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[20:48:02.183] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:48:02.183] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:48:02.183] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:48:02.183] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:48:02.183] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:48:17.648] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:48:17.648] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:48:17.648] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:48:17.648] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:48:17.648] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:48:28.875] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:48:28.875] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:48:28.875] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:48:28.875] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:48:28.875] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:48:32.014] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:48:32.014] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:48:32.014] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:48:32.187] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:48:32.187] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:48:32.188] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:48:32.188] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:48:32.188] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:48:47.653] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:48:47.653] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:48:47.653] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:48:47.653] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:48:47.653] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:48:58.879] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:48:58.879] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:48:58.880] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:48:58.880] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:48:58.880] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:49:01.961] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[20:49:01.961] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:49:01.961] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:49:02.019] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:49:02.019] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:49:02.019] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:49:02.195] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:49:02.195] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:49:02.195] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:49:02.195] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:49:02.195] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:49:17.662] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:49:17.662] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:49:17.662] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:49:17.662] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:49:17.662] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:49:28.884] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:49:28.884] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:49:28.884] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:49:28.884] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:49:28.884] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:49:32.023] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:49:32.023] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:49:32.023] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:49:32.203] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:49:32.203] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:49:32.203] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:49:32.203] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:49:32.203] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:49:47.672] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:49:47.673] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:49:47.673] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:49:47.673] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:49:47.673] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:49:58.889] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:49:58.889] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:49:58.889] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:49:58.889] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:49:58.889] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:50:00.954] DEBUG [Eureka-PeerNodesUpdater]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[20:50:00.954] WARN  [Eureka-PeerNodesUpdater]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[20:50:01.018] INFO  [ReplicaAwareInstanceRegistry - RenewalThresholdUpdater]c.n.e.r.PeerAwareInstanceRegistryImpl - Current renewal threshold is : 6
[20:50:01.966] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[20:50:01.972] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:50:01.972] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:50:02.024] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:50:02.039] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:50:02.039] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:50:02.212] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:50:02.212] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:50:02.212] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:50:02.212] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:50:02.212] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:50:17.677] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:50:17.677] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:50:17.677] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:50:17.677] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:50:17.677] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:50:28.898] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:50:28.898] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:50:28.898] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:50:28.898] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:50:28.898] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:50:32.025] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:50:32.025] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:50:32.025] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:50:32.217] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:50:32.217] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:50:32.217] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:50:32.217] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:50:32.217] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:50:47.685] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:50:47.685] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:50:47.685] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:50:47.686] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:50:47.686] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:50:58.905] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:50:58.905] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:50:58.905] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:50:58.905] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:50:58.905] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:51:01.970] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[20:51:01.970] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:51:01.970] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:51:02.026] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:51:02.026] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:51:02.026] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[20:51:02.026] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[20:51:02.026] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:51:02.026] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:51:02.026] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[20:51:02.228] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:51:02.228] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:51:02.228] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:51:02.228] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:51:02.229] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:51:17.693] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:51:17.693] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:51:17.693] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:51:17.693] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:51:17.693] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:51:28.904] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:51:28.904] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:51:28.904] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:51:28.904] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:51:28.904] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:51:32.027] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:51:32.027] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:51:32.027] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:51:32.224] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:51:32.224] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:51:32.224] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:51:32.224] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:51:32.224] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:51:47.686] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:51:47.686] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:51:47.686] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:51:47.686] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:51:47.686] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:51:58.899] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:51:58.899] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:51:58.899] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:51:58.899] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:51:58.899] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:52:01.970] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 17ms
[20:52:01.970] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:52:01.970] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:52:02.027] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:52:02.027] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:52:02.027] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:52:02.220] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:52:02.220] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:52:02.220] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:52:02.220] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:52:02.220] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:52:17.691] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:52:17.691] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:52:17.691] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:52:17.691] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:52:17.691] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:52:28.902] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:52:28.902] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:52:28.902] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:52:28.902] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:52:28.902] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:52:32.029] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:52:32.029] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:52:32.030] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:52:32.223] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:52:32.223] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:52:32.223] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:52:32.223] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:52:32.223] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:52:47.699] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:52:47.699] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:52:47.699] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:52:47.699] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:52:47.699] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:52:58.909] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:52:58.909] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:52:58.909] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:52:58.909] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:52:58.909] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:53:01.973] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[20:53:01.973] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:53:01.973] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:53:02.030] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:53:02.030] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:53:02.030] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:53:02.230] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:53:02.230] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:53:02.230] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:53:02.230] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:53:02.230] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:53:17.707] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:53:17.707] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:53:17.707] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:53:17.707] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:53:17.707] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:53:28.916] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:53:28.916] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:53:28.916] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:53:28.916] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:53:28.916] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:53:32.031] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:53:32.031] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:53:32.031] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:53:32.238] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:53:32.238] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:53:32.238] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:53:32.238] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:53:32.238] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:53:47.716] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:53:47.716] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:53:47.716] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:53:47.716] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:53:47.716] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:53:58.925] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:53:58.925] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:53:58.925] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:53:58.925] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:53:58.925] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:54:01.978] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[20:54:01.978] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:54:01.978] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:54:02.032] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:54:02.032] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:54:02.032] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[20:54:02.032] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[20:54:02.032] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:54:02.032] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:54:02.032] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[20:54:02.242] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:54:02.242] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:54:02.242] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:54:02.242] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:54:02.242] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:54:17.720] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:54:17.720] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:54:17.720] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:54:17.720] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:54:17.720] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:54:28.933] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:54:28.933] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:54:28.933] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:54:28.933] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:54:28.933] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:54:32.034] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:54:32.034] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:54:32.034] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:54:32.247] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:54:32.248] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:54:32.248] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:54:32.248] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:54:32.248] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:54:47.726] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:54:47.726] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:54:47.726] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:54:47.726] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:54:47.726] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:54:58.938] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:54:58.938] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:54:58.938] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:54:58.938] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:54:58.938] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:55:01.981] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[20:55:01.981] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:55:01.981] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:55:02.038] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:55:02.038] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:55:02.038] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:55:02.255] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:55:02.255] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:55:02.255] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:55:02.255] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:55:02.256] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:55:18.354] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:55:18.354] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:55:18.354] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:55:18.354] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:55:18.354] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:55:28.946] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:55:28.946] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:55:28.946] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:55:28.946] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:55:28.946] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:55:32.039] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:55:32.039] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:55:32.039] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:55:32.264] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:55:32.265] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:55:32.265] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:55:32.265] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:55:32.265] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:55:48.363] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:55:48.363] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:55:48.363] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:55:48.363] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:55:48.363] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:55:58.954] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:55:58.954] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:55:58.954] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:55:58.954] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:55:58.955] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:56:01.984] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[20:56:01.985] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:56:01.985] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:56:02.043] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:56:02.043] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:56:02.043] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:56:02.271] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:56:02.271] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:56:02.271] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:56:02.271] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:56:02.271] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:56:18.368] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:56:18.368] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:56:18.369] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:56:18.369] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:56:18.369] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:56:28.962] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:56:28.962] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:56:28.962] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:56:28.962] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:56:28.962] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:56:32.047] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:56:32.047] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:56:32.047] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:56:32.275] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:56:32.275] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:56:32.275] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:56:32.275] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:56:32.275] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:56:48.376] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:56:48.376] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:56:48.376] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:56:48.376] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:56:48.376] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:56:58.968] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:56:58.968] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:56:58.968] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:56:58.968] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:56:58.968] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:57:01.987] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[20:57:01.987] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:57:01.987] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:57:02.049] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:57:02.049] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:57:02.050] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[20:57:02.050] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[20:57:02.050] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:57:02.050] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:57:02.050] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[20:57:02.279] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:57:02.279] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:57:02.279] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:57:02.279] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:57:02.279] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:57:18.385] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:57:18.385] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:57:18.385] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:57:18.385] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:57:18.385] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:57:28.976] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:57:28.976] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:57:28.976] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:57:28.976] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:57:28.976] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:57:32.054] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:57:32.054] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:57:32.054] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:57:32.287] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:57:32.288] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:57:32.288] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:57:32.288] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:57:32.288] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:57:48.393] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:57:48.393] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:57:48.393] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:57:48.393] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:57:48.393] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:57:58.985] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:57:58.985] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:57:58.985] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:57:58.985] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:57:58.985] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:58:01.988] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[20:58:01.988] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:58:01.988] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:58:02.059] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:58:02.059] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:58:02.059] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:58:02.293] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:58:02.293] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:58:02.293] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:58:02.293] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:58:02.293] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:58:18.396] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:58:18.396] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:58:18.396] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:58:18.396] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:58:18.397] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:58:28.993] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:58:28.993] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:58:28.993] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:58:28.993] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:58:28.993] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:58:32.061] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:58:32.061] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:58:32.061] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:58:32.303] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:58:32.303] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:58:32.303] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:58:32.303] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:58:32.303] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:58:48.405] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:58:48.405] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:58:48.405] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:58:48.405] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:58:48.405] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:58:58.997] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:58:58.997] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:58:58.997] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:58:58.997] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:58:58.997] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:59:01.992] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[20:59:01.992] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[20:59:01.992] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[20:59:02.067] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:59:02.067] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:59:02.067] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:59:02.309] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:59:02.309] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:59:02.309] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:59:02.309] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:59:02.309] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:59:18.409] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:59:18.409] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:59:18.409] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:59:18.409] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:59:18.409] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:59:29.004] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:59:29.004] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:59:29.005] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:59:29.005] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:59:29.005] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[20:59:32.068] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[20:59:32.069] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[20:59:32.069] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[20:59:32.313] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[20:59:32.313] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:59:32.313] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:59:32.313] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[20:59:32.313] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[20:59:48.412] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[20:59:48.412] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:59:48.412] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:59:48.412] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[20:59:48.413] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[20:59:59.009] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[20:59:59.009] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[20:59:59.009] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[20:59:59.009] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[20:59:59.009] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:00:00.944] DEBUG [Eureka-PeerNodesUpdater]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[21:00:00.944] WARN  [Eureka-PeerNodesUpdater]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[21:00:01.994] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[21:00:01.994] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:00:01.994] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:00:02.071] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:00:02.071] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:00:02.071] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[21:00:02.071] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[21:00:02.071] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:00:02.071] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:00:02.071] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[21:00:02.320] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:00:02.320] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:00:02.320] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:00:02.320] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:00:02.320] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:00:18.420] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:00:18.420] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:00:18.420] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:00:18.420] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:00:18.420] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:00:29.016] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:00:29.016] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:00:29.017] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:00:29.017] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:00:29.017] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:00:32.073] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:00:32.073] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:00:32.073] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:00:32.324] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:00:32.324] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:00:32.324] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:00:32.324] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:00:32.324] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:00:48.429] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:00:48.429] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:00:48.429] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:00:48.429] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:00:48.429] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:00:59.025] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:00:59.025] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:00:59.025] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:00:59.025] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:00:59.025] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:01:01.998] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[21:01:01.998] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:01:01.998] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:01:02.077] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:01:02.077] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:01:02.077] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:01:02.330] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:01:02.330] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:01:02.330] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:01:02.330] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:01:02.330] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:01:18.437] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:01:18.437] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:01:18.437] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:01:18.437] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:01:18.437] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:01:29.034] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:01:29.034] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:01:29.034] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:01:29.034] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:01:29.034] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:01:32.080] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:01:32.080] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:01:32.080] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:01:32.338] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:01:32.338] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:01:32.338] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:01:32.338] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:01:32.338] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:01:48.443] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:01:48.443] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:01:48.443] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:01:48.443] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:01:48.443] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:01:59.039] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:01:59.039] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:01:59.040] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:01:59.040] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:01:59.040] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:02:02.000] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[21:02:02.000] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:02:02.001] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:02:02.081] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:02:02.081] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:02:02.081] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:02:02.345] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:02:02.345] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:02:02.345] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:02:02.345] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:02:02.346] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:02:18.449] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:02:18.449] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:02:18.449] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:02:18.449] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:02:18.450] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:02:29.047] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:02:29.047] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:02:29.047] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:02:29.047] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:02:29.047] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:02:32.085] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:02:32.085] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:02:32.085] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:02:32.351] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:02:32.351] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:02:32.351] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:02:32.351] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:02:32.351] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:02:48.459] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:02:48.459] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:02:48.459] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:02:48.459] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:02:48.459] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:02:59.053] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:02:59.053] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:02:59.053] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:02:59.053] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:02:59.053] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:03:02.001] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[21:03:02.001] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:03:02.001] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:03:02.088] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:03:02.088] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:03:02.088] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[21:03:02.088] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[21:03:02.088] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:03:02.088] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:03:02.089] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[21:03:02.357] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:03:02.357] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:03:02.357] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:03:02.357] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:03:02.357] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:03:18.464] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:03:18.464] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:03:18.464] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:03:18.464] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:03:18.464] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:03:29.059] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:03:29.059] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:03:29.059] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:03:29.059] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:03:29.059] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:03:32.092] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:03:32.092] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:03:32.092] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:03:32.366] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:03:32.366] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:03:32.366] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:03:32.366] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:03:32.366] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:03:48.468] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:03:48.468] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:03:48.468] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:03:48.468] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:03:48.468] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:03:59.067] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:03:59.067] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:03:59.067] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:03:59.067] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:03:59.067] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:04:02.002] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[21:04:02.014] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:04:02.014] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:04:02.094] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:04:02.094] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:04:02.094] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:04:02.374] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:04:02.374] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:04:02.374] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:04:02.374] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:04:02.374] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:04:18.473] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:04:18.473] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:04:18.473] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:04:18.473] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:04:18.473] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:04:29.071] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:04:29.071] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:04:29.071] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:04:29.071] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:04:29.071] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:04:32.096] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:04:32.096] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:04:32.096] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:04:32.380] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:04:32.380] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:04:32.381] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:04:32.381] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:04:32.381] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:04:48.480] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:04:48.480] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:04:48.480] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:04:48.480] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:04:48.481] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:04:59.080] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:04:59.080] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:04:59.080] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:04:59.080] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:04:59.080] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:05:01.020] INFO  [ReplicaAwareInstanceRegistry - RenewalThresholdUpdater]c.n.e.r.PeerAwareInstanceRegistryImpl - Current renewal threshold is : 6
[21:05:02.006] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[21:05:02.006] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:05:02.006] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:05:02.097] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:05:02.097] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:05:02.097] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:05:02.385] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:05:02.385] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:05:02.385] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:05:02.385] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:05:02.385] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:05:18.486] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:05:18.486] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:05:18.486] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:05:18.486] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:05:18.486] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:05:29.083] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:05:29.084] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:05:29.084] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:05:29.084] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:05:29.084] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:05:32.102] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:05:32.102] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:05:32.102] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:05:32.393] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:05:32.393] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:05:32.393] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:05:32.393] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:05:32.393] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:05:48.490] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:05:48.490] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:05:48.490] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:05:48.490] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:05:48.490] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:05:59.090] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:05:59.090] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:05:59.090] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:05:59.090] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:05:59.090] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:06:02.009] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[21:06:02.009] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:06:02.009] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:06:02.107] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:06:02.107] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:06:02.107] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[21:06:02.107] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[21:06:02.107] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:06:02.107] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:06:02.107] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[21:06:02.400] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:06:02.400] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:06:02.400] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:06:02.400] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:06:02.400] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:06:18.499] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:06:18.499] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:06:18.499] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:06:18.499] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:06:18.499] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:06:29.096] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:06:29.096] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:06:29.096] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:06:29.096] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:06:29.096] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:06:32.107] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:06:32.107] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:06:32.107] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:06:32.401] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:06:32.401] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:06:32.401] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:06:32.401] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:06:32.401] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:06:48.502] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:06:48.502] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:06:48.502] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:06:48.502] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:06:48.502] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:06:59.099] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:06:59.099] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:06:59.099] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:06:59.099] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:06:59.099] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:07:02.009] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[21:07:02.009] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:07:02.009] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:07:02.109] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:07:02.109] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:07:02.109] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:07:02.407] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:07:02.407] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:07:02.407] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:07:02.407] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:07:02.407] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:07:18.510] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:07:18.510] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:07:18.510] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:07:18.510] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:07:18.510] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:07:29.102] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:07:29.102] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:07:29.103] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:07:29.103] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:07:29.103] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:07:32.113] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:07:32.113] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:07:32.113] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:07:32.412] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:07:32.412] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:07:32.412] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:07:32.412] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:07:32.412] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:07:48.520] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:07:48.520] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:07:48.520] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:07:48.520] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:07:48.520] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:07:59.112] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:07:59.112] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:07:59.112] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:07:59.112] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:07:59.112] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:08:02.013] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[21:08:02.014] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:08:02.014] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:08:02.116] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:08:02.116] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:08:02.116] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:08:02.446] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:08:02.446] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:08:02.446] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:08:02.446] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:08:02.446] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:08:18.528] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:08:18.528] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:08:18.528] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:08:18.528] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:08:18.528] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:08:29.120] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:08:29.120] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:08:29.120] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:08:29.120] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:08:29.120] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:08:32.121] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:08:32.121] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:08:32.121] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:08:32.452] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:08:32.452] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:08:32.452] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:08:32.452] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:08:32.452] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:08:48.534] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:08:48.534] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:08:48.534] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:08:48.534] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:08:48.534] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:08:59.130] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:08:59.130] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:08:59.130] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:08:59.130] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:08:59.130] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:09:02.017] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[21:09:02.017] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:09:02.017] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:09:02.122] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:09:02.122] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:09:02.122] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[21:09:02.122] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[21:09:02.122] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:09:02.122] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:09:02.123] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[21:09:02.456] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:09:02.456] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:09:02.456] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:09:02.456] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:09:02.456] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:09:18.542] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:09:18.542] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:09:18.542] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:09:18.542] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:09:18.542] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:09:29.138] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:09:29.138] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:09:29.138] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:09:29.138] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:09:29.138] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:09:32.126] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:09:32.126] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:09:32.126] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:09:32.466] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:09:32.466] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:09:32.466] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:09:32.466] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:09:32.466] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:09:48.550] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:09:48.551] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:09:48.551] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:09:48.551] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:09:48.551] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:09:59.146] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:09:59.146] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:09:59.146] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:09:59.146] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:09:59.146] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:10:00.948] DEBUG [Eureka-PeerNodesUpdater]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[21:10:00.948] WARN  [Eureka-PeerNodesUpdater]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[21:10:02.020] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[21:10:02.020] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:10:02.020] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:10:02.129] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:10:02.129] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:10:02.129] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:10:02.472] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:10:02.472] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:10:02.472] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:10:02.472] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:10:02.472] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:10:18.555] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:10:18.555] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:10:18.555] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:10:18.555] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:10:18.555] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:10:29.154] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:10:29.154] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:10:29.154] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:10:29.154] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:10:29.154] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:10:32.133] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:10:32.133] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:10:32.133] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:10:32.478] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:10:32.478] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:10:32.478] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:10:32.478] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:10:32.478] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:10:48.566] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:10:48.566] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:10:48.566] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:10:48.566] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:10:48.566] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:10:59.159] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:10:59.159] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:10:59.159] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:10:59.159] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:10:59.160] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:11:02.025] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[21:11:02.025] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:11:02.025] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:11:02.139] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:11:02.139] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:11:02.139] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:11:02.483] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:11:02.483] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:11:02.483] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:11:02.484] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:11:02.484] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:11:18.575] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:11:18.575] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:11:18.575] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:11:18.575] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:11:18.575] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:11:29.167] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:11:29.167] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:11:29.167] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:11:29.167] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:11:29.167] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:11:32.142] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:11:32.142] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:11:32.142] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:11:32.492] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:11:32.492] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:11:32.492] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:11:32.492] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:11:32.492] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:11:48.582] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:11:48.582] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:11:48.582] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:11:48.582] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:11:48.582] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:11:59.175] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:11:59.175] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:11:59.175] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:11:59.175] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:11:59.175] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:12:02.030] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 5ms
[21:12:02.031] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:12:02.031] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:12:02.147] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:12:02.147] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:12:02.147] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[21:12:02.148] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[21:12:02.148] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:12:02.148] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:12:02.148] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[21:12:02.501] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:12:02.501] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:12:02.501] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:12:02.501] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:12:02.502] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:12:18.592] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:12:18.592] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:12:18.592] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:12:18.592] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:12:18.592] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:12:29.181] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:12:29.181] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:12:29.181] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:12:29.181] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:12:29.181] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:12:32.151] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:12:32.152] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:12:32.152] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:12:32.512] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:12:32.512] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:12:32.512] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:12:32.512] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:12:32.512] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:12:48.602] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:12:48.603] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:12:48.603] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:12:48.603] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:12:48.603] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:12:59.187] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:12:59.187] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:12:59.187] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:12:59.187] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:12:59.187] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:13:02.031] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[21:13:02.031] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:13:02.031] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:13:02.152] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:13:02.152] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:13:02.152] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:13:02.521] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:13:02.521] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:13:02.521] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:13:02.521] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:13:02.521] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:13:18.611] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:13:18.611] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:13:18.611] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:13:18.611] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:13:18.611] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:13:29.193] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:13:29.193] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:13:29.193] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:13:29.193] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:13:29.193] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:13:32.152] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:13:32.152] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:13:32.153] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:13:32.526] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:13:32.526] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:13:32.526] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:13:32.526] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:13:32.526] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:13:48.619] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:13:48.619] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:13:48.619] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:13:48.619] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:13:48.619] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:13:59.202] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:13:59.202] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:13:59.202] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:13:59.202] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:13:59.202] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:14:02.037] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 5ms
[21:14:02.037] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:14:02.037] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:14:02.155] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:14:02.156] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:14:02.156] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:14:02.536] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:14:02.536] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:14:02.536] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:14:02.536] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:14:02.536] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:14:18.629] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:14:18.629] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:14:18.629] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:14:18.629] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:14:18.629] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:14:29.213] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:14:29.213] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:14:29.213] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:14:29.213] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:14:29.213] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:14:32.156] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:14:32.156] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:14:32.156] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:14:32.541] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:14:32.541] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:14:32.541] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:14:32.541] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:14:32.542] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:14:48.638] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:14:48.638] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:14:48.638] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:14:48.638] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:14:48.638] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:14:59.219] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:14:59.219] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:14:59.219] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:14:59.220] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:14:59.220] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:15:02.043] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[21:15:02.043] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:15:02.043] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:15:02.160] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:15:02.161] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:15:02.161] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[21:15:02.161] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[21:15:02.161] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:15:02.161] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:15:02.162] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[21:15:02.551] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:15:02.551] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:15:02.551] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:15:02.551] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:15:02.551] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:15:18.647] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:15:18.647] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:15:18.647] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:15:18.647] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:15:18.647] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:15:29.228] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:15:29.228] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:15:29.228] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:15:29.228] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:15:29.228] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:15:32.163] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:15:32.163] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:15:32.163] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:15:32.559] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:15:32.559] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:15:32.559] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:15:32.559] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:15:32.559] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:15:48.655] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:15:48.655] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:15:48.655] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:15:48.655] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:15:48.655] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:15:59.239] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:15:59.239] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:15:59.239] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:15:59.239] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:15:59.239] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:16:02.048] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 5ms
[21:16:02.048] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:16:02.048] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:16:02.164] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:16:02.164] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:16:02.164] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:16:02.569] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:16:02.569] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:16:02.570] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:16:02.570] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:16:02.570] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:16:18.664] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:16:18.664] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:16:18.664] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:16:18.664] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:16:18.664] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:16:29.244] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:16:29.245] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:16:29.245] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:16:29.245] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:16:29.245] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:16:32.169] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:16:32.169] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:16:32.169] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:16:32.578] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:16:32.578] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:16:32.578] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:16:32.578] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:16:32.578] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:16:48.674] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:16:48.674] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:16:48.674] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:16:48.674] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:16:48.674] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:16:59.254] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:16:59.254] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:16:59.254] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:16:59.254] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:16:59.254] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:17:02.053] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[21:17:02.053] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:17:02.053] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:17:02.174] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:17:02.174] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:17:02.174] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:17:02.588] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:17:02.588] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:17:02.588] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:17:02.588] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:17:02.588] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:17:18.686] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:17:18.686] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:17:18.686] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:17:18.686] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:17:18.686] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:17:29.266] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:17:29.266] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:17:29.266] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:17:29.266] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:17:29.266] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:17:32.178] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:17:32.178] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:17:32.178] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:17:32.598] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:17:32.599] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:17:32.599] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:17:32.599] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:17:32.599] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:17:48.697] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:17:48.697] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:17:48.697] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:17:48.697] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:17:48.697] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:17:59.274] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:17:59.274] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:17:59.274] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:17:59.274] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:17:59.274] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:18:02.054] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[21:18:02.182] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:18:02.984] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:18:02.984] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:18:02.984] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:18:02.984] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[21:18:02.984] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[21:18:02.984] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:18:03.000] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:18:03.000] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[21:18:03.006] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:18:03.006] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:18:03.006] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:18:03.006] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:18:03.006] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:18:19.176] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:18:19.176] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:18:19.176] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:18:19.176] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:18:19.176] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:18:29.279] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:18:29.279] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:18:29.279] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:18:29.279] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:18:29.279] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:18:32.185] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:18:32.185] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:18:32.185] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:18:33.010] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:18:33.011] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:18:33.011] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:18:33.011] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:18:33.011] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:18:49.184] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:18:49.184] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:18:49.184] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:18:49.184] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:18:49.184] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:18:59.288] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:18:59.288] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:18:59.288] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:18:59.288] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:18:59.288] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:19:02.058] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[21:19:02.058] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:19:02.058] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:19:02.185] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:19:02.185] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:19:02.185] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:19:03.016] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:19:03.016] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:19:03.016] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:19:03.016] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:19:03.016] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:19:19.191] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:19:19.191] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:19:19.191] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:19:19.191] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:19:19.191] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:19:29.297] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:19:29.297] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:19:29.297] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:19:29.297] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:19:29.297] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:19:32.186] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:19:32.186] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:19:32.186] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:19:33.024] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:19:33.024] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:19:33.024] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:19:33.024] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:19:33.024] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:19:49.199] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:19:49.199] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:19:49.199] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:19:49.199] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:19:49.199] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:19:59.303] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:19:59.303] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:19:59.303] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:19:59.303] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:19:59.303] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:20:00.958] DEBUG [Eureka-PeerNodesUpdater]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[21:20:00.958] WARN  [Eureka-PeerNodesUpdater]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[21:20:01.027] INFO  [ReplicaAwareInstanceRegistry - RenewalThresholdUpdater]c.n.e.r.PeerAwareInstanceRegistryImpl - Current renewal threshold is : 6
[21:20:02.059] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[21:20:02.059] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:20:02.059] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:20:02.188] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:20:02.189] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:20:02.189] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:20:03.031] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:20:03.031] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:20:03.031] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:20:03.031] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:20:03.031] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:20:19.203] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:20:19.203] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:20:19.203] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:20:19.203] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:20:19.203] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:20:29.312] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:20:29.312] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:20:29.312] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:20:29.312] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:20:29.312] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:20:32.189] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:20:32.189] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:20:32.189] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:20:33.040] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:20:33.040] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:20:33.040] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:20:33.040] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:20:33.040] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:20:49.211] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:20:49.211] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:20:49.211] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:20:49.211] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:20:49.211] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:20:59.319] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:20:59.319] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:20:59.319] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:20:59.319] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:20:59.319] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:21:02.063] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[21:21:02.063] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:21:02.063] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:21:02.193] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:21:02.193] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:21:02.193] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:21:03.048] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:21:03.048] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:21:03.048] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:21:03.048] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:21:03.048] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:21:19.218] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:21:19.218] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:21:19.218] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:21:19.218] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:21:19.218] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:21:29.338] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:21:29.338] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:21:29.338] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:21:29.338] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:21:29.338] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:21:32.210] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:21:32.211] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:21:32.211] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[21:21:32.211] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[21:21:32.211] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:21:32.211] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:21:32.211] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[21:21:33.069] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:21:33.070] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:21:33.070] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:21:33.070] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:21:33.070] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:21:49.249] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:21:49.249] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:21:49.249] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:21:49.249] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:21:49.249] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:21:59.361] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:21:59.361] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:21:59.361] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:21:59.361] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:21:59.361] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:22:02.092] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[21:22:02.092] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:22:02.092] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:22:02.226] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:22:02.226] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:22:02.226] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:22:03.085] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:22:03.085] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:22:03.085] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:22:03.085] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:22:03.085] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:22:19.262] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:22:19.262] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:22:19.262] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:22:19.262] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:22:19.262] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:22:29.372] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:22:29.372] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:22:29.372] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:22:29.372] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:22:29.372] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:22:32.231] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:22:32.231] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:22:32.231] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:22:33.093] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:22:33.094] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:22:33.094] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:22:33.094] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:22:33.094] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:22:49.267] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:22:49.267] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:22:49.267] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:22:49.267] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:22:49.267] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:22:59.382] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:22:59.382] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:22:59.382] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:22:59.382] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:22:59.382] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:23:02.097] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[21:23:02.097] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:23:02.097] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:23:02.236] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:23:02.236] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:23:02.236] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:23:03.101] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:23:03.102] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:23:03.102] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:23:03.102] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:23:03.102] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:23:19.273] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:23:19.273] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:23:19.273] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:23:19.273] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:23:19.273] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:23:29.390] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:23:29.390] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:23:29.391] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:23:29.391] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:23:29.391] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:23:32.241] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:23:32.241] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:23:32.241] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:23:33.107] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:23:33.108] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:23:33.108] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:23:33.108] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:23:33.108] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:23:49.279] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:23:49.280] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:23:49.280] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:23:49.280] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:23:49.280] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:23:59.399] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:23:59.399] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:23:59.399] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:23:59.399] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:23:59.399] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:24:02.103] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[21:24:02.103] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:24:02.103] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:24:02.245] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:24:02.245] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:24:02.245] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:24:03.113] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:24:03.113] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:24:03.113] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:24:03.113] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:24:03.113] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:24:19.285] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:24:19.285] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:24:19.285] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:24:19.285] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:24:19.285] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:24:29.408] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:24:29.408] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:24:29.408] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:24:29.408] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:24:29.408] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:24:32.251] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:24:32.251] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:24:32.251] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[21:24:32.251] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[21:24:32.251] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:24:32.251] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:24:32.251] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[21:24:33.120] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:24:33.120] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:24:33.120] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:24:33.120] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:24:33.120] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:24:49.290] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:24:49.290] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:24:49.290] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:24:49.290] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:24:49.290] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:24:59.415] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:24:59.415] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:24:59.415] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:24:59.415] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:24:59.415] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:25:02.108] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[21:25:02.108] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:25:02.108] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:25:02.255] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:25:02.255] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:25:02.255] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:25:03.125] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:25:03.125] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:25:03.125] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:25:03.125] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:25:03.125] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:25:19.299] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:25:19.299] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:25:19.299] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:25:19.299] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:25:19.299] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:25:29.420] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:25:29.420] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:25:29.420] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:25:29.420] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:25:29.420] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:25:32.261] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:25:32.261] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:25:32.261] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:25:33.132] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:25:33.132] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:25:33.132] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:25:33.132] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:25:33.132] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:25:49.307] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:25:49.307] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:25:49.307] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:25:49.307] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:25:49.307] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:25:59.429] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:25:59.429] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:25:59.429] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:25:59.429] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:25:59.429] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:26:02.114] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[21:26:02.114] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:26:02.114] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:26:02.266] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:26:02.266] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:26:02.266] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:26:03.142] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:26:03.142] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:26:03.143] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:26:03.143] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:26:03.143] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:26:19.312] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:26:19.312] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:26:19.312] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:26:19.312] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:26:19.312] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:26:29.438] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:26:29.438] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:26:29.438] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:26:29.438] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:26:29.438] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:26:32.268] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:26:32.268] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:26:32.268] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:26:33.151] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:26:33.151] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:26:33.151] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:26:33.151] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:26:33.151] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:26:49.319] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:26:49.319] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:26:49.319] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:26:49.319] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:26:49.319] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:26:59.443] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:26:59.443] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:26:59.443] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:26:59.443] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:26:59.443] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:27:02.119] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[21:27:02.119] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:27:02.119] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:27:02.273] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:27:02.273] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:27:02.273] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:27:03.158] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:27:03.158] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:27:03.158] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:27:03.158] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:27:03.158] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:27:19.326] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:27:19.326] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:27:19.326] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:27:19.326] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:27:19.326] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:27:29.450] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:27:29.450] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:27:29.450] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:27:29.450] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:27:29.450] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:27:32.276] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:27:32.276] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:27:32.276] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[21:27:32.276] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[21:27:32.276] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:27:32.276] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:27:32.276] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[21:27:33.164] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:27:33.165] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:27:33.165] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:27:33.165] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:27:33.165] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:27:49.333] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:27:49.333] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:27:49.333] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:27:49.333] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:27:49.333] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:27:59.458] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:27:59.458] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:27:59.458] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:27:59.458] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:27:59.458] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:28:02.122] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[21:28:02.122] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:28:02.122] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:28:02.278] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:28:02.278] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:28:02.278] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:28:03.169] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:28:03.169] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:28:03.169] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:28:03.169] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:28:03.169] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:28:19.339] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:28:19.339] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:28:19.339] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:28:19.339] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:28:19.339] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:28:29.466] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:28:29.466] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:28:29.466] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:28:29.466] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:28:29.466] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:28:32.283] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:28:32.283] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:28:32.283] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:28:33.178] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:28:33.178] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:28:33.178] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:28:33.178] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:28:33.178] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:28:49.345] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:28:49.345] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:28:49.345] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:28:49.345] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:28:49.345] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:28:59.475] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:28:59.475] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:28:59.475] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:28:59.475] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:28:59.475] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:29:02.126] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[21:29:02.127] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:29:02.127] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:29:02.287] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:29:02.287] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:29:02.287] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:29:03.186] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:29:03.186] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:29:03.186] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:29:03.186] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:29:03.186] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:29:19.352] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:29:19.352] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:29:19.352] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:29:19.352] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:29:19.352] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:29:29.483] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:29:29.483] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:29:29.483] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:29:29.483] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:29:29.483] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:29:32.293] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:29:32.293] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:29:32.293] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:29:33.195] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:29:33.195] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:29:33.195] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:29:33.195] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:29:33.195] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:29:49.362] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:29:49.362] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:29:49.362] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:29:49.362] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:29:49.362] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:29:59.487] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:29:59.487] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:29:59.487] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:29:59.487] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:29:59.487] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:30:01.000] DEBUG [Eureka-PeerNodesUpdater]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[21:30:01.000] WARN  [Eureka-PeerNodesUpdater]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[21:30:02.131] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[21:30:02.131] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:30:02.131] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:30:02.295] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:30:02.295] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:30:02.295] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:30:03.203] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:30:03.203] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:30:03.203] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:30:03.203] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:30:03.203] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:30:19.368] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:30:19.368] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:30:19.368] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:30:19.368] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:30:19.368] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:30:29.497] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:30:29.497] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:30:29.497] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:30:29.497] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:30:29.497] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:30:32.299] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:30:32.299] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:30:32.299] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[21:30:32.299] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[21:30:32.299] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:30:32.299] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:30:32.299] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[21:30:33.212] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:30:33.212] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:30:33.212] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:30:33.212] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:30:33.212] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:30:49.373] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:30:49.373] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:30:49.373] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:30:49.373] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:30:49.373] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:30:59.505] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:30:59.505] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:30:59.505] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:30:59.505] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:30:59.505] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:31:02.135] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[21:31:02.135] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:31:02.135] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:31:02.304] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:31:02.304] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:31:02.304] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:31:03.221] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:31:03.221] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:31:03.221] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:31:03.221] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:31:03.221] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:31:19.381] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:31:19.381] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:31:19.381] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:31:19.381] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:31:19.381] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:31:29.513] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:31:29.513] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:31:29.513] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:31:29.513] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:31:29.513] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:31:32.308] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:31:32.308] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:31:32.308] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:31:33.229] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:31:33.230] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:31:33.230] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:31:33.230] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:31:33.230] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:31:49.391] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:31:49.391] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:31:49.391] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:31:49.391] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:31:49.391] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:31:59.519] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:31:59.519] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:31:59.519] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:31:59.519] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:31:59.519] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:32:02.138] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[21:32:02.138] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:32:02.138] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:32:02.311] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:32:02.311] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:32:02.311] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:32:03.234] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:32:03.234] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:32:03.234] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:32:03.234] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:32:03.234] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:32:19.400] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:32:19.400] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:32:19.400] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:32:19.400] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:32:19.400] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:32:29.530] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:32:29.530] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:32:29.530] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:32:29.530] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:32:29.530] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:32:32.312] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:32:32.312] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:32:32.312] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:32:33.244] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:32:33.245] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:32:33.245] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:32:33.245] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:32:33.245] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:32:49.408] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:32:49.408] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:32:49.408] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:32:49.408] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:32:49.409] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:32:59.538] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:32:59.538] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:32:59.538] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:32:59.538] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:32:59.538] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:33:02.141] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[21:33:02.141] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:33:02.141] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:33:02.313] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:33:02.313] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:33:02.313] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:33:03.252] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:33:03.252] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:33:03.252] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:33:03.252] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:33:03.252] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:33:19.418] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:33:19.418] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:33:19.418] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:33:19.418] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:33:19.418] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:33:29.547] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:33:29.547] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:33:29.547] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:33:29.547] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:33:29.547] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:33:32.314] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:33:32.314] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:33:32.314] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[21:33:32.315] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[21:33:32.315] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:33:32.315] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:33:32.315] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[21:33:33.261] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:33:33.261] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:33:33.261] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:33:33.261] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:33:33.261] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:33:49.426] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:33:49.426] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:33:49.426] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:33:49.426] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:33:49.426] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:33:59.553] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:33:59.554] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:33:59.554] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:33:59.554] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:33:59.554] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:34:02.146] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[21:34:02.146] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:34:02.146] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:34:02.319] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:34:02.319] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:34:02.319] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:34:03.271] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:34:03.271] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:34:03.271] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:34:03.271] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:34:03.271] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:34:19.430] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:34:19.430] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:34:19.430] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:34:19.430] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:34:19.430] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:34:29.562] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:34:29.562] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:34:29.562] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:34:29.562] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:34:29.562] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:34:32.324] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:34:32.324] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:34:32.324] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:34:33.280] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:34:33.280] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:34:33.280] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:34:33.280] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:34:33.280] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:34:49.436] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:34:49.436] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:34:49.436] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:34:49.436] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:34:49.436] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:34:59.568] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:34:59.568] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:34:59.568] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:34:59.568] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:34:59.568] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:35:01.070] INFO  [ReplicaAwareInstanceRegistry - RenewalThresholdUpdater]c.n.e.r.PeerAwareInstanceRegistryImpl - Current renewal threshold is : 6
[21:35:02.152] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[21:35:02.152] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:35:02.152] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:35:02.328] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:35:02.328] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:35:02.328] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:35:03.289] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:35:03.289] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:35:03.289] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:35:03.289] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:35:03.289] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:35:19.443] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:35:19.443] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:35:19.443] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:35:19.443] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:35:19.443] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:35:29.573] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:35:29.573] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:35:29.573] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:35:29.573] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:35:29.573] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:35:32.328] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:35:32.328] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:35:32.328] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:35:33.299] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:35:33.299] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:35:33.299] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:35:33.299] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:35:33.299] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:35:49.450] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:35:49.450] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:35:49.450] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:35:49.450] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:35:49.450] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:35:59.580] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:35:59.580] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:35:59.580] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:35:59.580] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:35:59.580] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:36:02.157] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[21:36:02.157] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:36:02.157] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:36:02.332] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:36:02.332] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:36:02.332] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:36:03.305] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:36:03.305] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:36:03.305] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:36:03.305] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:36:03.305] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:36:19.461] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:36:19.461] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:36:19.461] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:36:19.461] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:36:19.461] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:36:29.582] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:36:29.582] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:36:29.583] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:36:29.583] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:36:29.583] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:36:32.333] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:36:32.333] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:36:32.333] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[21:36:32.333] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[21:36:32.333] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:36:32.333] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:36:32.333] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[21:36:33.305] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:36:33.305] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:36:33.305] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:36:33.305] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:36:33.305] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:36:49.456] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:36:49.456] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:36:49.456] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:36:49.456] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:36:49.456] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:36:59.585] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:36:59.585] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:36:59.585] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:36:59.585] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:36:59.585] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:37:02.159] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 14ms
[21:37:02.159] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:37:02.159] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:37:02.333] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:37:02.333] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:37:02.333] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:37:03.309] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:37:03.309] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:37:03.309] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:37:03.309] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:37:03.309] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:37:19.460] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:37:19.460] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:37:19.460] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:37:19.460] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:37:19.460] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:37:29.593] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:37:29.593] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:37:29.593] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:37:29.593] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:37:29.594] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:37:32.336] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:37:32.336] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:37:32.336] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:37:33.319] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:37:33.319] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:37:33.319] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:37:33.319] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:37:33.319] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:37:49.468] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:37:49.468] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:37:49.468] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:37:49.468] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:37:49.468] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:37:59.602] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:37:59.602] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:37:59.602] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:37:59.602] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:37:59.602] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:38:02.162] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[21:38:02.163] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:38:02.163] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:38:02.339] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:38:02.339] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:38:02.339] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:38:03.326] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:38:03.327] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:38:03.327] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:38:03.327] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:38:03.327] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:38:19.477] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:38:19.477] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:38:19.477] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:38:19.477] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:38:19.477] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:38:29.611] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:38:29.611] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:38:29.611] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:38:29.611] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:38:29.611] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:38:32.343] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:38:32.343] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:38:32.343] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:38:33.336] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:38:33.336] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:38:33.336] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:38:33.336] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:38:33.336] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:38:49.483] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:38:49.483] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:38:49.483] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:38:49.483] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:38:49.483] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:38:59.619] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:38:59.619] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:38:59.619] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:38:59.619] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:38:59.619] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:39:02.166] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[21:39:02.166] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:39:02.166] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:39:02.346] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:39:02.346] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:39:02.346] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:39:03.345] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:39:03.345] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:39:03.345] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:39:03.345] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:39:03.345] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:39:19.490] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:39:19.491] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:39:19.491] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:39:19.491] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:39:19.491] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:39:29.627] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:39:29.627] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:39:29.627] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:39:29.627] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:39:29.627] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:39:32.350] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:39:32.350] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:39:32.351] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[21:39:32.351] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[21:39:32.351] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:39:32.351] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:39:32.351] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[21:39:33.353] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:39:33.353] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:39:33.353] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:39:33.353] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:39:33.353] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:39:49.499] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:39:49.499] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:39:49.499] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:39:49.499] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:39:49.499] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:39:59.635] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:39:59.635] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:39:59.635] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:39:59.636] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:39:59.636] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:40:01.000] DEBUG [Eureka-PeerNodesUpdater]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[21:40:01.000] WARN  [Eureka-PeerNodesUpdater]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[21:40:02.170] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[21:40:02.170] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:40:02.170] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:40:02.355] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:40:02.355] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:40:02.355] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:40:03.361] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:40:03.361] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:40:03.361] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:40:03.361] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:40:03.361] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:40:19.507] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:40:19.507] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:40:19.508] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:40:19.508] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:40:19.508] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:40:29.645] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:40:29.645] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:40:29.645] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:40:29.645] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:40:29.645] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:40:32.359] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:40:32.359] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:40:32.359] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:40:33.367] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:40:33.367] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:40:33.367] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:40:33.367] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:40:33.367] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:40:49.515] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:40:49.515] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:40:49.515] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:40:49.516] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:40:49.516] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:40:59.651] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:40:59.651] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:40:59.651] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:40:59.651] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:40:59.651] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:41:02.172] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[21:41:02.172] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:41:02.172] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:41:02.362] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:41:02.362] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:41:02.362] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:41:03.381] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:41:03.381] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:41:03.381] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:41:03.381] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:41:03.381] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:41:19.526] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:41:19.526] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:41:19.526] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:41:19.526] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:41:19.526] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:41:29.659] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:41:29.659] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:41:29.659] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:41:29.659] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:41:29.659] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:41:32.367] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:41:32.368] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:41:32.368] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:41:33.390] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:41:33.390] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:41:33.390] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:41:33.390] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:41:33.390] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:41:49.531] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:41:49.531] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:41:49.531] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:41:49.531] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:41:49.531] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:41:59.669] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:41:59.669] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:41:59.669] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:41:59.669] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:41:59.669] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:42:02.177] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[21:42:02.178] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:42:02.178] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:42:02.371] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:42:02.371] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:42:02.371] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:42:03.401] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:42:03.402] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:42:03.402] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:42:03.402] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:42:03.402] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:42:19.537] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:42:19.537] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:42:19.537] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:42:19.537] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:42:19.537] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:42:29.678] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:42:29.678] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:42:29.678] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:42:29.678] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:42:29.678] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:42:32.373] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:42:32.373] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:42:32.374] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[21:42:32.374] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[21:42:32.374] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:42:32.374] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:42:32.375] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[21:42:33.411] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:42:33.411] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:42:33.411] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:42:33.411] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:42:33.411] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:42:49.542] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:42:49.542] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:42:49.543] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:42:49.543] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:42:49.543] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:42:59.683] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:42:59.683] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:42:59.683] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:42:59.683] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:42:59.683] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:43:02.183] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[21:43:02.183] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:43:02.183] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:43:02.378] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:43:02.378] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:43:02.378] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:43:03.420] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:43:03.421] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:43:03.421] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:43:03.421] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:43:03.421] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:43:19.549] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:43:19.549] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:43:19.549] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:43:19.549] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:43:19.549] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:43:29.688] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:43:29.688] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:43:29.688] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:43:29.689] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:43:29.689] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:43:32.380] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:43:32.380] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:43:32.380] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:43:33.430] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:43:33.430] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:43:33.430] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:43:33.430] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:43:33.430] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:43:49.556] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:43:49.556] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:43:49.556] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:43:49.556] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:43:49.556] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:43:59.695] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:43:59.695] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:43:59.695] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:43:59.695] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:43:59.695] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:44:02.189] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 5ms
[21:44:02.189] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:44:02.189] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:44:02.383] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:44:02.383] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:44:02.383] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:44:03.438] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:44:03.438] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:44:03.438] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:44:03.438] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:44:03.438] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:44:19.566] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:44:19.566] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:44:19.566] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:44:19.566] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:44:19.566] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:44:29.703] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:44:29.703] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:44:29.703] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:44:29.703] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:44:29.703] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:44:32.386] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:44:32.386] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:44:32.386] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:44:33.445] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:44:33.445] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:44:33.445] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:44:33.445] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:44:33.445] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:44:49.576] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:44:49.576] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:44:49.576] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:44:49.576] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:44:49.576] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:44:59.710] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:44:59.711] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:44:59.711] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:44:59.711] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:44:59.711] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:45:02.195] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[21:45:02.195] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:45:02.195] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:45:02.388] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:45:02.388] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:45:02.388] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:45:03.455] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:45:03.455] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:45:03.455] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:45:03.455] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:45:03.455] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:45:19.584] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:45:19.584] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:45:19.584] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:45:19.584] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:45:19.584] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:45:29.718] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:45:29.718] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:45:29.718] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:45:29.718] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:45:29.718] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:45:32.393] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:45:32.393] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:45:32.393] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[21:45:32.394] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[21:45:32.394] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:45:32.394] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:45:32.394] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[21:45:33.464] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:45:33.464] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:45:33.464] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:45:33.464] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:45:33.464] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:45:49.594] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:45:49.594] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:45:49.594] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:45:49.594] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:45:49.594] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:45:59.727] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:45:59.727] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:45:59.727] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:45:59.727] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:45:59.727] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:46:02.199] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[21:46:02.199] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:46:02.200] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:46:02.397] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:46:02.397] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:46:02.397] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:46:03.470] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:46:03.470] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:46:03.470] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:46:03.470] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:46:03.470] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:46:19.603] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:46:19.603] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:46:19.603] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:46:19.603] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:46:19.603] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:46:29.736] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:46:29.736] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:46:29.736] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:46:29.736] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:46:29.736] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:46:32.402] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:46:32.402] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:46:32.402] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:46:33.478] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:46:33.478] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:46:33.478] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:46:33.478] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:46:33.478] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:46:49.610] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:46:49.610] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:46:49.610] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:46:49.610] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:46:49.610] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:46:59.745] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:46:59.745] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:46:59.745] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:46:59.745] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:46:59.745] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:47:02.204] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[21:47:02.207] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:47:02.207] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:47:02.407] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:47:02.407] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:47:02.407] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:47:03.488] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:47:03.488] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:47:03.488] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:47:03.488] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:47:03.488] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:47:19.617] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:47:19.617] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:47:19.618] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:47:19.618] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:47:19.618] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:47:29.749] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:47:29.749] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:47:29.749] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:47:29.749] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:47:29.749] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:47:32.412] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:47:32.412] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:47:32.412] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:47:33.493] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:47:33.493] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:47:33.493] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:47:33.493] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:47:33.493] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:47:49.627] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:47:49.628] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:47:49.628] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:47:49.628] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:47:49.628] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:47:59.757] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:47:59.757] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:47:59.757] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:47:59.757] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:47:59.757] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:48:02.205] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[21:48:02.205] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:48:02.205] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:48:02.415] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:48:02.415] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:48:02.415] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:48:03.501] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:48:03.501] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:48:03.501] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:48:03.501] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:48:03.501] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:48:19.634] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:48:19.634] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:48:19.634] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:48:19.634] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:48:19.634] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:48:29.762] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:48:29.762] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:48:29.762] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:48:29.762] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:48:29.762] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:48:32.420] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:48:32.420] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:48:32.421] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[21:48:32.421] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_3_
[21:48:32.421] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:48:32.421] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:48:32.421] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_3_
[21:48:33.510] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:48:33.510] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:48:33.510] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:48:33.510] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:48:33.510] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:48:49.644] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:48:49.644] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:48:49.644] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:48:49.644] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:48:49.644] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:48:59.765] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:48:59.765] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:48:59.765] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:48:59.765] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:48:59.765] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:49:02.207] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[21:49:02.207] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:49:02.207] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:49:02.421] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:49:02.422] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:49:02.422] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:49:03.518] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:49:03.518] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:49:03.518] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:49:03.518] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:49:03.518] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:49:19.652] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:49:19.652] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:49:19.652] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:49:19.652] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:49:19.652] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:49:29.773] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:49:29.773] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:49:29.773] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:49:29.773] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:49:29.773] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:49:32.422] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:49:32.422] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:49:32.422] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:49:33.527] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:49:33.527] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:49:33.527] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:49:33.527] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:49:33.527] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:49:49.661] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:49:49.661] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:49:49.662] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:49:49.662] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:49:49.662] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:49:59.782] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:49:59.782] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:49:59.782] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:49:59.782] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:49:59.782] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:50:01.015] DEBUG [Eureka-PeerNodesUpdater]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[21:50:01.015] WARN  [Eureka-PeerNodesUpdater]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[21:50:01.073] INFO  [ReplicaAwareInstanceRegistry - RenewalThresholdUpdater]c.n.e.r.PeerAwareInstanceRegistryImpl - Current renewal threshold is : 6
[21:50:02.211] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[21:50:02.211] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:50:02.211] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:50:02.427] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:50:02.427] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:50:02.427] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:50:03.532] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:50:03.532] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:50:03.532] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:50:03.532] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:50:03.532] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:50:19.669] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:50:19.669] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:50:19.669] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:50:19.669] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:50:19.669] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:50:24.412] DEBUG [http-nio-20000-exec-8]c.n.d.u.DeserializerStringCache - clearing global-level cache with size 1
[21:50:24.412] DEBUG [http-nio-20000-exec-8]c.n.d.u.DeserializerStringCache - clearing app-level serialization cache with size 8
[21:50:24.412] DEBUG [http-nio-20000-exec-8]c.n.e.r.ApplicationResource - Registering instance 192.168.31.38:shop-cloud-user-service:10002 (replication=null)
[21:50:24.412] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - register SHOP-CLOUD-USER-SERVICE, vip shop-cloud-user-service, leaseDuration 90, isReplication false
[21:50:24.413] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - No previous lease information found; it is new registration
[21:50:24.413] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:50:24.413] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.AlwaysMatchInstanceStatusRule - Returning the default instance status UP for instance 192.168.31.38:shop-cloud-user-service:10002
[21:50:24.413] DEBUG [http-nio-20000-exec-8]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-USER-SERVICE V1 JSON, full
[21:50:24.413] DEBUG [http-nio-20000-exec-8]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-USER-SERVICE V1 JSON, compact
[21:50:24.413] DEBUG [http-nio-20000-exec-8]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 JSON, full
[21:50:24.413] DEBUG [http-nio-20000-exec-8]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 JSON, compact
[21:50:24.413] DEBUG [http-nio-20000-exec-8]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, full
[21:50:24.413] DEBUG [http-nio-20000-exec-8]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, compact
[21:50:24.413] DEBUG [http-nio-20000-exec-8]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP shop-cloud-user-service V1 JSON, full
[21:50:24.413] DEBUG [http-nio-20000-exec-8]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP shop-cloud-user-service V1 JSON, full
[21:50:24.413] DEBUG [http-nio-20000-exec-8]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-USER-SERVICE V2 JSON, full
[21:50:24.413] DEBUG [http-nio-20000-exec-8]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-USER-SERVICE V2 JSON, compact
[21:50:24.413] DEBUG [http-nio-20000-exec-8]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 JSON, full
[21:50:24.413] DEBUG [http-nio-20000-exec-8]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 JSON, compact
[21:50:24.413] DEBUG [http-nio-20000-exec-8]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, full
[21:50:24.413] DEBUG [http-nio-20000-exec-8]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, compact
[21:50:24.413] DEBUG [http-nio-20000-exec-8]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP shop-cloud-user-service V2 JSON, full
[21:50:24.413] DEBUG [http-nio-20000-exec-8]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP shop-cloud-user-service V2 JSON, full
[21:50:24.413] DEBUG [http-nio-20000-exec-8]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-USER-SERVICE V1 XML, full
[21:50:24.413] DEBUG [http-nio-20000-exec-8]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-USER-SERVICE V1 XML, compact
[21:50:24.413] DEBUG [http-nio-20000-exec-8]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 XML, full
[21:50:24.413] DEBUG [http-nio-20000-exec-8]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 XML, compact
[21:50:24.413] DEBUG [http-nio-20000-exec-8]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, full
[21:50:24.413] DEBUG [http-nio-20000-exec-8]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, compact
[21:50:24.413] DEBUG [http-nio-20000-exec-8]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP shop-cloud-user-service V1 XML, full
[21:50:24.413] DEBUG [http-nio-20000-exec-8]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP shop-cloud-user-service V1 XML, full
[21:50:24.413] DEBUG [http-nio-20000-exec-8]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-USER-SERVICE V2 XML, full
[21:50:24.413] DEBUG [http-nio-20000-exec-8]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-USER-SERVICE V2 XML, compact
[21:50:24.413] DEBUG [http-nio-20000-exec-8]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 XML, full
[21:50:24.413] DEBUG [http-nio-20000-exec-8]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 XML, compact
[21:50:24.413] DEBUG [http-nio-20000-exec-8]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, full
[21:50:24.413] DEBUG [http-nio-20000-exec-8]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, compact
[21:50:24.413] DEBUG [http-nio-20000-exec-8]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP shop-cloud-user-service V2 XML, full
[21:50:24.413] DEBUG [http-nio-20000-exec-8]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP shop-cloud-user-service V2 XML, full
[21:50:24.413] INFO  [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Registered instance SHOP-CLOUD-USER-SERVICE/192.168.31.38:shop-cloud-user-service:10002 with status UP (replication=false)
[21:50:29.790] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:50:29.790] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:50:29.790] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:50:29.790] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:50:29.790] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:50:32.430] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:50:32.430] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:50:32.430] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 1
[21:50:32.430] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The instance id 192.168.31.38:shop-cloud-user-service:10002 is found with status UP and actiontype ADDED
[21:50:32.431] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_4_
[21:50:32.431] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:50:32.431] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:50:32.431] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_4_
[21:50:33.540] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:50:33.540] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:50:33.540] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:50:33.540] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:50:33.540] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:50:48.190] DEBUG [http-nio-20000-exec-3]c.n.d.u.DeserializerStringCache - clearing global-level cache with size 1
[21:50:48.190] DEBUG [http-nio-20000-exec-3]c.n.d.u.DeserializerStringCache - clearing app-level serialization cache with size 8
[21:50:48.190] DEBUG [http-nio-20000-exec-3]c.n.e.r.ApplicationResource - Registering instance 192.168.31.38:shop-cloud-item-service:10001 (replication=null)
[21:50:48.190] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - register SHOP-CLOUD-ITEM-SERVICE, vip shop-cloud-item-service, leaseDuration 90, isReplication false
[21:50:48.190] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - No previous lease information found; it is new registration
[21:50:48.190] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:50:48.190] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.AlwaysMatchInstanceStatusRule - Returning the default instance status UP for instance 192.168.31.38:shop-cloud-item-service:10001
[21:50:48.190] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-ITEM-SERVICE V1 JSON, full
[21:50:48.190] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-ITEM-SERVICE V1 JSON, compact
[21:50:48.190] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 JSON, full
[21:50:48.190] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 JSON, compact
[21:50:48.190] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, full
[21:50:48.190] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, compact
[21:50:48.190] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP shop-cloud-item-service V1 JSON, full
[21:50:48.190] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP shop-cloud-item-service V1 JSON, full
[21:50:48.190] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-ITEM-SERVICE V2 JSON, full
[21:50:48.190] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-ITEM-SERVICE V2 JSON, compact
[21:50:48.190] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 JSON, full
[21:50:48.190] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 JSON, compact
[21:50:48.190] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, full
[21:50:48.190] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, compact
[21:50:48.190] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP shop-cloud-item-service V2 JSON, full
[21:50:48.190] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP shop-cloud-item-service V2 JSON, full
[21:50:48.190] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-ITEM-SERVICE V1 XML, full
[21:50:48.190] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-ITEM-SERVICE V1 XML, compact
[21:50:48.190] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 XML, full
[21:50:48.190] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 XML, compact
[21:50:48.190] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, full
[21:50:48.190] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, compact
[21:50:48.190] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP shop-cloud-item-service V1 XML, full
[21:50:48.190] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP shop-cloud-item-service V1 XML, full
[21:50:48.190] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-ITEM-SERVICE V2 XML, full
[21:50:48.190] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-ITEM-SERVICE V2 XML, compact
[21:50:48.190] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 XML, full
[21:50:48.190] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 XML, compact
[21:50:48.190] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, full
[21:50:48.190] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, compact
[21:50:48.191] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP shop-cloud-item-service V2 XML, full
[21:50:48.191] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP shop-cloud-item-service V2 XML, full
[21:50:48.191] INFO  [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Registered instance SHOP-CLOUD-ITEM-SERVICE/192.168.31.38:shop-cloud-item-service:10001 with status UP (replication=false)
[21:50:49.675] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:50:49.675] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:50:49.675] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:50:49.675] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:50:49.675] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:50:54.369] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[21:50:54.369] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:50:54.370] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:50:54.370] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[21:50:54.370] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[21:50:59.798] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:50:59.799] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:50:59.799] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:50:59.799] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:50:59.799] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:51:02.215] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[21:51:02.215] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:51:02.216] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:51:02.431] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:51:02.431] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:51:02.432] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 2
[21:51:02.432] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The instance id 192.168.31.38:shop-cloud-user-service:10002 is found with status UP and actiontype ADDED
[21:51:02.432] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The instance id 192.168.31.38:shop-cloud-item-service:10001 is found with status UP and actiontype ADDED
[21:51:02.432] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_5_
[21:51:02.432] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:51:02.432] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:51:02.432] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_5_
[21:51:03.550] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:51:03.550] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:51:03.550] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:51:03.550] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:51:03.550] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:51:18.149] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[21:51:18.149] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:51:18.149] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:51:18.149] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[21:51:18.149] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[21:51:19.682] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:51:19.682] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:51:19.682] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:51:19.682] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:51:19.682] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:51:24.372] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[21:51:24.372] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:51:24.372] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:51:24.372] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[21:51:24.372] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[21:51:29.797] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:51:29.797] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:51:29.797] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:51:29.797] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:51:29.797] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:51:32.432] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:51:32.433] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:51:32.433] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:51:33.549] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:51:33.550] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:51:33.550] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:51:33.550] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:51:33.550] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:51:48.141] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[21:51:48.141] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:51:48.141] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:51:48.142] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[21:51:48.142] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[21:51:49.676] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:51:49.676] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:51:49.676] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:51:49.676] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:51:49.676] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:51:54.369] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[21:51:54.369] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:51:54.369] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:51:54.369] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[21:51:54.369] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[21:51:59.796] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:51:59.796] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:51:59.796] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:51:59.796] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:51:59.796] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:52:02.216] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 13ms
[21:52:02.216] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:52:02.216] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:52:02.432] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:52:02.432] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:52:02.432] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:52:03.549] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:52:03.549] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:52:03.549] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:52:03.549] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:52:03.549] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:52:18.148] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[21:52:18.148] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:52:18.148] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:52:18.148] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[21:52:18.148] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[21:52:19.682] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:52:19.682] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:52:19.682] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:52:19.682] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:52:19.682] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:52:24.374] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[21:52:24.374] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:52:24.374] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:52:24.374] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[21:52:24.374] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[21:52:29.805] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:52:29.806] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:52:29.806] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:52:29.806] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:52:29.806] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:52:32.435] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:52:32.435] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:52:32.435] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:52:33.558] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:52:33.558] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:52:33.558] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:52:33.558] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:52:33.558] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:52:48.154] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[21:52:48.154] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:52:48.154] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:52:48.154] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[21:52:48.154] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[21:52:49.690] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:52:49.690] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:52:49.690] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:52:49.690] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:52:49.690] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:52:54.381] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[21:52:54.381] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:52:54.381] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:52:54.381] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[21:52:54.382] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[21:52:59.812] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:52:59.812] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:52:59.812] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:52:59.813] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:52:59.813] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:53:02.220] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[21:53:02.220] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:53:02.220] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:53:02.440] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:53:02.440] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:53:02.440] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:53:03.568] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:53:03.568] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:53:03.568] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:53:03.568] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:53:03.568] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:53:18.162] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[21:53:18.162] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:53:18.162] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:53:18.162] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[21:53:18.162] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[21:53:19.698] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:53:19.698] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:53:19.698] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:53:19.698] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:53:19.698] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:53:24.387] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[21:53:24.387] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:53:24.387] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:53:24.387] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[21:53:24.387] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[21:53:29.821] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:53:29.821] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:53:29.821] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:53:29.821] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:53:29.821] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:53:32.445] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:53:32.445] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:53:32.445] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:53:33.576] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:53:33.576] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:53:33.576] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:53:33.576] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:53:33.576] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:53:48.170] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[21:53:48.170] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:53:48.170] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:53:48.170] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[21:53:48.170] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[21:53:49.709] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:53:49.709] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:53:49.709] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:53:49.709] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:53:49.709] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:53:54.393] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[21:53:54.393] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:53:54.393] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:53:54.393] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[21:53:54.393] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[21:53:59.828] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:53:59.828] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:53:59.828] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:53:59.828] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:53:59.828] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:54:02.226] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[21:54:02.226] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:54:02.226] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:54:02.447] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:54:02.447] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:54:02.447] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 1
[21:54:02.448] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The instance id 192.168.31.38:shop-cloud-item-service:10001 is found with status UP and actiontype ADDED
[21:54:02.448] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_5_
[21:54:02.448] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:54:02.448] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:54:02.448] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_5_
[21:54:03.584] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:54:03.585] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:54:03.585] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:54:03.585] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:54:03.585] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:54:18.174] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[21:54:18.174] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:54:18.174] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:54:18.174] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[21:54:18.174] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[21:54:19.715] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:54:19.715] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:54:19.715] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:54:19.715] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:54:19.715] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:54:24.402] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[21:54:24.402] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:54:24.403] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:54:24.403] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[21:54:24.403] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[21:54:29.836] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:54:29.836] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:54:29.836] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:54:29.836] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:54:29.836] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:54:32.452] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:54:32.452] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:54:32.452] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:54:33.595] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:54:33.595] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:54:33.595] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:54:33.595] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:54:33.595] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:54:48.182] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[21:54:48.182] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:54:48.182] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:54:48.182] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[21:54:48.182] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[21:54:49.722] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:54:49.722] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:54:49.722] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:54:49.722] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:54:49.722] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:54:54.409] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[21:54:54.410] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:54:54.410] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:54:54.410] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[21:54:54.410] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[21:54:59.844] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:54:59.845] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:54:59.845] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:54:59.845] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:54:59.845] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:55:02.231] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[21:55:02.231] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:55:02.231] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:55:02.457] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:55:02.457] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:55:02.457] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:55:03.606] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:55:03.606] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:55:03.606] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:55:03.606] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:55:03.606] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:55:18.190] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[21:55:18.190] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:55:18.190] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:55:18.190] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[21:55:18.190] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[21:55:19.728] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:55:19.728] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:55:19.728] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:55:19.728] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:55:19.728] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:55:24.413] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[21:55:24.413] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:55:24.413] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:55:24.413] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[21:55:24.414] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[21:55:29.854] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:55:29.854] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:55:29.854] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:55:29.854] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:55:29.854] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:55:32.460] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:55:32.460] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:55:32.460] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:55:33.616] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:55:33.616] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:55:33.616] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:55:33.616] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:55:33.616] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:55:48.197] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[21:55:48.197] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:55:48.197] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:55:48.197] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[21:55:48.198] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[21:55:49.736] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:55:49.736] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:55:49.737] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:55:49.737] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:55:49.737] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:55:54.420] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[21:55:54.420] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:55:54.420] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:55:54.420] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[21:55:54.420] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[21:55:59.862] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:55:59.862] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:55:59.862] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:55:59.862] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:55:59.862] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:56:02.237] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[21:56:02.237] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:56:02.237] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:56:02.465] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:56:02.466] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:56:02.466] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:56:03.624] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:56:03.624] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:56:03.624] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:56:03.624] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:56:03.624] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:56:18.201] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[21:56:18.201] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:56:18.201] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:56:18.201] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[21:56:18.201] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[21:56:19.745] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:56:19.745] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:56:19.745] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:56:19.745] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:56:19.745] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:56:24.425] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[21:56:24.425] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:56:24.425] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:56:24.425] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[21:56:24.425] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[21:56:29.866] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:56:29.866] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:56:29.866] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:56:29.866] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:56:29.866] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:56:32.468] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:56:32.468] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:56:32.468] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:56:33.630] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:56:33.630] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:56:33.630] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:56:33.630] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:56:33.630] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:56:37.645] DEBUG [http-nio-20000-exec-3]c.n.d.u.DeserializerStringCache - clearing global-level cache with size 1
[21:56:37.645] DEBUG [http-nio-20000-exec-3]c.n.d.u.DeserializerStringCache - clearing app-level serialization cache with size 8
[21:56:37.645] DEBUG [http-nio-20000-exec-3]c.n.e.r.ApplicationResource - Registering instance 192.168.31.38:shop-cloud-order-service:10003 (replication=null)
[21:56:37.645] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - register SHOP-CLOUD-ORDER-SERVICE, vip shop-cloud-order-service, leaseDuration 90, isReplication false
[21:56:37.645] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - No previous lease information found; it is new registration
[21:56:37.645] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:56:37.645] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.AlwaysMatchInstanceStatusRule - Returning the default instance status UP for instance 192.168.31.38:shop-cloud-order-service:10003
[21:56:37.645] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-ORDER-SERVICE V1 JSON, full
[21:56:37.645] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-ORDER-SERVICE V1 JSON, compact
[21:56:37.645] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 JSON, full
[21:56:37.645] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 JSON, compact
[21:56:37.645] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, full
[21:56:37.645] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, compact
[21:56:37.645] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP shop-cloud-order-service V1 JSON, full
[21:56:37.645] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP shop-cloud-order-service V1 JSON, full
[21:56:37.645] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-ORDER-SERVICE V2 JSON, full
[21:56:37.645] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-ORDER-SERVICE V2 JSON, compact
[21:56:37.645] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 JSON, full
[21:56:37.645] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 JSON, compact
[21:56:37.645] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, full
[21:56:37.645] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, compact
[21:56:37.645] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP shop-cloud-order-service V2 JSON, full
[21:56:37.645] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP shop-cloud-order-service V2 JSON, full
[21:56:37.645] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-ORDER-SERVICE V1 XML, full
[21:56:37.645] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-ORDER-SERVICE V1 XML, compact
[21:56:37.645] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 XML, full
[21:56:37.646] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 XML, compact
[21:56:37.646] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, full
[21:56:37.646] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, compact
[21:56:37.646] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP shop-cloud-order-service V1 XML, full
[21:56:37.646] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP shop-cloud-order-service V1 XML, full
[21:56:37.646] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-ORDER-SERVICE V2 XML, full
[21:56:37.646] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-ORDER-SERVICE V2 XML, compact
[21:56:37.646] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 XML, full
[21:56:37.646] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 XML, compact
[21:56:37.646] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, full
[21:56:37.646] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, compact
[21:56:37.646] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP shop-cloud-order-service V2 XML, full
[21:56:37.646] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP shop-cloud-order-service V2 XML, full
[21:56:37.646] INFO  [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Registered instance SHOP-CLOUD-ORDER-SERVICE/192.168.31.38:shop-cloud-order-service:10003 with status UP (replication=false)
[21:56:48.209] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[21:56:48.209] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:56:48.209] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:56:48.209] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[21:56:48.209] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[21:56:49.750] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:56:49.750] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:56:49.750] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:56:49.750] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:56:49.750] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:56:54.430] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[21:56:54.430] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:56:54.430] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:56:54.430] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[21:56:54.430] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[21:56:59.881] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:56:59.881] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:56:59.881] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:56:59.881] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:56:59.881] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:57:02.242] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[21:57:02.242] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:57:02.242] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[21:57:02.468] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:57:02.468] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:57:02.469] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 1
[21:57:02.469] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The instance id 192.168.31.38:shop-cloud-order-service:10003 is found with status UP and actiontype ADDED
[21:57:02.469] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_6_
[21:57:02.469] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:57:02.469] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:57:02.469] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_6_
[21:57:03.638] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:57:03.638] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:57:03.638] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:57:03.638] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:57:03.638] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:57:07.611] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[21:57:07.611] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:57:07.611] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:57:07.611] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[21:57:07.611] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[21:57:18.217] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[21:57:18.217] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:57:18.217] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:57:18.217] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[21:57:18.217] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[21:57:19.760] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:57:19.760] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:57:19.760] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:57:19.760] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:57:19.760] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:57:24.437] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[21:57:24.437] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:57:24.437] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:57:24.438] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[21:57:24.438] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[21:57:29.911] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:57:29.911] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:57:29.911] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:57:29.911] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:57:29.911] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:57:32.474] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:57:32.474] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:57:32.474] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:57:33.646] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:57:33.646] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:57:33.646] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:57:33.646] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:57:33.647] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:57:37.622] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[21:57:37.622] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:57:37.622] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:57:37.622] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[21:57:37.622] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[21:57:48.225] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[21:57:48.225] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:57:48.225] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:57:48.225] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[21:57:48.225] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[21:57:49.770] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:57:49.770] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:57:49.771] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:57:49.771] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:57:49.771] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:57:54.446] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[21:57:54.446] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:57:54.446] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:57:54.446] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[21:57:54.447] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[21:57:59.919] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:57:59.919] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:57:59.919] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:57:59.919] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:57:59.919] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:58:02.245] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[21:58:02.245] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:58:02.478] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:58:02.478] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:58:02.478] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:58:03.655] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:58:03.655] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:58:03.655] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:58:03.655] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:58:03.656] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:58:07.629] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[21:58:07.644] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:58:07.644] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:58:07.645] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[21:58:07.645] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[21:58:18.231] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[21:58:18.231] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:58:18.231] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:58:18.231] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[21:58:18.231] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[21:58:19.778] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:58:19.778] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:58:19.779] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:58:19.779] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:58:19.779] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:58:24.452] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[21:58:24.452] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:58:24.452] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:58:24.452] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[21:58:24.452] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[21:58:29.927] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:58:29.927] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:58:29.927] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:58:29.927] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:58:29.927] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:58:32.481] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:58:32.481] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:58:32.481] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:58:33.666] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:58:33.666] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:58:33.666] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:58:33.666] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:58:33.667] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:58:37.651] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[21:58:37.651] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:58:37.651] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:58:37.651] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[21:58:37.651] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[21:58:48.238] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[21:58:48.238] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:58:48.238] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:58:48.239] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[21:58:48.239] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[21:58:49.785] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:58:49.785] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:58:49.785] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:58:49.785] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:58:49.785] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:58:54.459] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[21:58:54.459] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:58:54.459] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:58:54.459] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[21:58:54.459] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[21:58:59.931] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:58:59.931] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:58:59.932] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:58:59.932] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:58:59.932] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:59:02.247] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[21:59:02.247] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[21:59:02.482] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:59:02.482] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:59:02.483] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:59:03.677] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:59:03.677] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:59:03.677] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:59:03.677] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:59:03.677] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:59:07.658] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[21:59:07.658] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:59:07.658] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:59:07.658] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[21:59:07.658] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[21:59:18.245] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[21:59:18.245] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:59:18.245] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:59:18.245] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[21:59:18.245] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[21:59:19.792] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:59:19.792] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:59:19.793] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:59:19.793] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:59:19.793] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:59:24.464] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[21:59:24.464] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:59:24.464] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:59:24.464] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[21:59:24.464] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[21:59:29.941] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:59:29.941] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:59:29.941] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:59:29.941] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:59:29.941] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[21:59:32.485] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[21:59:32.485] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[21:59:32.485] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[21:59:33.686] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[21:59:33.686] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:59:33.687] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:59:33.687] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[21:59:33.687] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[21:59:37.664] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[21:59:37.664] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:59:37.664] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:59:37.664] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[21:59:37.664] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[21:59:48.250] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[21:59:48.250] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:59:48.251] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:59:48.251] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[21:59:48.251] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[21:59:49.802] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[21:59:49.802] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:59:49.802] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:59:49.802] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[21:59:49.802] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[21:59:54.469] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[21:59:54.469] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:59:54.469] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:59:54.469] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[21:59:54.469] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[21:59:59.950] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[21:59:59.950] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[21:59:59.950] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[21:59:59.950] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[21:59:59.950] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:00:01.015] DEBUG [Eureka-PeerNodesUpdater]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[22:00:01.015] WARN  [Eureka-PeerNodesUpdater]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[22:00:02.253] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[22:00:02.253] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[22:00:02.486] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:00:02.486] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:00:02.486] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 1
[22:00:02.486] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The instance id 192.168.31.38:shop-cloud-order-service:10003 is found with status UP and actiontype ADDED
[22:00:02.487] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_6_
[22:00:02.487] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:00:02.487] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:00:02.487] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_6_
[22:00:03.696] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:00:03.696] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:00:03.696] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:00:03.696] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:00:03.696] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:00:07.668] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:00:07.668] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:00:07.668] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:00:07.668] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:00:07.668] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:00:18.256] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:00:18.256] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:00:18.256] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:00:18.256] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:00:18.256] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:00:19.812] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:00:19.812] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:00:19.812] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:00:19.812] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:00:19.812] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:00:24.477] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:00:24.477] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:00:24.477] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:00:24.477] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:00:24.477] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:00:29.956] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:00:29.956] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:00:29.956] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:00:29.956] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:00:29.956] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:00:32.491] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:00:32.491] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:00:32.491] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:00:33.712] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:00:33.712] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:00:33.712] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:00:33.712] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:00:33.712] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:00:37.673] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:00:37.673] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:00:37.673] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:00:37.673] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:00:37.673] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:00:48.264] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:00:48.264] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:00:48.264] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:00:48.264] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:00:48.264] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:00:49.820] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:00:49.820] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:00:49.820] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:00:49.820] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:00:49.820] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:00:54.483] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:00:54.483] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:00:54.483] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:00:54.483] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:00:54.483] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:00:59.961] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:00:59.961] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:00:59.961] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:00:59.961] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:00:59.961] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:01:02.255] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[22:01:02.255] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[22:01:02.494] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:01:02.494] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:01:02.494] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:01:03.720] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:01:03.720] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:01:03.720] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:01:03.720] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:01:03.720] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:01:07.679] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:01:07.679] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:01:07.679] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:01:07.679] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:01:07.679] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:01:18.271] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:01:18.271] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:01:18.271] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:01:18.271] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:01:18.271] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:01:19.826] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:01:19.826] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:01:19.826] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:01:19.826] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:01:19.826] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:01:24.489] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:01:24.489] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:01:24.489] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:01:24.489] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:01:24.489] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:01:29.968] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:01:29.968] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:01:29.968] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:01:29.968] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:01:29.968] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:01:32.498] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:01:32.498] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:01:32.498] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:01:33.729] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:01:33.729] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:01:33.729] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:01:33.729] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:01:33.729] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:01:37.687] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:01:37.687] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:01:37.687] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:01:37.687] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:01:37.687] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:01:48.278] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:01:48.278] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:01:48.278] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:01:48.278] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:01:48.278] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:01:49.833] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:01:49.833] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:01:49.833] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:01:49.833] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:01:49.833] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:01:54.496] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:01:54.496] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:01:54.496] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:01:54.496] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:01:54.497] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:01:59.973] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:01:59.973] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:01:59.973] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:01:59.973] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:01:59.973] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:02:01.676] DEBUG [http-nio-20000-exec-5]o.s.w.s.DispatcherServlet - GET "/", parameters={}
[22:02:01.677] DEBUG [http-nio-20000-exec-5]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public java.lang.String org.springframework.cloud.netflix.eureka.server.EurekaController.status(javax.servlet.http.HttpServletRequest,java.util.Map<java.lang.String, java.lang.Object>)
[22:02:01.678] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:01.679] DEBUG [http-nio-20000-exec-5]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/status_zh.ftl]
[22:02:01.680] DEBUG [http-nio-20000-exec-5]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/status.ftl]
[22:02:01.682] DEBUG [http-nio-20000-exec-5]o.s.w.s.DispatcherServlet - Failed to complete request: org.springframework.web.util.NestedServletException: Handler processing failed; nested exception is java.lang.NoClassDefFoundError: freemarker/template/utility/CollectionUtils
[22:02:01.685] ERROR [http-nio-20000-exec-5]o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Filter execution threw an exception] with root cause
java.lang.ClassNotFoundException: org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter$CustomStatusResponseWrapper
	at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at org.springframework.boot.loader.LaunchedURLClassLoader.loadClass(LaunchedURLClassLoader.java:151)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:95)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:117)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:106)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:836)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1747)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
[22:02:01.686] DEBUG [http-nio-20000-exec-5]o.s.w.s.DispatcherServlet - "ERROR" dispatch for GET "/error", parameters={}
[22:02:01.688] DEBUG [http-nio-20000-exec-5]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
[22:02:01.849] DEBUG [http-nio-20000-exec-5]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [error_zh.ftl]
[22:02:01.849] DEBUG [http-nio-20000-exec-5]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [error.ftl]
[22:02:01.850] DEBUG [http-nio-20000-exec-5]o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, text/html;q=0.8]
[22:02:01.850] DEBUG [http-nio-20000-exec-5]o.s.w.s.DispatcherServlet - Unresolved failure from "ERROR" dispatch: org.springframework.web.util.NestedServletException: Handler processing failed; nested exception is java.lang.NoClassDefFoundError: org/springframework/web/util/HtmlUtils
[22:02:01.851] ERROR [http-nio-20000-exec-5]o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] threw exception
java.lang.ClassNotFoundException: org.springframework.web.util.HtmlUtils
	at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at org.springframework.boot.loader.LaunchedURLClassLoader.loadClass(LaunchedURLClassLoader.java:151)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$StaticView.htmlEscape(ErrorMvcAutoConfiguration.java:248)
	at org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$StaticView.render(ErrorMvcAutoConfiguration.java:234)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1371)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1117)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1056)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:836)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1747)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
[22:02:01.851] ERROR [http-nio-20000-exec-5]o.a.c.c.C.[.[localhost] - Exception Processing ErrorPage[errorCode=0, location=/error]
org.springframework.web.util.NestedServletException: Handler processing failed; nested exception is java.lang.NoClassDefFoundError: org/springframework/web/util/HtmlUtils
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1062)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:836)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1747)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.NoClassDefFoundError: org/springframework/web/util/HtmlUtils
	at org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$StaticView.htmlEscape(ErrorMvcAutoConfiguration.java:248)
	at org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$StaticView.render(ErrorMvcAutoConfiguration.java:234)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1371)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1117)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1056)
	... 28 common frames omitted
Caused by: java.lang.ClassNotFoundException: org.springframework.web.util.HtmlUtils
	at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at org.springframework.boot.loader.LaunchedURLClassLoader.loadClass(LaunchedURLClassLoader.java:151)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	... 33 common frames omitted
[22:02:02.259] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[22:02:02.259] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[22:02:02.502] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:02:02.502] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:02:02.502] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:02:03.737] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:02:03.737] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:03.737] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:02:03.737] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:02:03.737] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:02:05.979] DEBUG [http-nio-20000-exec-6]o.s.w.s.DispatcherServlet - GET "/", parameters={}
[22:02:05.980] DEBUG [http-nio-20000-exec-6]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public java.lang.String org.springframework.cloud.netflix.eureka.server.EurekaController.status(javax.servlet.http.HttpServletRequest,java.util.Map<java.lang.String, java.lang.Object>)
[22:02:05.981] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:05.983] DEBUG [http-nio-20000-exec-6]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/status_zh.ftl]
[22:02:05.984] DEBUG [http-nio-20000-exec-6]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/status.ftl]
[22:02:05.985] DEBUG [http-nio-20000-exec-6]o.s.w.s.DispatcherServlet - Failed to complete request: org.springframework.web.util.NestedServletException: Handler processing failed; nested exception is java.lang.NoClassDefFoundError: freemarker/template/utility/CollectionUtils
[22:02:05.985] ERROR [http-nio-20000-exec-6]o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Filter execution threw an exception] with root cause
java.lang.NoClassDefFoundError: org/springframework/boot/actuate/web/trace/servlet/HttpTraceFilter$CustomStatusResponseWrapper
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:95)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:117)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:106)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:836)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1747)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
[22:02:05.986] DEBUG [http-nio-20000-exec-6]o.s.w.s.DispatcherServlet - "ERROR" dispatch for GET "/error", parameters={}
[22:02:05.988] DEBUG [http-nio-20000-exec-6]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
[22:02:05.991] DEBUG [http-nio-20000-exec-6]o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, text/html;q=0.8]
[22:02:05.991] DEBUG [http-nio-20000-exec-6]o.s.w.s.DispatcherServlet - Unresolved failure from "ERROR" dispatch: org.springframework.web.util.NestedServletException: Handler processing failed; nested exception is java.lang.NoClassDefFoundError: org/springframework/web/util/HtmlUtils
[22:02:05.991] ERROR [http-nio-20000-exec-6]o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] threw exception
java.lang.NoClassDefFoundError: org/springframework/web/util/HtmlUtils
	at org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$StaticView.htmlEscape(ErrorMvcAutoConfiguration.java:248)
	at org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$StaticView.render(ErrorMvcAutoConfiguration.java:234)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1371)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1117)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1056)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:836)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1747)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
[22:02:05.991] ERROR [http-nio-20000-exec-6]o.a.c.c.C.[.[localhost] - Exception Processing ErrorPage[errorCode=0, location=/error]
org.springframework.web.util.NestedServletException: Handler processing failed; nested exception is java.lang.NoClassDefFoundError: org/springframework/web/util/HtmlUtils
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1062)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:836)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1747)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.NoClassDefFoundError: org/springframework/web/util/HtmlUtils
	at org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$StaticView.htmlEscape(ErrorMvcAutoConfiguration.java:248)
	at org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$StaticView.render(ErrorMvcAutoConfiguration.java:234)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1371)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1117)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1056)
	... 28 common frames omitted
[22:02:06.527] DEBUG [http-nio-20000-exec-9]o.s.w.s.DispatcherServlet - GET "/", parameters={}
[22:02:06.528] DEBUG [http-nio-20000-exec-9]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public java.lang.String org.springframework.cloud.netflix.eureka.server.EurekaController.status(javax.servlet.http.HttpServletRequest,java.util.Map<java.lang.String, java.lang.Object>)
[22:02:06.529] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:06.530] DEBUG [http-nio-20000-exec-9]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/status_zh.ftl]
[22:02:06.530] DEBUG [http-nio-20000-exec-9]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/status.ftl]
[22:02:06.531] DEBUG [http-nio-20000-exec-9]o.s.w.s.DispatcherServlet - Failed to complete request: org.springframework.web.util.NestedServletException: Handler processing failed; nested exception is java.lang.NoClassDefFoundError: freemarker/template/utility/CollectionUtils
[22:02:06.532] ERROR [http-nio-20000-exec-9]o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Filter execution threw an exception] with root cause
java.lang.NoClassDefFoundError: org/springframework/boot/actuate/web/trace/servlet/HttpTraceFilter$CustomStatusResponseWrapper
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:95)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:117)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:106)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:836)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1747)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
[22:02:06.532] DEBUG [http-nio-20000-exec-9]o.s.w.s.DispatcherServlet - "ERROR" dispatch for GET "/error", parameters={}
[22:02:06.533] DEBUG [http-nio-20000-exec-9]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
[22:02:06.536] DEBUG [http-nio-20000-exec-9]o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, text/html;q=0.8]
[22:02:06.536] DEBUG [http-nio-20000-exec-9]o.s.w.s.DispatcherServlet - Unresolved failure from "ERROR" dispatch: org.springframework.web.util.NestedServletException: Handler processing failed; nested exception is java.lang.NoClassDefFoundError: org/springframework/web/util/HtmlUtils
[22:02:06.537] ERROR [http-nio-20000-exec-9]o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] threw exception
java.lang.NoClassDefFoundError: org/springframework/web/util/HtmlUtils
	at org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$StaticView.htmlEscape(ErrorMvcAutoConfiguration.java:248)
	at org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$StaticView.render(ErrorMvcAutoConfiguration.java:234)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1371)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1117)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1056)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:836)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1747)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
[22:02:06.537] ERROR [http-nio-20000-exec-9]o.a.c.c.C.[.[localhost] - Exception Processing ErrorPage[errorCode=0, location=/error]
org.springframework.web.util.NestedServletException: Handler processing failed; nested exception is java.lang.NoClassDefFoundError: org/springframework/web/util/HtmlUtils
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1062)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:836)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1747)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.NoClassDefFoundError: org/springframework/web/util/HtmlUtils
	at org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$StaticView.htmlEscape(ErrorMvcAutoConfiguration.java:248)
	at org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$StaticView.render(ErrorMvcAutoConfiguration.java:234)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1371)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1117)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1056)
	... 28 common frames omitted
[22:02:06.695] DEBUG [http-nio-20000-exec-8]o.s.w.s.DispatcherServlet - GET "/", parameters={}
[22:02:06.696] DEBUG [http-nio-20000-exec-8]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public java.lang.String org.springframework.cloud.netflix.eureka.server.EurekaController.status(javax.servlet.http.HttpServletRequest,java.util.Map<java.lang.String, java.lang.Object>)
[22:02:06.696] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:06.697] DEBUG [http-nio-20000-exec-8]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/status_zh.ftl]
[22:02:06.698] DEBUG [http-nio-20000-exec-8]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/status.ftl]
[22:02:06.699] DEBUG [http-nio-20000-exec-8]o.s.w.s.DispatcherServlet - Failed to complete request: org.springframework.web.util.NestedServletException: Handler processing failed; nested exception is java.lang.NoClassDefFoundError: freemarker/template/utility/CollectionUtils
[22:02:06.699] ERROR [http-nio-20000-exec-8]o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Filter execution threw an exception] with root cause
java.lang.NoClassDefFoundError: org/springframework/boot/actuate/web/trace/servlet/HttpTraceFilter$CustomStatusResponseWrapper
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:95)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:117)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:106)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:836)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1747)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
[22:02:06.700] DEBUG [http-nio-20000-exec-8]o.s.w.s.DispatcherServlet - "ERROR" dispatch for GET "/error", parameters={}
[22:02:06.701] DEBUG [http-nio-20000-exec-8]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
[22:02:06.704] DEBUG [http-nio-20000-exec-8]o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, text/html;q=0.8]
[22:02:06.704] DEBUG [http-nio-20000-exec-8]o.s.w.s.DispatcherServlet - Unresolved failure from "ERROR" dispatch: org.springframework.web.util.NestedServletException: Handler processing failed; nested exception is java.lang.NoClassDefFoundError: org/springframework/web/util/HtmlUtils
[22:02:06.704] ERROR [http-nio-20000-exec-8]o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] threw exception
java.lang.NoClassDefFoundError: org/springframework/web/util/HtmlUtils
	at org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$StaticView.htmlEscape(ErrorMvcAutoConfiguration.java:248)
	at org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$StaticView.render(ErrorMvcAutoConfiguration.java:234)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1371)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1117)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1056)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:836)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1747)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
[22:02:06.705] ERROR [http-nio-20000-exec-8]o.a.c.c.C.[.[localhost] - Exception Processing ErrorPage[errorCode=0, location=/error]
org.springframework.web.util.NestedServletException: Handler processing failed; nested exception is java.lang.NoClassDefFoundError: org/springframework/web/util/HtmlUtils
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1062)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:836)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1747)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.NoClassDefFoundError: org/springframework/web/util/HtmlUtils
	at org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$StaticView.htmlEscape(ErrorMvcAutoConfiguration.java:248)
	at org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$StaticView.render(ErrorMvcAutoConfiguration.java:234)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1371)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1117)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1056)
	... 28 common frames omitted
[22:02:06.886] DEBUG [http-nio-20000-exec-1]o.s.w.s.DispatcherServlet - GET "/", parameters={}
[22:02:06.887] DEBUG [http-nio-20000-exec-1]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public java.lang.String org.springframework.cloud.netflix.eureka.server.EurekaController.status(javax.servlet.http.HttpServletRequest,java.util.Map<java.lang.String, java.lang.Object>)
[22:02:06.887] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:06.889] DEBUG [http-nio-20000-exec-1]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/status_zh.ftl]
[22:02:06.889] DEBUG [http-nio-20000-exec-1]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/status.ftl]
[22:02:06.890] DEBUG [http-nio-20000-exec-1]o.s.w.s.DispatcherServlet - Failed to complete request: org.springframework.web.util.NestedServletException: Handler processing failed; nested exception is java.lang.NoClassDefFoundError: freemarker/template/utility/CollectionUtils
[22:02:06.891] ERROR [http-nio-20000-exec-1]o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Filter execution threw an exception] with root cause
java.lang.NoClassDefFoundError: org/springframework/boot/actuate/web/trace/servlet/HttpTraceFilter$CustomStatusResponseWrapper
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:95)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:117)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:106)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:836)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1747)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
[22:02:06.891] DEBUG [http-nio-20000-exec-1]o.s.w.s.DispatcherServlet - "ERROR" dispatch for GET "/error", parameters={}
[22:02:06.892] DEBUG [http-nio-20000-exec-1]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
[22:02:06.895] DEBUG [http-nio-20000-exec-1]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [error_zh.ftl]
[22:02:06.896] DEBUG [http-nio-20000-exec-1]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [error.ftl]
[22:02:06.896] DEBUG [http-nio-20000-exec-1]o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, text/html;q=0.8]
[22:02:06.896] DEBUG [http-nio-20000-exec-1]o.s.w.s.DispatcherServlet - Unresolved failure from "ERROR" dispatch: org.springframework.web.util.NestedServletException: Handler processing failed; nested exception is java.lang.NoClassDefFoundError: org/springframework/web/util/HtmlUtils
[22:02:06.897] ERROR [http-nio-20000-exec-1]o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] threw exception
java.lang.NoClassDefFoundError: org/springframework/web/util/HtmlUtils
	at org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$StaticView.htmlEscape(ErrorMvcAutoConfiguration.java:248)
	at org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$StaticView.render(ErrorMvcAutoConfiguration.java:234)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1371)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1117)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1056)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:836)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1747)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
[22:02:06.897] ERROR [http-nio-20000-exec-1]o.a.c.c.C.[.[localhost] - Exception Processing ErrorPage[errorCode=0, location=/error]
org.springframework.web.util.NestedServletException: Handler processing failed; nested exception is java.lang.NoClassDefFoundError: org/springframework/web/util/HtmlUtils
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1062)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:836)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1747)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.NoClassDefFoundError: org/springframework/web/util/HtmlUtils
	at org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$StaticView.htmlEscape(ErrorMvcAutoConfiguration.java:248)
	at org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$StaticView.render(ErrorMvcAutoConfiguration.java:234)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1371)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1117)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1056)
	... 28 common frames omitted
[22:02:07.079] DEBUG [http-nio-20000-exec-10]o.s.w.s.DispatcherServlet - GET "/", parameters={}
[22:02:07.080] DEBUG [http-nio-20000-exec-10]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public java.lang.String org.springframework.cloud.netflix.eureka.server.EurekaController.status(javax.servlet.http.HttpServletRequest,java.util.Map<java.lang.String, java.lang.Object>)
[22:02:07.080] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:07.081] DEBUG [http-nio-20000-exec-10]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/status_zh.ftl]
[22:02:07.082] DEBUG [http-nio-20000-exec-10]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/status.ftl]
[22:02:07.083] DEBUG [http-nio-20000-exec-10]o.s.w.s.DispatcherServlet - Failed to complete request: org.springframework.web.util.NestedServletException: Handler processing failed; nested exception is java.lang.NoClassDefFoundError: freemarker/template/utility/CollectionUtils
[22:02:07.083] ERROR [http-nio-20000-exec-10]o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Filter execution threw an exception] with root cause
java.lang.NoClassDefFoundError: org/springframework/boot/actuate/web/trace/servlet/HttpTraceFilter$CustomStatusResponseWrapper
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:95)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:117)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:106)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:836)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1747)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
[22:02:07.084] DEBUG [http-nio-20000-exec-10]o.s.w.s.DispatcherServlet - "ERROR" dispatch for GET "/error", parameters={}
[22:02:07.084] DEBUG [http-nio-20000-exec-10]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
[22:02:07.087] DEBUG [http-nio-20000-exec-10]o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, text/html;q=0.8]
[22:02:07.087] DEBUG [http-nio-20000-exec-10]o.s.w.s.DispatcherServlet - Unresolved failure from "ERROR" dispatch: org.springframework.web.util.NestedServletException: Handler processing failed; nested exception is java.lang.NoClassDefFoundError: org/springframework/web/util/HtmlUtils
[22:02:07.088] ERROR [http-nio-20000-exec-10]o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] threw exception
java.lang.NoClassDefFoundError: org/springframework/web/util/HtmlUtils
	at org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$StaticView.htmlEscape(ErrorMvcAutoConfiguration.java:248)
	at org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$StaticView.render(ErrorMvcAutoConfiguration.java:234)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1371)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1117)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1056)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:836)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1747)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
[22:02:07.088] ERROR [http-nio-20000-exec-10]o.a.c.c.C.[.[localhost] - Exception Processing ErrorPage[errorCode=0, location=/error]
org.springframework.web.util.NestedServletException: Handler processing failed; nested exception is java.lang.NoClassDefFoundError: org/springframework/web/util/HtmlUtils
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1062)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:836)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1747)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.NoClassDefFoundError: org/springframework/web/util/HtmlUtils
	at org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$StaticView.htmlEscape(ErrorMvcAutoConfiguration.java:248)
	at org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$StaticView.render(ErrorMvcAutoConfiguration.java:234)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1371)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1117)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1056)
	... 28 common frames omitted
[22:02:07.695] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:02:07.695] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:07.695] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:02:07.695] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:02:07.695] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:02:13.013] DEBUG [http-nio-20000-exec-5]o.s.w.s.DispatcherServlet - GET "/", parameters={}
[22:02:13.014] DEBUG [http-nio-20000-exec-5]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public java.lang.String org.springframework.cloud.netflix.eureka.server.EurekaController.status(javax.servlet.http.HttpServletRequest,java.util.Map<java.lang.String, java.lang.Object>)
[22:02:13.015] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:13.016] DEBUG [http-nio-20000-exec-5]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/status_zh.ftl]
[22:02:13.017] DEBUG [http-nio-20000-exec-5]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/status.ftl]
[22:02:13.018] DEBUG [http-nio-20000-exec-5]o.s.w.s.DispatcherServlet - Failed to complete request: org.springframework.web.util.NestedServletException: Handler processing failed; nested exception is java.lang.NoClassDefFoundError: freemarker/template/utility/CollectionUtils
[22:02:13.019] ERROR [http-nio-20000-exec-5]o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Filter execution threw an exception] with root cause
java.lang.NoClassDefFoundError: org/springframework/boot/actuate/web/trace/servlet/HttpTraceFilter$CustomStatusResponseWrapper
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:95)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:117)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:106)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:836)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1747)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
[22:02:13.019] DEBUG [http-nio-20000-exec-5]o.s.w.s.DispatcherServlet - "ERROR" dispatch for GET "/error", parameters={}
[22:02:13.020] DEBUG [http-nio-20000-exec-5]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
[22:02:13.024] DEBUG [http-nio-20000-exec-5]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [error_zh.ftl]
[22:02:13.025] DEBUG [http-nio-20000-exec-5]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [error.ftl]
[22:02:13.026] DEBUG [http-nio-20000-exec-5]o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, text/html;q=0.8]
[22:02:13.026] DEBUG [http-nio-20000-exec-5]o.s.w.s.DispatcherServlet - Unresolved failure from "ERROR" dispatch: org.springframework.web.util.NestedServletException: Handler processing failed; nested exception is java.lang.NoClassDefFoundError: org/springframework/web/util/HtmlUtils
[22:02:13.026] ERROR [http-nio-20000-exec-5]o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] threw exception
java.lang.NoClassDefFoundError: org/springframework/web/util/HtmlUtils
	at org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$StaticView.htmlEscape(ErrorMvcAutoConfiguration.java:248)
	at org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$StaticView.render(ErrorMvcAutoConfiguration.java:234)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1371)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1117)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1056)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:836)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1747)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
[22:02:13.027] ERROR [http-nio-20000-exec-5]o.a.c.c.C.[.[localhost] - Exception Processing ErrorPage[errorCode=0, location=/error]
org.springframework.web.util.NestedServletException: Handler processing failed; nested exception is java.lang.NoClassDefFoundError: org/springframework/web/util/HtmlUtils
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1062)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:836)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1747)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.NoClassDefFoundError: org/springframework/web/util/HtmlUtils
	at org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$StaticView.htmlEscape(ErrorMvcAutoConfiguration.java:248)
	at org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$StaticView.render(ErrorMvcAutoConfiguration.java:234)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1371)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1117)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1056)
	... 28 common frames omitted
[22:02:18.283] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:02:18.283] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:18.283] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:02:18.283] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:02:18.283] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:02:19.842] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:02:19.842] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:19.842] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:02:19.842] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:02:19.842] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:02:21.099] DEBUG [Thread-13]o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Closing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@731a74c, started on Sun Nov 29 15:49:55 CST 2020, parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@6ad5c04e
[22:02:21.100] INFO  [Thread-13]o.s.c.n.e.s.EurekaServiceRegistry - Unregistering application EUREKA-SERVER with eureka with status DOWN
[22:02:21.101] DEBUG [Thread-13]o.s.c.s.DefaultLifecycleProcessor - Stopping beans in phase 0
[22:02:21.102] DEBUG [Thread-13]o.s.c.s.DefaultLifecycleProcessor - Bean 'org.springframework.cloud.netflix.eureka.server.EurekaServerInitializerConfiguration' completed its stop procedure
[22:02:21.102] INFO  [Thread-13]c.n.e.DefaultEurekaServerContext - Shutting down ...
[22:02:21.104] INFO  [Thread-13]c.n.e.DefaultEurekaServerContext - Shut down
[22:02:21.106] DEBUG [Thread-13]o.s.b.a.e.j.JmxEndpointExporter - Unregister endpoint with ObjectName 'org.springframework.boot:type=Endpoint,name=Archaius' from the JMX domain
[22:02:21.106] DEBUG [Thread-13]o.s.b.a.e.j.JmxEndpointExporter - Unregister endpoint with ObjectName 'org.springframework.boot:type=Endpoint,name=Auditevents' from the JMX domain
[22:02:21.106] DEBUG [Thread-13]o.s.b.a.e.j.JmxEndpointExporter - Unregister endpoint with ObjectName 'org.springframework.boot:type=Endpoint,name=Beans' from the JMX domain
[22:02:21.106] DEBUG [Thread-13]o.s.b.a.e.j.JmxEndpointExporter - Unregister endpoint with ObjectName 'org.springframework.boot:type=Endpoint,name=Caches' from the JMX domain
[22:02:21.106] DEBUG [Thread-13]o.s.b.a.e.j.JmxEndpointExporter - Unregister endpoint with ObjectName 'org.springframework.boot:type=Endpoint,name=Health' from the JMX domain
[22:02:21.106] DEBUG [Thread-13]o.s.b.a.e.j.JmxEndpointExporter - Unregister endpoint with ObjectName 'org.springframework.boot:type=Endpoint,name=Conditions' from the JMX domain
[22:02:21.106] DEBUG [Thread-13]o.s.b.a.e.j.JmxEndpointExporter - Unregister endpoint with ObjectName 'org.springframework.boot:type=Endpoint,name=Configprops' from the JMX domain
[22:02:21.106] DEBUG [Thread-13]o.s.b.a.e.j.JmxEndpointExporter - Unregister endpoint with ObjectName 'org.springframework.boot:type=Endpoint,name=Env' from the JMX domain
[22:02:21.106] DEBUG [Thread-13]o.s.b.a.e.j.JmxEndpointExporter - Unregister endpoint with ObjectName 'org.springframework.boot:type=Endpoint,name=Info' from the JMX domain
[22:02:21.106] DEBUG [Thread-13]o.s.b.a.e.j.JmxEndpointExporter - Unregister endpoint with ObjectName 'org.springframework.boot:type=Endpoint,name=Loggers' from the JMX domain
[22:02:21.106] DEBUG [Thread-13]o.s.b.a.e.j.JmxEndpointExporter - Unregister endpoint with ObjectName 'org.springframework.boot:type=Endpoint,name=Threaddump' from the JMX domain
[22:02:21.106] DEBUG [Thread-13]o.s.b.a.e.j.JmxEndpointExporter - Unregister endpoint with ObjectName 'org.springframework.boot:type=Endpoint,name=Metrics' from the JMX domain
[22:02:21.106] DEBUG [Thread-13]o.s.b.a.e.j.JmxEndpointExporter - Unregister endpoint with ObjectName 'org.springframework.boot:type=Endpoint,name=Scheduledtasks' from the JMX domain
[22:02:21.106] DEBUG [Thread-13]o.s.b.a.e.j.JmxEndpointExporter - Unregister endpoint with ObjectName 'org.springframework.boot:type=Endpoint,name=Httptrace' from the JMX domain
[22:02:21.106] DEBUG [Thread-13]o.s.b.a.e.j.JmxEndpointExporter - Unregister endpoint with ObjectName 'org.springframework.boot:type=Endpoint,name=Mappings' from the JMX domain
[22:02:21.106] DEBUG [Thread-13]o.s.b.a.e.j.JmxEndpointExporter - Unregister endpoint with ObjectName 'org.springframework.boot:type=Endpoint,name=Refresh' from the JMX domain
[22:02:21.106] DEBUG [Thread-13]o.s.b.a.e.j.JmxEndpointExporter - Unregister endpoint with ObjectName 'org.springframework.boot:type=Endpoint,name=Features' from the JMX domain
[22:02:21.106] DEBUG [Thread-13]o.s.b.a.e.j.JmxEndpointExporter - Unregister endpoint with ObjectName 'org.springframework.boot:type=Endpoint,name=Service-registry' from the JMX domain
[22:02:21.106] DEBUG [Thread-13]o.s.j.e.a.AnnotationMBeanExporter - Unregistering JMX-exposed beans on shutdown
[22:02:21.107] DEBUG [Thread-13]o.s.j.e.a.AnnotationMBeanExporter - Unregistering JMX-exposed beans
[22:02:21.107] INFO  [Thread-13]o.s.s.c.ThreadPoolTaskExecutor - Shutting down ExecutorService 'applicationTaskExecutor'
[22:02:21.121] WARN  [Thread-13]o.s.c.a.CommonAnnotationBeanPostProcessor - Destroy method on bean with name 'org.springframework.cloud.netflix.archaius.ArchaiusAutoConfiguration' threw an exception
java.lang.IllegalStateException: Failed to introspect Class [com.netflix.config.ConfigurationManager] from ClassLoader [org.springframework.boot.loader.LaunchedURLClassLoader@5010be6]
	at org.springframework.util.ReflectionUtils.getDeclaredFields(ReflectionUtils.java:760)
	at org.springframework.util.ReflectionUtils.findField(ReflectionUtils.java:628)
	at org.springframework.util.ReflectionUtils.findField(ReflectionUtils.java:610)
	at org.springframework.cloud.netflix.archaius.ArchaiusAutoConfiguration.setStatic(ArchaiusAutoConfiguration.java:192)
	at org.springframework.cloud.netflix.archaius.ArchaiusAutoConfiguration.close(ArchaiusAutoConfiguration.java:92)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.invoke(InitDestroyAnnotationBeanPostProcessor.java:363)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeDestroyMethods(InitDestroyAnnotationBeanPostProcessor.java:321)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeDestruction(InitDestroyAnnotationBeanPostProcessor.java:156)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:240)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:571)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:543)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1034)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:504)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1027)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1057)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1026)
	at org.springframework.context.support.AbstractApplicationContext$1.run(AbstractApplicationContext.java:945)
Caused by: java.lang.NoClassDefFoundError: Lcom/netflix/config/jmx/ConfigMBean;
	at java.lang.Class.getDeclaredFields0(Native Method)
	at java.lang.Class.privateGetDeclaredFields(Class.java:2583)
	at java.lang.Class.getDeclaredFields(Class.java:1916)
	at org.springframework.util.ReflectionUtils.getDeclaredFields(ReflectionUtils.java:755)
	... 20 common frames omitted
Caused by: java.lang.ClassNotFoundException: com.netflix.config.jmx.ConfigMBean
	at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at org.springframework.boot.loader.LaunchedURLClassLoader.loadClass(LaunchedURLClassLoader.java:151)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	... 24 common frames omitted
[22:02:21.123] INFO  [Thread-13]c.n.d.DiscoveryClient - Shutting down DiscoveryClient ...
[22:02:21.123] INFO  [Thread-13]c.n.d.DiscoveryClient - Completed shut down of DiscoveryClient
[22:02:24.089] DEBUG [main]o.s.b.c.l.ClasspathLoggingApplicationListener - Application started with classpath: [jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/classes!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-starter-netflix-eureka-server-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-starter-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-starter-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-autoconfigure-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-starter-logging-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/logback-classic-1.2.3.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/logback-core-1.2.3.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/log4j-to-slf4j-2.11.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/log4j-api-2.11.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jul-to-slf4j-1.7.26.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/javax.annotation-api-1.3.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-core-5.1.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-jcl-5.1.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/snakeyaml-1.23.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-context-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-security-crypto-5.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-commons-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-security-rsa-1.0.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/bcpkix-jdk15on-1.60.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/bcprov-jdk15on-1.60.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-netflix-eureka-server-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-starter-web-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-starter-json-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jackson-datatype-jdk8-2.9.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jackson-datatype-jsr310-2.9.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jackson-module-parameter-names-2.9.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-starter-tomcat-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/tomcat-embed-core-9.0.19.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/tomcat-embed-el-9.0.19.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/tomcat-embed-websocket-9.0.19.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/hibernate-validator-6.0.16.Final.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/validation-api-2.0.1.Final.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jboss-logging-3.3.2.Final.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-web-5.1.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-webmvc-5.1.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-starter-actuator-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-actuator-autoconfigure-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-actuator-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/micrometer-core-1.1.4.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/HdrHistogram-2.1.9.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/LatencyUtils-2.0.3.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-starter-freemarker-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/freemarker-2.3.28.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-context-support-5.1.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-netflix-hystrix-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-starter-aop-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/aspectjweaver-1.9.4.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-netflix-eureka-client-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/eureka-client-1.9.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jettison-1.3.7.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/stax-api-1.0.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/netflix-eventbus-0.3.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/netflix-infix-0.3.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/commons-jxpath-1.3.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/joda-time-2.10.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/antlr-runtime-3.4.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/stringtemplate-3.2.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/antlr-2.7.7.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/gson-2.8.5.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/commons-math-2.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jsr311-api-1.1.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/servo-core-0.12.21.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jersey-core-1.19.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jersey-client-1.19.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jersey-apache-client4-1.19.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/httpclient-4.5.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/httpcore-4.4.11.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/guice-4.1.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/aopalliance-1.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/compactmap-1.2.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/dexx-collections-0.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jackson-core-2.9.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jackson-databind-2.9.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jersey-servlet-1.19.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jersey-server-1.19.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/eureka-core-1.9.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/woodstox-core-asl-4.4.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/stax-api-1.0-2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/archaius-core-0.7.6.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jsr305-3.0.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/javax.inject-1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jackson-dataformat-xml-2.9.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jackson-module-jaxb-annotations-2.9.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/stax2-api-3.1.4.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/woodstox-core-5.0.3.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/xstream-1.4.10.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/xmlpull-1.1.3.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/xpp3_min-1.1.4c.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-starter-netflix-archaius-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-netflix-ribbon-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-netflix-archaius-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/commons-configuration-1.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/commons-lang-2.6.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-starter-netflix-ribbon-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/ribbon-2.3.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/ribbon-transport-2.3.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/rxnetty-contexts-0.4.9.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/rxnetty-servo-0.4.9.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/hystrix-core-1.5.18.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/rxnetty-0.4.9.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/ribbon-core-2.3.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/ribbon-httpclient-2.3.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/commons-collections-3.2.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/netflix-commons-util-0.3.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/ribbon-loadbalancer-2.3.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/netflix-statistics-0.1.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/rxjava-1.2.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/ribbon-eureka-2.3.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/lombok-1.18.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/commons-codec-1.11.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/commons-lang3-3.4.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/commons-io-1.3.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/springfox-swagger2-2.9.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/swagger-annotations-1.5.20.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/swagger-models-1.5.20.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jackson-annotations-2.9.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/springfox-spi-2.9.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/springfox-core-2.9.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/byte-buddy-1.9.12.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/springfox-schema-2.9.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/springfox-swagger-common-2.9.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/springfox-spring-web-2.9.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/guava-20.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/classmate-1.4.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-plugin-core-1.2.0.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-beans-5.1.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-context-5.1.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-expression-5.1.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-aop-5.1.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-plugin-metadata-1.2.0.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/mapstruct-1.2.0.Final.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/knife4j-spring-ui-2.0.4.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/slf4j-api-1.7.21.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/slf4j-log4j12-1.7.21.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/log4j-1.2.17.jar!/]
[22:02:24.142] DEBUG [background-preinit]o.h.v.m.ResourceBundleMessageInterpolator - Loaded expression factory via original TCCL
[22:02:24.152] DEBUG [background-preinit]o.h.v.i.e.ValidatorFactoryImpl - HV000234: Using org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator as ValidatorFactory-scoped message interpolator.
[22:02:24.152] DEBUG [background-preinit]o.h.v.i.e.ValidatorFactoryImpl - HV000234: Using org.hibernate.validator.internal.engine.resolver.TraverseAllTraversableResolver as ValidatorFactory-scoped traversable resolver.
[22:02:24.152] DEBUG [background-preinit]o.h.v.i.e.ValidatorFactoryImpl - HV000234: Using org.hibernate.validator.internal.util.ExecutableParameterNameProvider as ValidatorFactory-scoped parameter name provider.
[22:02:24.152] DEBUG [background-preinit]o.h.v.i.e.ValidatorFactoryImpl - HV000234: Using org.hibernate.validator.internal.engine.DefaultClockProvider as ValidatorFactory-scoped clock provider.
[22:02:24.152] DEBUG [background-preinit]o.h.v.i.e.ValidatorFactoryImpl - HV000234: Using org.hibernate.validator.internal.engine.scripting.DefaultScriptEvaluatorFactory as ValidatorFactory-scoped script evaluator factory.
[22:02:24.253] DEBUG [main]o.s.b.SpringApplication - Loading source class org.springframework.cloud.bootstrap.BootstrapImportSelectorConfiguration
[22:02:24.293] DEBUG [main]o.s.c.a.AnnotationConfigApplicationContext - Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@7e0babb1
[22:02:24.320] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
[22:02:24.345] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory'
[22:02:24.489] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.condition.BeanTypeRegistry'
[22:02:24.579] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'propertySourcesPlaceholderConfigurer'
[22:02:24.585] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.event.internalEventListenerProcessor'
[22:02:24.587] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.context.properties.ConfigurationBeanFactoryMetadata'
[22:02:24.587] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.event.internalEventListenerFactory'
[22:02:24.589] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'
[22:02:24.590] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'
[22:02:24.599] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor'
[22:02:24.601] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'configurationPropertiesBeans'
[22:02:24.601] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration'
[22:02:24.607] INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$c6a3581] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[22:02:24.626] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'bootstrapImportSelectorConfiguration'
[22:02:24.628] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration'
[22:02:24.635] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'spring.cloud.config-org.springframework.cloud.bootstrap.config.PropertySourceBootstrapProperties'
[22:02:24.646] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.bootstrap.encrypt.EncryptionBootstrapConfiguration'
[22:02:24.648] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'encrypt-org.springframework.cloud.bootstrap.encrypt.KeyProperties'
[22:02:24.651] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'environmentDecryptApplicationListener'
[22:02:24.655] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'configurationPropertiesRebinder'
[22:02:24.658] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'configurationPropertiesRebinder' via factory method to bean named 'configurationPropertiesBeans'
[22:02:24.665] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration'
[22:02:24.678] DEBUG [main]o.s.b.a.l.ConditionEvaluationReportLoggingListener - 


============================
CONDITIONS EVALUATION REPORT
============================


Positive matches:
-----------------

   ConfigurationPropertiesRebinderAutoConfiguration matched:
      - @ConditionalOnBean (types: org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor; SearchStrategy: all) found bean 'org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor' (OnBeanCondition)

   ConfigurationPropertiesRebinderAutoConfiguration#configurationPropertiesBeans matched:
      - @ConditionalOnMissingBean (types: org.springframework.cloud.context.properties.ConfigurationPropertiesBeans; SearchStrategy: current) did not find any beans (OnBeanCondition)

   ConfigurationPropertiesRebinderAutoConfiguration#configurationPropertiesRebinder matched:
      - @ConditionalOnMissingBean (types: org.springframework.cloud.context.properties.ConfigurationPropertiesRebinder; SearchStrategy: current) did not find any beans (OnBeanCondition)

   EncryptionBootstrapConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.security.crypto.encrypt.TextEncryptor' (OnClassCondition)

   PropertyPlaceholderAutoConfiguration#propertySourcesPlaceholderConfigurer matched:
      - @ConditionalOnMissingBean (types: org.springframework.context.support.PropertySourcesPlaceholderConfigurer; SearchStrategy: current) did not find any beans (OnBeanCondition)


Negative matches:
-----------------

   EncryptionBootstrapConfiguration.RsaEncryptionConfiguration:
      Did not match:
         - Keystore nor key found in Environment (EncryptionBootstrapConfiguration.KeyCondition)
      Matched:
         - @ConditionalOnClass found required class 'org.springframework.security.rsa.crypto.RsaSecretEncryptor' (OnClassCondition)

   EncryptionBootstrapConfiguration.VanillaEncryptionConfiguration:
      Did not match:
         - @ConditionalOnMissingClass found unwanted class 'org.springframework.security.rsa.crypto.RsaSecretEncryptor' (OnClassCondition)

   EurekaDiscoveryClientConfigServiceBootstrapConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.cloud.config.client.ConfigServicePropertySourceLocator' (OnClassCondition)


Exclusions:
-----------

    None


Unconditional classes:
----------------------

    None



[22:02:24.817] DEBUG [main]o.s.b.c.l.ClasspathLoggingApplicationListener - Application started with classpath: [jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/classes!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-starter-netflix-eureka-server-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-starter-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-starter-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-autoconfigure-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-starter-logging-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/logback-classic-1.2.3.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/logback-core-1.2.3.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/log4j-to-slf4j-2.11.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/log4j-api-2.11.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jul-to-slf4j-1.7.26.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/javax.annotation-api-1.3.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-core-5.1.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-jcl-5.1.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/snakeyaml-1.23.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-context-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-security-crypto-5.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-commons-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-security-rsa-1.0.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/bcpkix-jdk15on-1.60.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/bcprov-jdk15on-1.60.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-netflix-eureka-server-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-starter-web-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-starter-json-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jackson-datatype-jdk8-2.9.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jackson-datatype-jsr310-2.9.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jackson-module-parameter-names-2.9.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-starter-tomcat-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/tomcat-embed-core-9.0.19.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/tomcat-embed-el-9.0.19.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/tomcat-embed-websocket-9.0.19.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/hibernate-validator-6.0.16.Final.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/validation-api-2.0.1.Final.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jboss-logging-3.3.2.Final.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-web-5.1.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-webmvc-5.1.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-starter-actuator-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-actuator-autoconfigure-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-actuator-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/micrometer-core-1.1.4.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/HdrHistogram-2.1.9.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/LatencyUtils-2.0.3.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-starter-freemarker-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/freemarker-2.3.28.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-context-support-5.1.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-netflix-hystrix-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-boot-starter-aop-2.1.5.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/aspectjweaver-1.9.4.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-netflix-eureka-client-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/eureka-client-1.9.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jettison-1.3.7.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/stax-api-1.0.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/netflix-eventbus-0.3.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/netflix-infix-0.3.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/commons-jxpath-1.3.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/joda-time-2.10.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/antlr-runtime-3.4.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/stringtemplate-3.2.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/antlr-2.7.7.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/gson-2.8.5.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/commons-math-2.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jsr311-api-1.1.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/servo-core-0.12.21.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jersey-core-1.19.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jersey-client-1.19.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jersey-apache-client4-1.19.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/httpclient-4.5.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/httpcore-4.4.11.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/guice-4.1.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/aopalliance-1.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/compactmap-1.2.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/dexx-collections-0.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jackson-core-2.9.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jackson-databind-2.9.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jersey-servlet-1.19.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jersey-server-1.19.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/eureka-core-1.9.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/woodstox-core-asl-4.4.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/stax-api-1.0-2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/archaius-core-0.7.6.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jsr305-3.0.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/javax.inject-1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jackson-dataformat-xml-2.9.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jackson-module-jaxb-annotations-2.9.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/stax2-api-3.1.4.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/woodstox-core-5.0.3.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/xstream-1.4.10.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/xmlpull-1.1.3.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/xpp3_min-1.1.4c.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-starter-netflix-archaius-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-netflix-ribbon-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-netflix-archaius-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/commons-configuration-1.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/commons-lang-2.6.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-starter-netflix-ribbon-2.1.1.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/ribbon-2.3.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/ribbon-transport-2.3.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/rxnetty-contexts-0.4.9.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/rxnetty-servo-0.4.9.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/hystrix-core-1.5.18.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/rxnetty-0.4.9.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/ribbon-core-2.3.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/ribbon-httpclient-2.3.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/commons-collections-3.2.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/netflix-commons-util-0.3.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/ribbon-loadbalancer-2.3.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/netflix-statistics-0.1.1.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/rxjava-1.2.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/ribbon-eureka-2.3.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/lombok-1.18.8.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/commons-codec-1.11.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/commons-lang3-3.4.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/commons-io-1.3.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/springfox-swagger2-2.9.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/swagger-annotations-1.5.20.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/swagger-models-1.5.20.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/jackson-annotations-2.9.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/springfox-spi-2.9.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/springfox-core-2.9.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/byte-buddy-1.9.12.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/springfox-schema-2.9.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/springfox-swagger-common-2.9.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/springfox-spring-web-2.9.2.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/guava-20.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/classmate-1.4.0.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-plugin-core-1.2.0.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-beans-5.1.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-context-5.1.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-expression-5.1.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-aop-5.1.7.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-plugin-metadata-1.2.0.RELEASE.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/mapstruct-1.2.0.Final.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/knife4j-spring-ui-2.0.4.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/slf4j-api-1.7.21.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/slf4j-log4j12-1.7.21.jar!/, jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/log4j-1.2.17.jar!/]
[22:02:24.846] INFO  [main]c.m.EurekaServerApplication - The following profiles are active: dev
[22:02:24.846] DEBUG [main]o.s.b.SpringApplication - Loading source class cn.mtianyan.EurekaServerApplication
[22:02:24.876] DEBUG [main]o.s.b.c.c.ConfigFileApplicationListener - Activated activeProfiles dev
[22:02:24.876] DEBUG [main]o.s.b.c.c.ConfigFileApplicationListener - Loaded config file 'jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/classes!/application.yml' (classpath:/application.yml)
[22:02:24.876] DEBUG [main]o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@551aa95a
[22:02:24.892] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
[22:02:24.892] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory'
[22:02:25.482] DEBUG [main]o.s.c.e.PropertySourcesPropertyResolver - Found key 'server.port' in PropertySource 'configurationProperties' with value of type Integer
[22:02:25.482] DEBUG [main]o.s.c.e.PropertySourcesPropertyResolver - Found key 'server.port' in PropertySource 'configurationProperties' with value of type Integer
[22:02:25.506] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.condition.BeanTypeRegistry'
[22:02:25.817] WARN  [main]o.s.b.a.e.EndpointId - Endpoint ID 'service-registry' contains invalid characters, please migrate to a valid format.
[22:02:25.856] DEBUG [main]o.s.c.e.PropertySourcesPropertyResolver - Found key 'server.port' in PropertySource 'configurationProperties' with value of type Integer
[22:02:25.884] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'refreshScope'
[22:02:25.888] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.autoconfigure.RefreshAutoConfiguration$RefreshScopeBeanDefinitionEnhancer'
[22:02:26.091] DEBUG [main]o.s.c.c.s.GenericScope - Generating bean factory id from names: [apacheHttpClientBuilder, apacheHttpClientFactory, applicationTaskExecutor, archaiusEndpoint, asyncLoadBalancerInterceptor, asyncRestTemplateCustomizer, auditEventRepository, auditEventsEndpoint, auditListener, basicErrorController, beanNameHandlerMapping, beanNameViewResolver, beansEndpoint, cachesEndpoint, cachesEndpointWebExtension, characterEncodingFilter, classLoaderMetrics, commonsFeatures, compositeCompatibilityVerifier, compositeDiscoveryClient, conditionsReportEndpoint, configurableEnvironmentConfiguration, configurationPropertiesBeans, configurationPropertiesRebinder, configurationPropertiesReportEndpoint, connManFactory, contextRefresher, controllerEndpointDiscoverer, controllerEndpointHandlerMapping, controllerExposeExcludePropertyEndpointFilter, conventionErrorViewResolver, createHealthStatusHttpMapper, default.org.springframework.cloud.netflix.ribbon.RibbonAutoConfiguration.RibbonClientSpecification, default.org.springframework.cloud.netflix.ribbon.eureka.RibbonEurekaAutoConfiguration.RibbonClientSpecification, defaultServletHandlerMapping, defaultValidator, defaultViewResolver, discoveryClient, discoveryClientHealthIndicator, discoveryClientOptionalArgs, discoveryCompositeHealthIndicator, diskSpaceHealthIndicator, diskSpaceHealthIndicatorProperties, dispatcherServlet, dispatcherServletMappingDescriptionProvider, dispatcherServletRegistration, dumpEndpoint, endpointCachingOperationInvokerAdvisor, endpointMediaTypes, endpointOperationParameterMapper, envInfoContributor, environmentEndpoint, environmentEndpointWebExtension, environmentManager, error, errorAttributes, errorPageCustomizer, errorPageRegistrarBeanPostProcessor, eureka.dashboard-org.springframework.cloud.netflix.eureka.server.EurekaDashboardProperties, eureka.instance.registry-org.springframework.cloud.netflix.eureka.server.InstanceRegistryProperties, eurekaApplicationInfoManager, eurekaAutoServiceRegistration, eurekaClient, eurekaClientConfigBean, eurekaController, eurekaDiscoverClientMarker, eurekaFeature, eurekaHealthIndicator, eurekaInstanceConfigBean, eurekaRegistration, eurekaServerApplication, eurekaServerBootstrap, eurekaServerConfig, eurekaServerContext, eurekaServerFeature, eurekaServerMarkerBean, eurekaServiceRegistry, faviconHandlerMapping, faviconRequestHandler, featuresEndpoint, fileDescriptorMetrics, filterMappingDescriptionProvider, formContentFilter, freeMarkerConfiguration, freeMarkerConfigurer, freeMarkerViewResolver, gson, gsonBuilder, handlerExceptionResolver, healthAggregator, healthEndpoint, healthEndpointWebExtension, healthIndicatorRegistry, healthWebEndpointResponseMapper, heapDumpWebEndpoint, hiddenHttpMethodFilter, httpExchangeTracer, httpRequestHandlerAdapter, httpTraceEndpoint, httpTraceFilter, hystrixHealthIndicator, hystrixMetricsBinder, inetUtils, inetUtilsProperties, infoEndpoint, jacksonCodecCustomizer, jacksonObjectMapper, jacksonObjectMapperBuilder, jerseyApplication, jerseyFilterRegistration, jmxAnnotationEndpointDiscoverer, jmxIncludeExcludePropertyEndpointFilter, jmxMBeanExporter, jsonComponentModule, jvmGcMetrics, jvmMemoryMetrics, jvmThreadMetrics, loadBalancedAsyncRestTemplateInitializer, loadBalancedRestTemplateInitializerDeprecated, loadBalancerClient, loadBalancerRequestFactory, localeCharsetMappingsCustomizer, logbackMetrics, loggersEndpoint, loggingCodecCustomizer, loggingRebinder, management.endpoint.configprops-org.springframework.boot.actuate.autoconfigure.context.properties.ConfigurationPropertiesReportEndpointProperties, management.endpoint.env-org.springframework.boot.actuate.autoconfigure.env.EnvironmentEndpointProperties, management.endpoint.health-org.springframework.boot.actuate.autoconfigure.health.HealthEndpointProperties, management.endpoint.logfile-org.springframework.boot.actuate.autoconfigure.logging.LogFileWebEndpointProperties, management.endpoints.jmx-org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointProperties, management.endpoints.web-org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties, management.endpoints.web.cors-org.springframework.boot.actuate.autoconfigure.endpoint.web.CorsEndpointProperties, management.health.status-org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorProperties, management.info-org.springframework.boot.actuate.autoconfigure.info.InfoContributorProperties, management.metrics-org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties, management.metrics.export.simple-org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleProperties, management.server-org.springframework.boot.actuate.autoconfigure.web.server.ManagementServerProperties, management.trace.http-org.springframework.boot.actuate.autoconfigure.trace.http.HttpTraceProperties, managementServletContext, mappingJackson2HttpMessageConverter, mappingJackson2XmlHttpMessageConverter, mappingsEndpoint, mbeanExporter, mbeanServer, messageConverters, meterRegistryPostProcessor, methodValidationPostProcessor, metricsEndpoint, metricsHttpClientUriTagFilter, metricsHttpServerUriTagFilter, metricsRestTemplateCustomizer, metricsWebMvcConfigurer, micrometerClock, multipartConfigElement, multipartResolver, mvcContentNegotiationManager, mvcConversionService, mvcHandlerMappingIntrospector, mvcPathMatcher, mvcResourceUrlProvider, mvcUriComponentsContributor, mvcUrlPathHelper, mvcValidator, mvcViewResolver, objectNamingStrategy, org.springframework.aop.config.internalAutoProxyCreator, org.springframework.boot.actuate.autoconfigure.audit.AuditAutoConfiguration, org.springframework.boot.actuate.autoconfigure.audit.AuditAutoConfiguration$AuditEventRepositoryConfiguration, org.springframework.boot.actuate.autoconfigure.audit.AuditEventsEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.beans.BeansEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.cache.CachesEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.condition.ConditionsReportEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.context.properties.ConfigurationPropertiesReportEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.EndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointAutoConfiguration$WebEndpointServletConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.web.servlet.WebMvcEndpointManagementContextConfiguration, org.springframework.boot.actuate.autoconfigure.env.EnvironmentEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.health.HealthEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.health.HealthEndpointConfiguration, org.springframework.boot.actuate.autoconfigure.health.HealthEndpointWebExtensionConfiguration, org.springframework.boot.actuate.autoconfigure.health.HealthEndpointWebExtensionConfiguration$ServletWebHealthConfiguration, org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration, org.springframework.boot.actuate.autoconfigure.info.InfoContributorAutoConfiguration, org.springframework.boot.actuate.autoconfigure.info.InfoEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.logging.LogFileWebEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.logging.LoggersEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.management.HeapDumpWebEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.management.ThreadDumpEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.CompositeMeterRegistryAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.JvmMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.LogbackMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.MetricsEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.SystemMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.web.client.HttpClientMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.web.client.RestTemplateMetricsConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.web.servlet.WebMvcMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.web.tomcat.TomcatMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.scheduling.ScheduledTasksEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.system.DiskSpaceHealthIndicatorAutoConfiguration, org.springframework.boot.actuate.autoconfigure.trace.http.HttpTraceAutoConfiguration, org.springframework.boot.actuate.autoconfigure.trace.http.HttpTraceAutoConfiguration$ServletTraceFilterConfiguration, org.springframework.boot.actuate.autoconfigure.trace.http.HttpTraceEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.web.mappings.MappingsEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.web.mappings.MappingsEndpointAutoConfiguration$ServletWebConfiguration, org.springframework.boot.actuate.autoconfigure.web.mappings.MappingsEndpointAutoConfiguration$ServletWebConfiguration$SpringMvcConfiguration, org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration, org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$SameManagementContextConfiguration, org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$SameManagementContextConfiguration$EnableSameManagementContextConfiguration, org.springframework.boot.actuate.autoconfigure.web.servlet.ServletManagementContextAutoConfiguration, org.springframework.boot.autoconfigure.AutoConfigurationPackages, org.springframework.boot.autoconfigure.aop.AopAutoConfiguration, org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$CglibAutoProxyConfiguration, org.springframework.boot.autoconfigure.condition.BeanTypeRegistry, org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration, org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration, org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration, org.springframework.boot.autoconfigure.freemarker.FreeMarkerServletWebConfiguration, org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration, org.springframework.boot.autoconfigure.http.GsonHttpMessageConvertersConfiguration, org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration, org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration, org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration, org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration, org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2XmlHttpMessageConverterConfiguration, org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration, org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration$JacksonCodecConfiguration, org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration$LoggingCodecConfiguration, org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration, org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration, org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration, org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration, org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration, org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration, org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration, org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration, org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration$TomcatWebServerFactoryCustomizerConfiguration, org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration, org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration, org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration$EmbeddedTomcat, org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration, org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter, org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter$FaviconConfiguration, org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$DefaultErrorViewResolverConfiguration, org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration, org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration, org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration$TomcatWebSocketConfiguration, org.springframework.boot.context.properties.ConfigurationBeanFactoryMetadata, org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor, org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration, org.springframework.cloud.autoconfigure.LifecycleMvcEndpointAutoConfiguration, org.springframework.cloud.autoconfigure.PauseResumeEndpointsConfiguration, org.springframework.cloud.autoconfigure.RefreshAutoConfiguration, org.springframework.cloud.autoconfigure.RefreshAutoConfiguration$RefreshScopeBeanDefinitionEnhancer, org.springframework.cloud.autoconfigure.RefreshEndpointAutoConfiguration, org.springframework.cloud.autoconfigure.RefreshEndpointAutoConfiguration$RefreshEndpointConfiguration, org.springframework.cloud.autoconfigure.RestartEndpointWithoutIntegrationConfiguration, org.springframework.cloud.autoconfigure.WritableEnvironmentEndpointAutoConfiguration, org.springframework.cloud.client.CommonsClientAutoConfiguration, org.springframework.cloud.client.CommonsClientAutoConfiguration$ActuatorConfiguration, org.springframework.cloud.client.CommonsClientAutoConfiguration$DiscoveryLoadBalancerConfiguration, org.springframework.cloud.client.discovery.composite.CompositeDiscoveryClientAutoConfiguration, org.springframework.cloud.client.discovery.simple.SimpleDiscoveryClientAutoConfiguration, org.springframework.cloud.client.loadbalancer.AsyncLoadBalancerAutoConfiguration, org.springframework.cloud.client.loadbalancer.AsyncLoadBalancerAutoConfiguration$AsyncRestTemplateCustomizerConfig, org.springframework.cloud.client.loadbalancer.AsyncLoadBalancerAutoConfiguration$LoadBalancerInterceptorConfig, org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration, org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration$LoadBalancerInterceptorConfig, org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationAutoConfiguration, org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationConfiguration, org.springframework.cloud.client.serviceregistry.ServiceRegistryAutoConfiguration, org.springframework.cloud.client.serviceregistry.ServiceRegistryAutoConfiguration$ServiceRegistryEndpointConfiguration, org.springframework.cloud.commons.httpclient.HttpClientConfiguration, org.springframework.cloud.commons.httpclient.HttpClientConfiguration$ApacheHttpClientConfiguration, org.springframework.cloud.commons.util.UtilAutoConfiguration, org.springframework.cloud.configuration.CompatibilityVerifierAutoConfiguration, org.springframework.cloud.netflix.archaius.ArchaiusAutoConfiguration, org.springframework.cloud.netflix.archaius.ArchaiusAutoConfiguration$ArchaiusEndpointConfiguration, org.springframework.cloud.netflix.archaius.ArchaiusAutoConfiguration$PropagateEventsConfiguration, org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration, org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$EurekaHealthIndicatorConfiguration, org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration, org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration, org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration$EurekaClientConfigurationRefresher, org.springframework.cloud.netflix.eureka.config.DiscoveryClientOptionalArgsConfiguration, org.springframework.cloud.netflix.eureka.server.EurekaServerAutoConfiguration, org.springframework.cloud.netflix.eureka.server.EurekaServerAutoConfiguration$EurekaServerConfigBeanConfiguration, org.springframework.cloud.netflix.eureka.server.EurekaServerInitializerConfiguration, org.springframework.cloud.netflix.eureka.server.EurekaServerMarkerConfiguration, org.springframework.cloud.netflix.hystrix.HystrixAutoConfiguration, org.springframework.cloud.netflix.hystrix.HystrixAutoConfiguration$HystrixMetricsConfiguration, org.springframework.cloud.netflix.ribbon.RibbonAutoConfiguration, org.springframework.cloud.netflix.ribbon.eureka.RibbonEurekaAutoConfiguration, org.springframework.context.annotation.internalAutowiredAnnotationProcessor, org.springframework.context.annotation.internalCommonAnnotationProcessor, org.springframework.context.annotation.internalConfigurationAnnotationProcessor, org.springframework.context.event.internalEventListenerFactory, org.springframework.context.event.internalEventListenerProcessor, parameterNamesModule, pathMappedEndpoints, peerAwareInstanceRegistry, peerEurekaNodes, preserveErrorControllerTargetClassPostProcessor, processorMetrics, propertiesFactory, propertiesMeterFilter, propertySourcesPlaceholderConfigurer, refreshEndpoint, refreshEventListener, refreshScope, refreshScopeHealthIndicator, requestContextFilter, requestMappingHandlerAdapter, requestMappingHandlerMapping, resourceHandlerMapping, restTemplateBuilder, restTemplateCustomizer, restTemplateTagConfigurer, ribbon-org.springframework.cloud.netflix.ribbon.ServerIntrospectorProperties, ribbon.eager-load-org.springframework.cloud.netflix.ribbon.RibbonEagerLoadProperties, ribbonFeature, ribbonInterceptor, scheduledTasksEndpoint, scopedTarget.eurekaApplicationInfoManager, scopedTarget.eurekaClient, scopedTarget.eurekaRegistration, server-org.springframework.boot.autoconfigure.web.ServerProperties, serverCodecs, serviceManagementMetadataProvider, serviceRegistryEndpoint, servletEndpointDiscoverer, servletEndpointRegistrar, servletExposeExcludePropertyEndpointFilter, servletMappingDescriptionProvider, servletWebChildContextFactory, servletWebServerFactoryCustomizer, simpleConfig, simpleControllerHandlerAdapter, simpleDiscoveryClient, simpleDiscoveryProperties, simpleMeterRegistry, spring.cloud.compatibility-verifier-org.springframework.cloud.configuration.CompatibilityVerifierProperties, spring.cloud.discovery.client.health-indicator-org.springframework.cloud.client.discovery.health.DiscoveryClientHealthIndicatorProperties, spring.cloud.loadbalancer.retry-org.springframework.cloud.client.loadbalancer.LoadBalancerRetryProperties, spring.cloud.service-registry.auto-registration-org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationProperties, spring.freemarker-org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties, spring.gson-org.springframework.boot.autoconfigure.gson.GsonProperties, spring.http-org.springframework.boot.autoconfigure.http.HttpProperties, spring.info-org.springframework.boot.autoconfigure.info.ProjectInfoProperties, spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties, spring.mvc-org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties, spring.resources-org.springframework.boot.autoconfigure.web.ResourceProperties, spring.servlet.multipart-org.springframework.boot.autoconfigure.web.servlet.MultipartProperties, spring.task.execution-org.springframework.boot.autoconfigure.task.TaskExecutionProperties, spring.task.scheduling-org.springframework.boot.autoconfigure.task.TaskSchedulingProperties, springBootVersionVerifier, springClientFactory, standardGsonBuilderCustomizer, standardJacksonObjectMapperBuilderCustomizer, stringHttpMessageConverter, taskExecutorBuilder, taskSchedulerBuilder, tomcatMetricsBinder, tomcatServletWebServerFactory, tomcatServletWebServerFactoryCustomizer, tomcatWebServerFactoryCustomizer, traceFilterRegistration, traceRepository, uptimeMetrics, viewControllerHandlerMapping, viewResolver, webEndpointDiscoverer, webEndpointPathMapper, webEndpointServletHandlerMapping, webExposeExcludePropertyEndpointFilter, webMvcMetricsFilter, webMvcTagsProvider, webServerFactoryCustomizerBeanPostProcessor, websocketServletWebServerCustomizer, welcomePageHandlerMapping]
[22:02:26.100] INFO  [main]o.s.c.c.s.GenericScope - BeanFactory id=70732503-b5f4-38d3-8aa5-7fe93f9c0d3b
[22:02:26.102] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'propertySourcesPlaceholderConfigurer'
[22:02:26.105] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.event.internalEventListenerProcessor'
[22:02:26.105] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.context.properties.ConfigurationBeanFactoryMetadata'
[22:02:26.105] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'preserveErrorControllerTargetClassPostProcessor'
[22:02:26.106] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.event.internalEventListenerFactory'
[22:02:26.111] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'
[22:02:26.111] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'
[22:02:26.111] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor'
[22:02:26.113] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'methodValidationPostProcessor'
[22:02:26.132] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'methodValidationPostProcessor' via factory method to bean named 'environment'
[22:02:26.143] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.aop.config.internalAutoProxyCreator'
[22:02:26.197] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'webServerFactoryCustomizerBeanPostProcessor'
[22:02:26.197] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'errorPageRegistrarBeanPostProcessor'
[22:02:26.197] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'meterRegistryPostProcessor'
[22:02:26.258] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'meterRegistryPostProcessor' via factory method to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@551aa95a'
[22:02:26.264] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'configurationPropertiesBeans'
[22:02:26.265] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration'
[22:02:26.265] INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$c6a3581] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[22:02:26.276] DEBUG [main]o.s.u.c.s.UiApplicationContextUtils - Unable to locate ThemeSource with name 'themeSource': using default [org.springframework.ui.context.support.ResourceBundleThemeSource@19e7a160]
[22:02:26.279] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'tomcatServletWebServerFactory'
[22:02:26.279] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration$EmbeddedTomcat'
[22:02:26.355] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'websocketServletWebServerCustomizer'
[22:02:26.355] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration$TomcatWebSocketConfiguration'
[22:02:26.359] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'servletWebServerFactoryCustomizer'
[22:02:26.360] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration'
[22:02:26.362] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'server-org.springframework.boot.autoconfigure.web.ServerProperties'
[22:02:26.376] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'servletWebServerFactoryCustomizer' via factory method to bean named 'server-org.springframework.boot.autoconfigure.web.ServerProperties'
[22:02:26.379] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'tomcatServletWebServerFactoryCustomizer'
[22:02:26.381] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'tomcatServletWebServerFactoryCustomizer' via factory method to bean named 'server-org.springframework.boot.autoconfigure.web.ServerProperties'
[22:02:26.382] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'tomcatWebServerFactoryCustomizer'
[22:02:26.382] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration$TomcatWebServerFactoryCustomizerConfiguration'
[22:02:26.386] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'tomcatWebServerFactoryCustomizer' via factory method to bean named 'environment'
[22:02:26.386] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'tomcatWebServerFactoryCustomizer' via factory method to bean named 'server-org.springframework.boot.autoconfigure.web.ServerProperties'
[22:02:26.391] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'localeCharsetMappingsCustomizer'
[22:02:26.391] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration'
[22:02:26.393] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration$$EnhancerBySpringCGLIB$$c3a4e926] - unable to determine constructor/method parameter names
[22:02:26.395] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'spring.http-org.springframework.boot.autoconfigure.http.HttpProperties'
[22:02:26.401] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration' via constructor to bean named 'spring.http-org.springframework.boot.autoconfigure.http.HttpProperties'
[22:02:26.530] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'errorPageCustomizer'
[22:02:26.531] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration'
[22:02:26.532] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$$EnhancerBySpringCGLIB$$1bfc3809] - unable to determine constructor/method parameter names
[22:02:26.536] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'dispatcherServletRegistration'
[22:02:26.536] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration'
[22:02:26.538] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration$$EnhancerBySpringCGLIB$$a25756f4] - unable to determine constructor/method parameter names
[22:02:26.541] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'spring.mvc-org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties'
[22:02:26.544] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration' via constructor to bean named 'spring.mvc-org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties'
[22:02:26.546] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'multipartConfigElement'
[22:02:26.546] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration'
[22:02:26.547] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration$$EnhancerBySpringCGLIB$$32957133] - unable to determine constructor/method parameter names
[22:02:26.549] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'spring.servlet.multipart-org.springframework.boot.autoconfigure.web.servlet.MultipartProperties'
[22:02:26.555] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration' via constructor to bean named 'spring.servlet.multipart-org.springframework.boot.autoconfigure.web.servlet.MultipartProperties'
[22:02:26.565] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'dispatcherServlet'
[22:02:26.565] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration'
[22:02:26.566] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration$$EnhancerBySpringCGLIB$$404fc24d] - unable to determine constructor/method parameter names
[22:02:26.569] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration' via constructor to bean named 'spring.http-org.springframework.boot.autoconfigure.http.HttpProperties'
[22:02:26.569] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration' via constructor to bean named 'spring.mvc-org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties'
[22:02:26.593] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'dispatcherServletRegistration' via factory method to bean named 'dispatcherServlet'
[22:02:26.599] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration' via constructor to bean named 'server-org.springframework.boot.autoconfigure.web.ServerProperties'
[22:02:26.599] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration' via constructor to bean named 'dispatcherServletRegistration'
[22:02:26.601] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'conventionErrorViewResolver'
[22:02:26.601] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$DefaultErrorViewResolverConfiguration'
[22:02:26.602] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$DefaultErrorViewResolverConfiguration$$EnhancerBySpringCGLIB$$30910ca9] - unable to determine constructor/method parameter names
[22:02:26.605] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'spring.resources-org.springframework.boot.autoconfigure.web.ResourceProperties'
[22:02:26.609] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$DefaultErrorViewResolverConfiguration' via constructor to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@551aa95a'
[22:02:26.609] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$DefaultErrorViewResolverConfiguration' via constructor to bean named 'spring.resources-org.springframework.boot.autoconfigure.web.ResourceProperties'
[22:02:26.713] DEBUG [main]o.s.b.w.e.t.TomcatServletWebServerFactory - Code archive: /Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar
[22:02:26.713] DEBUG [main]o.s.b.w.e.t.TomcatServletWebServerFactory - Code archive: /Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar
[22:02:26.713] DEBUG [main]o.s.b.w.e.t.TomcatServletWebServerFactory - None of the document roots [src/main/webapp, public, static] point to a directory and will be ignored.
[22:02:26.763] INFO  [main]o.s.b.w.e.t.TomcatWebServer - Tomcat initialized with port(s): 20000 (http)
[22:02:26.781] INFO  [main]o.a.c.h.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-20000"]
[22:02:26.794] INFO  [main]o.a.c.c.StandardService - Starting service [Tomcat]
[22:02:26.794] INFO  [main]o.a.c.c.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.19]
[22:02:26.904] INFO  [main]o.a.c.c.C.[.[.[/] - Initializing Spring embedded WebApplicationContext
[22:02:26.904] DEBUG [main]o.s.w.c.ContextLoader - Published root WebApplicationContext as ServletContext attribute with name [org.springframework.web.context.WebApplicationContext.ROOT]
[22:02:26.904] INFO  [main]o.s.w.c.ContextLoader - Root WebApplicationContext: initialization completed in 2028 ms
[22:02:26.907] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'webMvcMetricsFilter'
[22:02:26.908] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.metrics.web.servlet.WebMvcMetricsAutoConfiguration'
[22:02:26.908] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.actuate.autoconfigure.metrics.web.servlet.WebMvcMetricsAutoConfiguration$$EnhancerBySpringCGLIB$$3f1ec2c] - unable to determine constructor/method parameter names
[22:02:26.909] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'management.metrics-org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties'
[22:02:26.912] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.actuate.autoconfigure.metrics.web.servlet.WebMvcMetricsAutoConfiguration' via constructor to bean named 'management.metrics-org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties'
[22:02:26.913] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'simpleMeterRegistry'
[22:02:26.914] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration'
[22:02:26.915] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'simpleConfig'
[22:02:26.916] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'management.metrics.export.simple-org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleProperties'
[22:02:26.918] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'simpleConfig' via factory method to bean named 'management.metrics.export.simple-org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleProperties'
[22:02:26.925] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'micrometerClock'
[22:02:26.925] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration'
[22:02:26.929] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'simpleMeterRegistry' via factory method to bean named 'simpleConfig'
[22:02:26.929] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'simpleMeterRegistry' via factory method to bean named 'micrometerClock'
[22:02:26.953] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'propertiesMeterFilter'
[22:02:26.954] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'propertiesMeterFilter' via factory method to bean named 'management.metrics-org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties'
[22:02:26.956] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'metricsHttpClientUriTagFilter'
[22:02:26.956] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.metrics.web.client.HttpClientMetricsAutoConfiguration'
[22:02:26.957] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.actuate.autoconfigure.metrics.web.client.HttpClientMetricsAutoConfiguration$$EnhancerBySpringCGLIB$$312721f3] - unable to determine constructor/method parameter names
[22:02:26.958] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.actuate.autoconfigure.metrics.web.client.HttpClientMetricsAutoConfiguration' via constructor to bean named 'management.metrics-org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties'
[22:02:26.963] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'metricsHttpServerUriTagFilter'
[22:02:26.968] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'jvmGcMetrics'
[22:02:26.968] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.metrics.JvmMetricsAutoConfiguration'
[22:02:26.971] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'jvmMemoryMetrics'
[22:02:26.972] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'jvmThreadMetrics'
[22:02:26.972] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'classLoaderMetrics'
[22:02:26.973] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'logbackMetrics'
[22:02:26.973] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.metrics.LogbackMetricsAutoConfiguration'
[22:02:26.976] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'uptimeMetrics'
[22:02:26.976] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.metrics.SystemMetricsAutoConfiguration'
[22:02:26.979] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'processorMetrics'
[22:02:26.980] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'fileDescriptorMetrics'
[22:02:26.981] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'hystrixMetricsBinder'
[22:02:26.981] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.netflix.hystrix.HystrixAutoConfiguration$HystrixMetricsConfiguration'
[22:02:27.046] WARN  [main]c.n.c.s.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
[22:02:27.046] INFO  [main]c.n.c.s.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[22:02:27.057] DEBUG [main]c.n.h.s.HystrixPlugins - Created HystrixDynamicProperties. Using class : com.netflix.hystrix.strategy.properties.archaius.HystrixDynamicPropertiesArchaius
[22:02:27.089] INFO  [main]c.n.c.DynamicPropertyFactory - DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@484094a5
[22:02:27.114] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'webMvcTagsProvider'
[22:02:27.115] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'webMvcMetricsFilter' via factory method to bean named 'simpleMeterRegistry'
[22:02:27.115] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'webMvcMetricsFilter' via factory method to bean named 'webMvcTagsProvider'
[22:02:27.117] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'jerseyFilterRegistration'
[22:02:27.117] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.netflix.eureka.server.EurekaServerAutoConfiguration'
[22:02:27.120] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'eurekaApplicationInfoManager'
[22:02:27.165] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'eurekaServerConfig'
[22:02:27.165] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.netflix.eureka.server.EurekaServerAutoConfiguration$EurekaServerConfigBeanConfiguration'
[22:02:27.166] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'eurekaClientConfigBean'
[22:02:27.166] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration'
[22:02:27.167] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$$EnhancerBySpringCGLIB$$a2457e53] - unable to determine constructor/method parameter names
[22:02:27.168] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration' via constructor to bean named 'environment'
[22:02:27.170] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'eurekaClientConfigBean' via factory method to bean named 'environment'
[22:02:27.184] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'eurekaServerConfig' via factory method to bean named 'eurekaClientConfigBean'
[22:02:27.194] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'eurekaClient'
[22:02:27.199] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'eureka.instance.registry-org.springframework.cloud.netflix.eureka.server.InstanceRegistryProperties'
[22:02:27.204] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'jerseyApplication'
[22:02:27.207] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'jerseyApplication' via factory method to bean named 'environment'
[22:02:27.207] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'jerseyApplication' via factory method to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@551aa95a'
[22:02:27.264] DEBUG [main]o.s.c.a.ClassPathScanningCandidateComponentProvider - Identified candidate component class: URL [jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/eureka-client-1.9.8.jar!/com/netflix/discovery/provider/DiscoveryJerseyProvider.class]
[22:02:27.283] DEBUG [main]o.s.c.a.ClassPathScanningCandidateComponentProvider - Identified candidate component class: URL [jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/eureka-core-1.9.8.jar!/com/netflix/eureka/resources/ASGResource.class]
[22:02:27.285] DEBUG [main]o.s.c.a.ClassPathScanningCandidateComponentProvider - Identified candidate component class: URL [jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/eureka-core-1.9.8.jar!/com/netflix/eureka/resources/ApplicationsResource.class]
[22:02:27.286] DEBUG [main]o.s.c.a.ClassPathScanningCandidateComponentProvider - Identified candidate component class: URL [jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/eureka-core-1.9.8.jar!/com/netflix/eureka/resources/InstancesResource.class]
[22:02:27.286] DEBUG [main]o.s.c.a.ClassPathScanningCandidateComponentProvider - Identified candidate component class: URL [jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/eureka-core-1.9.8.jar!/com/netflix/eureka/resources/PeerReplicationResource.class]
[22:02:27.287] DEBUG [main]o.s.c.a.ClassPathScanningCandidateComponentProvider - Identified candidate component class: URL [jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/eureka-core-1.9.8.jar!/com/netflix/eureka/resources/SecureVIPResource.class]
[22:02:27.287] DEBUG [main]o.s.c.a.ClassPathScanningCandidateComponentProvider - Identified candidate component class: URL [jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/eureka-core-1.9.8.jar!/com/netflix/eureka/resources/ServerInfoResource.class]
[22:02:27.287] DEBUG [main]o.s.c.a.ClassPathScanningCandidateComponentProvider - Identified candidate component class: URL [jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/eureka-core-1.9.8.jar!/com/netflix/eureka/resources/StatusResource.class]
[22:02:27.287] DEBUG [main]o.s.c.a.ClassPathScanningCandidateComponentProvider - Identified candidate component class: URL [jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/eureka-core-1.9.8.jar!/com/netflix/eureka/resources/VIPResource.class]
[22:02:27.305] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'jerseyFilterRegistration' via factory method to bean named 'jerseyApplication'
[22:02:27.314] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'traceFilterRegistration'
[22:02:27.316] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'httpTraceFilter'
[22:02:27.316] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.trace.http.HttpTraceAutoConfiguration$ServletTraceFilterConfiguration'
[22:02:27.317] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'traceRepository'
[22:02:27.317] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.trace.http.HttpTraceAutoConfiguration'
[22:02:27.321] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'httpExchangeTracer'
[22:02:27.322] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'management.trace.http-org.springframework.boot.actuate.autoconfigure.trace.http.HttpTraceProperties'
[22:02:27.324] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'httpExchangeTracer' via factory method to bean named 'management.trace.http-org.springframework.boot.actuate.autoconfigure.trace.http.HttpTraceProperties'
[22:02:27.326] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'httpTraceFilter' via factory method to bean named 'traceRepository'
[22:02:27.326] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'httpTraceFilter' via factory method to bean named 'httpExchangeTracer'
[22:02:27.330] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'traceFilterRegistration' via factory method to bean named 'httpTraceFilter'
[22:02:27.330] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'servletEndpointRegistrar'
[22:02:27.331] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration'
[22:02:27.331] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration$$EnhancerBySpringCGLIB$$a6848a5f] - unable to determine constructor/method parameter names
[22:02:27.333] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration' via constructor to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@551aa95a'
[22:02:27.334] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'management.endpoints.web-org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties'
[22:02:27.338] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'servletEndpointDiscoverer'
[22:02:27.338] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointAutoConfiguration$WebEndpointServletConfiguration'
[22:02:27.340] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'servletEndpointDiscoverer' via factory method to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@551aa95a'
[22:02:27.344] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'webEndpointPathMapper'
[22:02:27.344] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointAutoConfiguration'
[22:02:27.345] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointAutoConfiguration$$EnhancerBySpringCGLIB$$81c8d06f] - unable to determine constructor/method parameter names
[22:02:27.347] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointAutoConfiguration' via constructor to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@551aa95a'
[22:02:27.347] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointAutoConfiguration' via constructor to bean named 'management.endpoints.web-org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties'
[22:02:27.353] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'servletExposeExcludePropertyEndpointFilter'
[22:02:27.353] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration'
[22:02:27.355] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'servletExposeExcludePropertyEndpointFilter' via factory method to bean named 'management.endpoints.web-org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties'
[22:02:27.362] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'servletEndpointRegistrar' via factory method to bean named 'management.endpoints.web-org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties'
[22:02:27.362] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'servletEndpointRegistrar' via factory method to bean named 'servletEndpointDiscoverer'
[22:02:27.367] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'archaiusEndpoint'
[22:02:27.367] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.netflix.archaius.ArchaiusAutoConfiguration$ArchaiusEndpointConfiguration'
[22:02:27.371] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'auditEventsEndpoint'
[22:02:27.371] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.audit.AuditEventsEndpointAutoConfiguration'
[22:02:27.372] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'auditEventRepository'
[22:02:27.373] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.audit.AuditAutoConfiguration$AuditEventRepositoryConfiguration'
[22:02:27.375] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'auditEventsEndpoint' via factory method to bean named 'auditEventRepository'
[22:02:27.378] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'beansEndpoint'
[22:02:27.378] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.beans.BeansEndpointAutoConfiguration'
[22:02:27.379] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'beansEndpoint' via factory method to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@551aa95a'
[22:02:27.382] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'cachesEndpoint'
[22:02:27.382] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.cache.CachesEndpointAutoConfiguration'
[22:02:27.390] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'healthEndpoint'
[22:02:27.390] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.health.HealthEndpointConfiguration'
[22:02:27.391] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'healthAggregator'
[22:02:27.391] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration'
[22:02:27.392] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration$$EnhancerBySpringCGLIB$$f9d24e44] - unable to determine constructor/method parameter names
[22:02:27.393] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'management.health.status-org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorProperties'
[22:02:27.394] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration' via constructor to bean named 'management.health.status-org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorProperties'
[22:02:27.398] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'healthIndicatorRegistry'
[22:02:27.399] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'healthIndicatorRegistry' via factory method to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@551aa95a'
[22:02:27.401] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'diskSpaceHealthIndicator'
[22:02:27.401] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.system.DiskSpaceHealthIndicatorAutoConfiguration'
[22:02:27.402] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'diskSpaceHealthIndicatorProperties'
[22:02:27.406] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'diskSpaceHealthIndicator' via factory method to bean named 'diskSpaceHealthIndicatorProperties'
[22:02:27.407] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'refreshScopeHealthIndicator'
[22:02:27.408] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.autoconfigure.RefreshEndpointAutoConfiguration'
[22:02:27.409] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'configurationPropertiesRebinder'
[22:02:27.410] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'configurationPropertiesRebinder' via factory method to bean named 'configurationPropertiesBeans'
[22:02:27.411] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'refreshScopeHealthIndicator' via factory method to bean named 'configurationPropertiesRebinder'
[22:02:27.414] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'discoveryCompositeHealthIndicator'
[22:02:27.414] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.client.CommonsClientAutoConfiguration$DiscoveryLoadBalancerConfiguration'
[22:02:27.418] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'eurekaHealthIndicator'
[22:02:27.419] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$EurekaHealthIndicatorConfiguration'
[22:02:27.422] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'eurekaInstanceConfigBean'
[22:02:27.424] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'inetUtils'
[22:02:27.424] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.commons.util.UtilAutoConfiguration'
[22:02:27.426] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'inetUtilsProperties'
[22:02:27.432] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'inetUtils' via factory method to bean named 'inetUtilsProperties'
[22:02:27.434] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'serviceManagementMetadataProvider'
[22:02:27.436] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'eurekaInstanceConfigBean' via factory method to bean named 'inetUtils'
[22:02:27.437] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'eurekaInstanceConfigBean' via factory method to bean named 'serviceManagementMetadataProvider'
[22:02:27.437] DEBUG [main]o.s.c.e.PropertySourcesPropertyResolver - Found key 'eureka.instance.hostname' in PropertySource 'configurationProperties' with value of type String
[22:02:27.438] DEBUG [main]o.s.c.e.PropertySourcesPropertyResolver - Found key 'server.port' in PropertySource 'configurationProperties' with value of type Integer
[22:02:27.444] DEBUG [main]o.s.c.e.PropertySourcesPropertyResolver - Found key 'spring.cloud.client.hostname' in PropertySource 'configurationProperties' with value of type String
[22:02:27.444] DEBUG [main]o.s.c.e.PropertySourcesPropertyResolver - Found key 'spring.application.name' in PropertySource 'configurationProperties' with value of type String
[22:02:27.444] DEBUG [main]o.s.c.e.PropertySourcesPropertyResolver - Found key 'server.port' in PropertySource 'configurationProperties' with value of type Integer
[22:02:27.446] DEBUG [main]o.s.c.n.e.m.DefaultManagementMetadataProvider - Constructed eureka meta-data healthcheckUrl: http://localhost:20000/actuator/health
[22:02:27.447] DEBUG [main]o.s.c.n.e.m.DefaultManagementMetadataProvider - Constructed eureka meta-data statusPageUrl: http://localhost:20000/actuator/info
[22:02:27.448] DEBUG [main]o.s.c.e.PropertySourcesPropertyResolver - Found key 'spring.application.name' in PropertySource 'configurationProperties' with value of type String
[22:02:27.456] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'eurekaHealthIndicator' via factory method to bean named 'eurekaClient'
[22:02:27.456] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'eurekaHealthIndicator' via factory method to bean named 'eurekaInstanceConfigBean'
[22:02:27.456] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'eurekaHealthIndicator' via factory method to bean named 'eurekaClientConfigBean'
[22:02:27.460] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'discoveryClientHealthIndicator'
[22:02:27.461] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'spring.cloud.discovery.client.health-indicator-org.springframework.cloud.client.discovery.health.DiscoveryClientHealthIndicatorProperties'
[22:02:27.463] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'discoveryClientHealthIndicator' via factory method to bean named 'spring.cloud.discovery.client.health-indicator-org.springframework.cloud.client.discovery.health.DiscoveryClientHealthIndicatorProperties'
[22:02:27.468] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'discoveryCompositeHealthIndicator' via factory method to bean named 'healthAggregator'
[22:02:27.468] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'discoveryCompositeHealthIndicator' via factory method to bean named 'eurekaHealthIndicator'
[22:02:27.468] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'discoveryCompositeHealthIndicator' via factory method to bean named 'discoveryClientHealthIndicator'
[22:02:27.472] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'hystrixHealthIndicator'
[22:02:27.472] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.netflix.hystrix.HystrixAutoConfiguration'
[22:02:27.481] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'healthEndpoint' via factory method to bean named 'healthAggregator'
[22:02:27.481] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'healthEndpoint' via factory method to bean named 'healthIndicatorRegistry'
[22:02:27.483] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'conditionsReportEndpoint'
[22:02:27.483] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.condition.ConditionsReportEndpointAutoConfiguration'
[22:02:27.485] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'conditionsReportEndpoint' via factory method to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@551aa95a'
[22:02:27.488] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'configurationPropertiesReportEndpoint'
[22:02:27.488] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.context.properties.ConfigurationPropertiesReportEndpointAutoConfiguration'
[22:02:27.488] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.actuate.autoconfigure.context.properties.ConfigurationPropertiesReportEndpointAutoConfiguration$$EnhancerBySpringCGLIB$$4cd2eb8f] - unable to determine constructor/method parameter names
[22:02:27.489] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'management.endpoint.configprops-org.springframework.boot.actuate.autoconfigure.context.properties.ConfigurationPropertiesReportEndpointProperties'
[22:02:27.491] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.actuate.autoconfigure.context.properties.ConfigurationPropertiesReportEndpointAutoConfiguration' via constructor to bean named 'management.endpoint.configprops-org.springframework.boot.actuate.autoconfigure.context.properties.ConfigurationPropertiesReportEndpointProperties'
[22:02:27.498] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'environmentEndpoint'
[22:02:27.498] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.autoconfigure.WritableEnvironmentEndpointAutoConfiguration'
[22:02:27.499] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.cloud.autoconfigure.WritableEnvironmentEndpointAutoConfiguration$$EnhancerBySpringCGLIB$$90061d7f] - unable to determine constructor/method parameter names
[22:02:27.500] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'management.endpoint.env-org.springframework.boot.actuate.autoconfigure.env.EnvironmentEndpointProperties'
[22:02:27.501] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.cloud.autoconfigure.WritableEnvironmentEndpointAutoConfiguration' via constructor to bean named 'management.endpoint.env-org.springframework.boot.actuate.autoconfigure.env.EnvironmentEndpointProperties'
[22:02:27.502] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'environmentEndpoint' via factory method to bean named 'environment'
[22:02:27.507] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'infoEndpoint'
[22:02:27.507] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.info.InfoEndpointAutoConfiguration'
[22:02:27.511] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'envInfoContributor'
[22:02:27.511] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.info.InfoContributorAutoConfiguration'
[22:02:27.512] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.actuate.autoconfigure.info.InfoContributorAutoConfiguration$$EnhancerBySpringCGLIB$$16b584f8] - unable to determine constructor/method parameter names
[22:02:27.513] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'management.info-org.springframework.boot.actuate.autoconfigure.info.InfoContributorProperties'
[22:02:27.515] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.actuate.autoconfigure.info.InfoContributorAutoConfiguration' via constructor to bean named 'management.info-org.springframework.boot.actuate.autoconfigure.info.InfoContributorProperties'
[22:02:27.517] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'envInfoContributor' via factory method to bean named 'environment'
[22:02:27.520] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'loggersEndpoint'
[22:02:27.520] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.logging.LoggersEndpointAutoConfiguration'
[22:02:27.521] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'loggersEndpoint' via factory method to bean named 'springBootLoggingSystem'
[22:02:27.525] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'heapDumpWebEndpoint'
[22:02:27.525] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.management.HeapDumpWebEndpointAutoConfiguration'
[22:02:27.529] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'dumpEndpoint'
[22:02:27.529] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.management.ThreadDumpEndpointAutoConfiguration'
[22:02:27.532] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'metricsEndpoint'
[22:02:27.532] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.metrics.MetricsEndpointAutoConfiguration'
[22:02:27.533] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'metricsEndpoint' via factory method to bean named 'simpleMeterRegistry'
[22:02:27.536] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'scheduledTasksEndpoint'
[22:02:27.537] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.scheduling.ScheduledTasksEndpointAutoConfiguration'
[22:02:27.543] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'httpTraceEndpoint'
[22:02:27.543] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.trace.http.HttpTraceEndpointAutoConfiguration'
[22:02:27.544] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'httpTraceEndpoint' via factory method to bean named 'traceRepository'
[22:02:27.547] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'mappingsEndpoint'
[22:02:27.547] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.web.mappings.MappingsEndpointAutoConfiguration'
[22:02:27.548] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'mappingsEndpoint' via factory method to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@551aa95a'
[22:02:27.550] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'dispatcherServletMappingDescriptionProvider'
[22:02:27.550] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.web.mappings.MappingsEndpointAutoConfiguration$ServletWebConfiguration$SpringMvcConfiguration'
[22:02:27.559] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'servletMappingDescriptionProvider'
[22:02:27.559] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.web.mappings.MappingsEndpointAutoConfiguration$ServletWebConfiguration'
[22:02:27.561] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'filterMappingDescriptionProvider'
[22:02:27.563] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'refreshEndpoint'
[22:02:27.563] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.autoconfigure.RefreshEndpointAutoConfiguration$RefreshEndpointConfiguration'
[22:02:27.565] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'contextRefresher'
[22:02:27.565] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.autoconfigure.RefreshAutoConfiguration'
[22:02:27.567] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'contextRefresher' via factory method to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@551aa95a'
[22:02:27.567] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'contextRefresher' via factory method to bean named 'refreshScope'
[22:02:27.569] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'refreshEndpoint' via factory method to bean named 'contextRefresher'
[22:02:27.571] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'featuresEndpoint'
[22:02:27.571] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.client.CommonsClientAutoConfiguration$ActuatorConfiguration'
[22:02:27.573] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'eurekaFeature'
[22:02:27.574] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'commonsFeatures'
[22:02:27.574] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'ribbonFeature'
[22:02:27.575] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.netflix.ribbon.RibbonAutoConfiguration'
[22:02:27.576] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'default.org.springframework.cloud.netflix.ribbon.RibbonAutoConfiguration.RibbonClientSpecification'
[22:02:27.579] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'default.org.springframework.cloud.netflix.ribbon.eureka.RibbonEurekaAutoConfiguration.RibbonClientSpecification'
[22:02:27.580] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'ribbon.eager-load-org.springframework.cloud.netflix.ribbon.RibbonEagerLoadProperties'
[22:02:27.584] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'eurekaServerFeature'
[22:02:27.587] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'serviceRegistryEndpoint'
[22:02:27.587] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.client.serviceregistry.ServiceRegistryAutoConfiguration$ServiceRegistryEndpointConfiguration'
[22:02:27.589] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.client.serviceregistry.ServiceRegistryAutoConfiguration'
[22:02:27.589] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.cloud.client.serviceregistry.ServiceRegistryAutoConfiguration$ServiceRegistryEndpointConfiguration' via constructor to bean named 'org.springframework.cloud.client.serviceregistry.ServiceRegistryAutoConfiguration'
[22:02:27.591] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'eurekaRegistration'
[22:02:27.605] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'eurekaServiceRegistry'
[22:02:27.606] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'serviceRegistryEndpoint' via factory method to bean named 'eurekaServiceRegistry'
[22:02:27.614] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'cachesEndpointWebExtension'
[22:02:27.616] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'cachesEndpointWebExtension' via factory method to bean named 'cachesEndpoint'
[22:02:27.618] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'healthEndpointWebExtension'
[22:02:27.619] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.health.HealthEndpointWebExtensionConfiguration$ServletWebHealthConfiguration'
[22:02:27.622] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'healthWebEndpointResponseMapper'
[22:02:27.622] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.health.HealthEndpointWebExtensionConfiguration'
[22:02:27.624] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'createHealthStatusHttpMapper'
[22:02:27.625] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'createHealthStatusHttpMapper' via factory method to bean named 'management.health.status-org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorProperties'
[22:02:27.630] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'management.endpoint.health-org.springframework.boot.actuate.autoconfigure.health.HealthEndpointProperties'
[22:02:27.633] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'healthWebEndpointResponseMapper' via factory method to bean named 'createHealthStatusHttpMapper'
[22:02:27.634] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'healthWebEndpointResponseMapper' via factory method to bean named 'management.endpoint.health-org.springframework.boot.actuate.autoconfigure.health.HealthEndpointProperties'
[22:02:27.635] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'healthEndpointWebExtension' via factory method to bean named 'healthEndpoint'
[22:02:27.635] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'healthEndpointWebExtension' via factory method to bean named 'healthWebEndpointResponseMapper'
[22:02:27.639] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'environmentEndpointWebExtension'
[22:02:27.642] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'environmentManager'
[22:02:27.642] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.autoconfigure.LifecycleMvcEndpointAutoConfiguration'
[22:02:27.645] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'environmentManager' via factory method to bean named 'environment'
[22:02:27.648] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'environmentEndpointWebExtension' via factory method to bean named 'environmentEndpoint'
[22:02:27.649] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'environmentEndpointWebExtension' via factory method to bean named 'environmentManager'
[22:02:27.655] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'requestContextFilter'
[22:02:27.655] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'hiddenHttpMethodFilter'
[22:02:27.655] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration'
[22:02:27.660] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'formContentFilter'
[22:02:27.670] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'characterEncodingFilter'
[22:02:27.679] DEBUG [main]o.s.b.w.s.ServletContextInitializerBeans - Mapping filters: filterRegistrationBean urls=[/*], filterRegistrationBean urls=[/*], filterRegistrationBean urls=[/eureka/*], characterEncodingFilter urls=[/*], hiddenHttpMethodFilter urls=[/*], formContentFilter urls=[/*], requestContextFilter urls=[/*]
[22:02:27.680] DEBUG [main]o.s.b.w.s.ServletContextInitializerBeans - Mapping servlets: dispatcherServlet urls=[/]
[22:02:27.715] DEBUG [main]o.s.b.a.m.w.s.WebMvcMetricsFilter - Filter 'webMvcMetricsFilter' configured for use
[22:02:27.715] DEBUG [main]o.s.b.w.s.f.OrderedRequestContextFilter - Filter 'requestContextFilter' configured for use
[22:02:27.715] DEBUG [main]o.s.b.w.s.f.OrderedHiddenHttpMethodFilter - Filter 'hiddenHttpMethodFilter' configured for use
[22:02:27.715] DEBUG [main]o.s.b.w.s.f.OrderedCharacterEncodingFilter - Filter 'characterEncodingFilter' configured for use
[22:02:27.715] DEBUG [main]o.s.b.a.w.t.s.HttpTraceFilter - Filter 'httpTraceFilter' configured for use
[22:02:27.867] INFO  [main]c.s.j.s.i.a.WebApplicationImpl - Initiating Jersey application, version 'Jersey: 1.19.1 03/11/2016 02:08 PM'
[22:02:27.975] INFO  [main]c.n.d.p.DiscoveryJerseyProvider - Using JSON encoding codec LegacyJacksonJson
[22:02:27.976] INFO  [main]c.n.d.p.DiscoveryJerseyProvider - Using JSON decoding codec LegacyJacksonJson
[22:02:28.221] INFO  [main]c.n.d.p.DiscoveryJerseyProvider - Using XML encoding codec XStreamXml
[22:02:28.221] INFO  [main]c.n.d.p.DiscoveryJerseyProvider - Using XML decoding codec XStreamXml
[22:02:28.601] DEBUG [main]o.s.b.w.s.f.OrderedFormContentFilter - Filter 'formContentFilter' configured for use
[22:02:28.611] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'eurekaServerApplication'
[22:02:28.612] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.netflix.eureka.server.EurekaServerMarkerConfiguration'
[22:02:28.612] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'eurekaServerMarkerBean'
[22:02:28.615] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.AutoConfigurationPackages'
[22:02:28.615] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration'
[22:02:28.615] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration'
[22:02:28.616] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration'
[22:02:28.616] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.netflix.archaius.ArchaiusAutoConfiguration$PropagateEventsConfiguration'
[22:02:28.617] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.netflix.archaius.ArchaiusAutoConfiguration'
[22:02:28.621] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'configurableEnvironmentConfiguration'
[22:02:28.622] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'configurableEnvironmentConfiguration' via factory method to bean named 'environment'
[22:02:28.622] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'configurableEnvironmentConfiguration' via factory method to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@551aa95a'
[22:02:28.622] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'configurableEnvironmentConfiguration'
[22:02:28.622] DEBUG [main]o.s.c.e.PropertySourcesPropertyResolver - Found key 'spring.application.name' in PropertySource 'configurationProperties' with value of type String
[22:02:28.623] WARN  [main]c.n.c.s.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
[22:02:28.623] INFO  [main]c.n.c.s.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[22:02:28.629] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration'
[22:02:28.630] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration$$EnhancerBySpringCGLIB$$7befcb5a] - unable to determine constructor/method parameter names
[22:02:28.631] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'spring.task.execution-org.springframework.boot.autoconfigure.task.TaskExecutionProperties'
[22:02:28.632] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration' via constructor to bean named 'spring.task.execution-org.springframework.boot.autoconfigure.task.TaskExecutionProperties'
[22:02:28.633] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'taskExecutorBuilder'
[22:02:28.638] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration'
[22:02:28.639] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'defaultValidator'
[22:02:28.658] DEBUG [main]o.h.v.i.e.r.TraversableResolvers - Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
[22:02:28.658] DEBUG [main]o.h.v.m.ResourceBundleMessageInterpolator - Loaded expression factory via original TCCL
[22:02:28.671] DEBUG [main]o.h.v.i.e.r.TraversableResolvers - Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
[22:02:28.673] DEBUG [main]o.h.v.i.e.ConfigurationImpl - Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
[22:02:28.675] DEBUG [main]o.h.v.i.e.ConfigurationImpl - Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
[22:02:28.677] DEBUG [main]o.h.v.i.e.ConfigurationImpl - Setting custom ParameterNameProvider of type org.springframework.validation.beanvalidation.LocalValidatorFactoryBean$1
[22:02:28.679] DEBUG [main]o.h.v.i.x.c.ValidationXmlParser - Trying to load META-INF/validation.xml for XML based Validator configuration.
[22:02:28.679] DEBUG [main]o.h.v.i.x.c.ResourceLoaderHelper - Trying to load META-INF/validation.xml via user class loader
[22:02:28.680] DEBUG [main]o.h.v.i.x.c.ResourceLoaderHelper - Trying to load META-INF/validation.xml via TCCL
[22:02:28.681] DEBUG [main]o.h.v.i.x.c.ResourceLoaderHelper - Trying to load META-INF/validation.xml via Hibernate Validator's class loader
[22:02:28.682] DEBUG [main]o.h.v.i.x.c.ValidationXmlParser - No META-INF/validation.xml found. Using annotation based configuration only.
[22:02:28.700] DEBUG [main]o.h.v.i.e.ValidatorFactoryImpl - HV000234: Using org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator as ValidatorFactory-scoped message interpolator.
[22:02:28.701] DEBUG [main]o.h.v.i.e.ValidatorFactoryImpl - HV000234: Using org.hibernate.validator.internal.engine.resolver.TraverseAllTraversableResolver as ValidatorFactory-scoped traversable resolver.
[22:02:28.701] DEBUG [main]o.h.v.i.e.ValidatorFactoryImpl - HV000234: Using org.hibernate.validator.internal.util.ExecutableParameterNameProvider as ValidatorFactory-scoped parameter name provider.
[22:02:28.701] DEBUG [main]o.h.v.i.e.ValidatorFactoryImpl - HV000234: Using org.hibernate.validator.internal.engine.DefaultClockProvider as ValidatorFactory-scoped clock provider.
[22:02:28.701] DEBUG [main]o.h.v.i.e.ValidatorFactoryImpl - HV000234: Using org.hibernate.validator.internal.engine.scripting.DefaultScriptEvaluatorFactory as ValidatorFactory-scoped script evaluator factory.
[22:02:28.702] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration'
[22:02:28.703] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'error'
[22:02:28.706] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'beanNameViewResolver'
[22:02:28.708] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'errorAttributes'
[22:02:28.709] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'basicErrorController'
[22:02:28.711] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'basicErrorController' via factory method to bean named 'errorAttributes'
[22:02:28.712] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter$FaviconConfiguration'
[22:02:28.713] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter$FaviconConfiguration$$EnhancerBySpringCGLIB$$b97e562f] - unable to determine constructor/method parameter names
[22:02:28.714] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter$FaviconConfiguration' via constructor to bean named 'spring.resources-org.springframework.boot.autoconfigure.web.ResourceProperties'
[22:02:28.715] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'faviconHandlerMapping'
[22:02:28.721] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'faviconRequestHandler'
[22:02:28.736] DEBUG [main]o.s.w.s.h.SimpleUrlHandlerMapping - Patterns [/**/favicon.ico] in 'faviconHandlerMapping'
[22:02:28.737] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration'
[22:02:28.738] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration$$EnhancerBySpringCGLIB$$5b3d8304] - unable to determine constructor/method parameter names
[22:02:28.740] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration' via constructor to bean named 'org.springframework.beans.factory.support.DefaultListableBeanFactory@4f063c0a'
[22:02:28.762] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter'
[22:02:28.763] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter$$EnhancerBySpringCGLIB$$fd414de9] - unable to determine constructor/method parameter names
[22:02:28.764] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter' via constructor to bean named 'spring.resources-org.springframework.boot.autoconfigure.web.ResourceProperties'
[22:02:28.764] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter' via constructor to bean named 'spring.mvc-org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties'
[22:02:28.764] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter' via constructor to bean named 'org.springframework.beans.factory.support.DefaultListableBeanFactory@4f063c0a'
[22:02:28.765] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'metricsWebMvcConfigurer'
[22:02:28.768] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'metricsWebMvcConfigurer' via factory method to bean named 'simpleMeterRegistry'
[22:02:28.768] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'metricsWebMvcConfigurer' via factory method to bean named 'webMvcTagsProvider'
[22:02:28.769] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'requestMappingHandlerAdapter'
[22:02:28.810] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'mvcContentNegotiationManager'
[22:02:28.814] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'messageConverters'
[22:02:28.814] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration'
[22:02:28.815] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$$EnhancerBySpringCGLIB$$a83fe18] - unable to determine constructor/method parameter names
[22:02:28.818] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'stringHttpMessageConverter'
[22:02:28.818] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration'
[22:02:28.819] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration$$EnhancerBySpringCGLIB$$3d91c4b8] - unable to determine constructor/method parameter names
[22:02:28.820] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration' via constructor to bean named 'spring.http-org.springframework.boot.autoconfigure.http.HttpProperties'
[22:02:28.827] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'mappingJackson2XmlHttpMessageConverter'
[22:02:28.828] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2XmlHttpMessageConverterConfiguration'
[22:02:28.829] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'jacksonObjectMapperBuilder'
[22:02:28.829] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration'
[22:02:28.830] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration$$EnhancerBySpringCGLIB$$fe30742e] - unable to determine constructor/method parameter names
[22:02:28.830] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration' via constructor to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@551aa95a'
[22:02:28.831] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'standardJacksonObjectMapperBuilderCustomizer'
[22:02:28.832] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration'
[22:02:28.833] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties'
[22:02:28.834] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'standardJacksonObjectMapperBuilderCustomizer' via factory method to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@551aa95a'
[22:02:28.834] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'standardJacksonObjectMapperBuilderCustomizer' via factory method to bean named 'spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties'
[22:02:28.837] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'jacksonObjectMapperBuilder' via factory method to bean named 'standardJacksonObjectMapperBuilderCustomizer'
[22:02:28.840] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'parameterNamesModule'
[22:02:28.841] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration'
[22:02:28.846] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'jsonComponentModule'
[22:02:28.846] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration'
[22:02:28.855] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'mappingJackson2XmlHttpMessageConverter' via factory method to bean named 'jacksonObjectMapperBuilder'
[22:02:28.866] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'mappingJackson2HttpMessageConverter'
[22:02:28.866] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration'
[22:02:28.867] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'jacksonObjectMapper'
[22:02:28.867] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration'
[22:02:28.868] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'jacksonObjectMapper' via factory method to bean named 'jacksonObjectMapperBuilder'
[22:02:28.886] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'mappingJackson2HttpMessageConverter' via factory method to bean named 'jacksonObjectMapper'
[22:02:28.918] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'mvcConversionService'
[22:02:28.927] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'mvcValidator'
[22:02:28.931] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'applicationTaskExecutor'
[22:02:28.932] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'applicationTaskExecutor' via factory method to bean named 'taskExecutorBuilder'
[22:02:28.937] INFO  [main]o.s.s.c.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
[22:02:28.948] DEBUG [main]o.s.w.s.m.m.a.RequestMappingHandlerAdapter - ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
[22:02:28.990] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'requestMappingHandlerMapping'
[22:02:29.001] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'mvcResourceUrlProvider'
[22:02:29.031] DEBUG [main]o.s.w.s.m.m.a.RequestMappingHandlerMapping - 4 mappings in 'requestMappingHandlerMapping'
[22:02:29.031] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'mvcPathMatcher'
[22:02:29.032] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'mvcUrlPathHelper'
[22:02:29.032] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'viewControllerHandlerMapping'
[22:02:29.033] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'beanNameHandlerMapping'
[22:02:29.036] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'resourceHandlerMapping'
[22:02:29.041] DEBUG [main]o.s.w.s.h.SimpleUrlHandlerMapping - Patterns [/webjars/**, /**] in 'resourceHandlerMapping'
[22:02:29.042] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'defaultServletHandlerMapping'
[22:02:29.042] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'mvcUriComponentsContributor'
[22:02:29.045] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'httpRequestHandlerAdapter'
[22:02:29.045] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'simpleControllerHandlerAdapter'
[22:02:29.046] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'handlerExceptionResolver'
[22:02:29.099] DEBUG [main]o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - ControllerAdvice beans: 0 @ExceptionHandler, 1 ResponseBodyAdvice
[22:02:29.102] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'mvcViewResolver'
[22:02:29.106] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'defaultViewResolver'
[22:02:29.116] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'viewResolver'
[22:02:29.117] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'viewResolver' via factory method to bean named 'org.springframework.beans.factory.support.DefaultListableBeanFactory@4f063c0a'
[22:02:29.120] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'freeMarkerViewResolver'
[22:02:29.120] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.freemarker.FreeMarkerServletWebConfiguration'
[22:02:29.120] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.autoconfigure.freemarker.FreeMarkerServletWebConfiguration$$EnhancerBySpringCGLIB$$368ad6e] - unable to determine constructor/method parameter names
[22:02:29.121] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'spring.freemarker-org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties'
[22:02:29.122] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.freemarker.FreeMarkerServletWebConfiguration' via constructor to bean named 'spring.freemarker-org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties'
[22:02:29.128] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'welcomePageHandlerMapping'
[22:02:29.128] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'welcomePageHandlerMapping' via factory method to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@551aa95a'
[22:02:29.202] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.audit.AuditAutoConfiguration'
[22:02:29.202] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.actuate.autoconfigure.audit.AuditAutoConfiguration$$EnhancerBySpringCGLIB$$92053af3] - unable to determine constructor/method parameter names
[22:02:29.204] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'auditListener'
[22:02:29.206] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'loggingRebinder'
[22:02:29.207] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'refreshEventListener'
[22:02:29.208] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'refreshEventListener' via factory method to bean named 'contextRefresher'
[22:02:29.209] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.web.servlet.ServletManagementContextAutoConfiguration'
[22:02:29.209] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'servletWebChildContextFactory'
[22:02:29.211] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'managementServletContext'
[22:02:29.212] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'managementServletContext' via factory method to bean named 'management.endpoints.web-org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties'
[22:02:29.213] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.health.HealthEndpointAutoConfiguration'
[22:02:29.213] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.endpoint.EndpointAutoConfiguration'
[22:02:29.214] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'endpointOperationParameterMapper'
[22:02:29.217] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'endpointCachingOperationInvokerAdvisor'
[22:02:29.217] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'endpointCachingOperationInvokerAdvisor' via factory method to bean named 'environment'
[22:02:29.219] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration'
[22:02:29.221] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'mbeanExporter'
[22:02:29.221] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'objectNamingStrategy'
[22:02:29.226] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'mbeanExporter' via factory method to bean named 'objectNamingStrategy'
[22:02:29.238] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'mbeanServer'
[22:02:29.251] DEBUG [main]o.s.j.s.JmxUtils - Found MBeanServer: com.sun.jmx.mbeanserver.JmxMBeanServer@544999a6
[22:02:29.255] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointAutoConfiguration'
[22:02:29.256] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointAutoConfiguration$$EnhancerBySpringCGLIB$$a11a206d] - unable to determine constructor/method parameter names
[22:02:29.256] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'management.endpoints.jmx-org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointProperties'
[22:02:29.257] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'management.endpoints.jmx-org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointProperties' via constructor to bean named 'environment'
[22:02:29.257] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointAutoConfiguration' via constructor to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@551aa95a'
[22:02:29.257] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointAutoConfiguration' via constructor to bean named 'management.endpoints.jmx-org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointProperties'
[22:02:29.258] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'jmxAnnotationEndpointDiscoverer'
[22:02:29.258] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'jmxAnnotationEndpointDiscoverer' via factory method to bean named 'endpointOperationParameterMapper'
[22:02:29.262] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'jmxIncludeExcludePropertyEndpointFilter'
[22:02:29.264] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'jmxMBeanExporter'
[22:02:29.265] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'jmxMBeanExporter' via factory method to bean named 'mbeanServer'
[22:02:29.265] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'jmxMBeanExporter' via factory method to bean named 'environment'
[22:02:29.265] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'jmxMBeanExporter' via factory method to bean named 'jmxAnnotationEndpointDiscoverer'
[22:02:29.310] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'endpointMediaTypes'
[22:02:29.311] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'webEndpointDiscoverer'
[22:02:29.312] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'webEndpointDiscoverer' via factory method to bean named 'endpointOperationParameterMapper'
[22:02:29.312] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'webEndpointDiscoverer' via factory method to bean named 'endpointMediaTypes'
[22:02:29.314] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'webExposeExcludePropertyEndpointFilter'
[22:02:29.316] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'controllerEndpointDiscoverer'
[22:02:29.317] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'controllerExposeExcludePropertyEndpointFilter'
[22:02:29.318] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'pathMappedEndpoints'
[22:02:29.320] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'pathMappedEndpoints' via factory method to bean named 'jmxAnnotationEndpointDiscoverer'
[22:02:29.320] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'pathMappedEndpoints' via factory method to bean named 'servletEndpointDiscoverer'
[22:02:29.320] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'pathMappedEndpoints' via factory method to bean named 'webEndpointDiscoverer'
[22:02:29.320] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'pathMappedEndpoints' via factory method to bean named 'controllerEndpointDiscoverer'
[22:02:29.320] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'pathMappedEndpoints' via factory method to bean named 'management.endpoints.web-org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties'
[22:02:29.345] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.env.EnvironmentEndpointAutoConfiguration'
[22:02:29.345] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.actuate.autoconfigure.env.EnvironmentEndpointAutoConfiguration$$EnhancerBySpringCGLIB$$fc8e8534] - unable to determine constructor/method parameter names
[22:02:29.346] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.actuate.autoconfigure.env.EnvironmentEndpointAutoConfiguration' via constructor to bean named 'management.endpoint.env-org.springframework.boot.actuate.autoconfigure.env.EnvironmentEndpointProperties'
[22:02:29.346] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration'
[22:02:29.347] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration$$EnhancerBySpringCGLIB$$2c4a3f9d] - unable to determine constructor/method parameter names
[22:02:29.348] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'spring.info-org.springframework.boot.autoconfigure.info.ProjectInfoProperties'
[22:02:29.348] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration' via constructor to bean named 'spring.info-org.springframework.boot.autoconfigure.info.ProjectInfoProperties'
[22:02:29.349] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.logging.LogFileWebEndpointAutoConfiguration'
[22:02:29.349] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.actuate.autoconfigure.logging.LogFileWebEndpointAutoConfiguration$$EnhancerBySpringCGLIB$$ea3cbb0d] - unable to determine constructor/method parameter names
[22:02:29.350] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'management.endpoint.logfile-org.springframework.boot.actuate.autoconfigure.logging.LogFileWebEndpointProperties'
[22:02:29.350] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.actuate.autoconfigure.logging.LogFileWebEndpointAutoConfiguration' via constructor to bean named 'management.endpoint.logfile-org.springframework.boot.actuate.autoconfigure.logging.LogFileWebEndpointProperties'
[22:02:29.351] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.metrics.CompositeMeterRegistryAutoConfiguration'
[22:02:29.351] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.metrics.web.client.RestTemplateMetricsConfiguration'
[22:02:29.351] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.actuate.autoconfigure.metrics.web.client.RestTemplateMetricsConfiguration$$EnhancerBySpringCGLIB$$a60ff1dd] - unable to determine constructor/method parameter names
[22:02:29.352] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.actuate.autoconfigure.metrics.web.client.RestTemplateMetricsConfiguration' via constructor to bean named 'management.metrics-org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties'
[22:02:29.353] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'restTemplateTagConfigurer'
[22:02:29.355] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'metricsRestTemplateCustomizer'
[22:02:29.356] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'metricsRestTemplateCustomizer' via factory method to bean named 'simpleMeterRegistry'
[22:02:29.357] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'metricsRestTemplateCustomizer' via factory method to bean named 'restTemplateTagConfigurer'
[22:02:29.358] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.metrics.web.tomcat.TomcatMetricsAutoConfiguration'
[22:02:29.359] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'tomcatMetricsBinder'
[22:02:29.359] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'tomcatMetricsBinder' via factory method to bean named 'simpleMeterRegistry'
[22:02:29.361] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$CglibAutoProxyConfiguration'
[22:02:29.361] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.aop.AopAutoConfiguration'
[22:02:29.361] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration'
[22:02:29.362] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'freeMarkerConfigurer'
[22:02:29.461] DEBUG [main]o.s.w.s.v.f.FreeMarkerConfigurer - Cannot resolve template loader path [classpath:/templates/] to [java.io.File]: using SpringTemplateLoader as fallback
java.io.FileNotFoundException: class path resource [templates/] cannot be resolved to absolute file path because it does not reside in the file system: jar:file:/Users/mtianyan/tyRepos/Java/Mmall_Learning/shop-cloud/platform/register-center/target/register-center-1.0-SNAPSHOT.jar!/BOOT-INF/lib/spring-cloud-netflix-eureka-server-2.1.1.RELEASE.jar!/templates/
	at org.springframework.util.ResourceUtils.getFile(ResourceUtils.java:217)
	at org.springframework.core.io.AbstractFileResolvingResource.getFile(AbstractFileResolvingResource.java:154)
	at org.springframework.ui.freemarker.FreeMarkerConfigurationFactory.getTemplateLoaderForPath(FreeMarkerConfigurationFactory.java:345)
	at org.springframework.ui.freemarker.FreeMarkerConfigurationFactory.createConfiguration(FreeMarkerConfigurationFactory.java:297)
	at org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer.afterPropertiesSet(FreeMarkerConfigurer.java:120)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1837)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1774)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:843)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:877)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316)
	at org.springframework.boot.builder.SpringApplicationBuilder.run(SpringApplicationBuilder.java:139)
	at cn.mtianyan.EurekaServerApplication.main(EurekaServerApplication.java:19)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:49)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:109)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:58)
	at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:88)
[22:02:29.462] DEBUG [main]o.s.u.f.SpringTemplateLoader - SpringTemplateLoader for FreeMarker: using resource loader [org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@551aa95a, started on Sun Nov 29 22:02:24 CST 2020, parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@7e0babb1] and template loader path [classpath:/templates/]
[22:02:29.464] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'freeMarkerConfiguration'
[22:02:29.464] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'freeMarkerConfiguration' via factory method to bean named 'freeMarkerConfigurer'
[22:02:29.471] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration'
[22:02:29.472] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration$$EnhancerBySpringCGLIB$$76d1650e] - unable to determine constructor/method parameter names
[22:02:29.472] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration' via constructor to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@551aa95a'
[22:02:29.472] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration' via constructor to bean named 'spring.freemarker-org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties'
[22:02:29.473] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration'
[22:02:29.473] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'gsonBuilder'
[22:02:29.474] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'standardGsonBuilderCustomizer'
[22:02:29.475] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'spring.gson-org.springframework.boot.autoconfigure.gson.GsonProperties'
[22:02:29.475] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'standardGsonBuilderCustomizer' via factory method to bean named 'spring.gson-org.springframework.boot.autoconfigure.gson.GsonProperties'
[22:02:29.478] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'gsonBuilder' via factory method to bean named 'standardGsonBuilderCustomizer'
[22:02:29.489] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'gson'
[22:02:29.490] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'gson' via factory method to bean named 'gsonBuilder'
[22:02:29.523] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration'
[22:02:29.523] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.http.GsonHttpMessageConvertersConfiguration'
[22:02:29.524] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration$LoggingCodecConfiguration'
[22:02:29.524] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'loggingCodecCustomizer'
[22:02:29.524] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'loggingCodecCustomizer' via factory method to bean named 'spring.http-org.springframework.boot.autoconfigure.http.HttpProperties'
[22:02:29.526] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration$JacksonCodecConfiguration'
[22:02:29.526] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'jacksonCodecCustomizer'
[22:02:29.526] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'jacksonCodecCustomizer' via factory method to bean named 'jacksonObjectMapper'
[22:02:29.528] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration'
[22:02:29.528] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration'
[22:02:29.529] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'taskSchedulerBuilder'
[22:02:29.530] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'spring.task.scheduling-org.springframework.boot.autoconfigure.task.TaskSchedulingProperties'
[22:02:29.530] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'taskSchedulerBuilder' via factory method to bean named 'spring.task.scheduling-org.springframework.boot.autoconfigure.task.TaskSchedulingProperties'
[22:02:29.533] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration'
[22:02:29.533] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration$$EnhancerBySpringCGLIB$$8b662c05] - unable to determine constructor/method parameter names
[22:02:29.534] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'restTemplateBuilder'
[22:02:29.538] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration'
[22:02:29.538] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'multipartResolver'
[22:02:29.540] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.autoconfigure.RestartEndpointWithoutIntegrationConfiguration'
[22:02:29.540] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.autoconfigure.PauseResumeEndpointsConfiguration'
[22:02:29.541] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration$EurekaClientConfigurationRefresher'
[22:02:29.542] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'eurekaAutoServiceRegistration'
[22:02:29.543] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'eurekaAutoServiceRegistration' via factory method to bean named 'org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@551aa95a'
[22:02:29.544] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'eurekaAutoServiceRegistration' via factory method to bean named 'eurekaServiceRegistry'
[22:02:29.544] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'eurekaAutoServiceRegistration' via factory method to bean named 'eurekaRegistration'
[22:02:29.544] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration'
[22:02:29.545] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'eurekaDiscoverClientMarker'
[22:02:29.546] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationConfiguration'
[22:02:29.547] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'spring.cloud.service-registry.auto-registration-org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationProperties'
[22:02:29.547] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationAutoConfiguration'
[22:02:29.549] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration'
[22:02:29.550] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'discoveryClientOptionalArgs'
[22:02:29.550] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.netflix.eureka.config.DiscoveryClientOptionalArgsConfiguration'
[22:02:29.555] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'discoveryClient'
[22:02:29.556] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'discoveryClient' via factory method to bean named 'eurekaClient'
[22:02:29.556] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'discoveryClient' via factory method to bean named 'eurekaClientConfigBean'
[22:02:29.557] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.client.CommonsClientAutoConfiguration'
[22:02:29.557] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.client.discovery.composite.CompositeDiscoveryClientAutoConfiguration'
[22:02:29.557] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'compositeDiscoveryClient'
[22:02:29.558] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'simpleDiscoveryClient'
[22:02:29.558] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.client.discovery.simple.SimpleDiscoveryClientAutoConfiguration'
[22:02:29.559] DEBUG [main]o.s.c.e.PropertySourcesPropertyResolver - Found key 'spring.application.name' in PropertySource 'configurationProperties' with value of type String
[22:02:29.559] DEBUG [main]o.s.c.e.PropertySourcesPropertyResolver - Found key 'spring.application.name' in PropertySource 'environmentProperties' with value of type String
[22:02:29.563] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'simpleDiscoveryProperties'
[22:02:29.566] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'compositeDiscoveryClient' via factory method to bean named 'discoveryClient'
[22:02:29.566] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'compositeDiscoveryClient' via factory method to bean named 'simpleDiscoveryClient'
[22:02:29.568] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'springClientFactory'
[22:02:29.573] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'loadBalancerClient'
[22:02:29.575] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'propertiesFactory'
[22:02:29.578] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'ribbon-org.springframework.cloud.netflix.ribbon.ServerIntrospectorProperties'
[22:02:29.578] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.client.loadbalancer.AsyncLoadBalancerAutoConfiguration$LoadBalancerInterceptorConfig'
[22:02:29.579] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'asyncLoadBalancerInterceptor'
[22:02:29.580] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'asyncLoadBalancerInterceptor' via factory method to bean named 'loadBalancerClient'
[22:02:29.583] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'asyncRestTemplateCustomizer'
[22:02:29.585] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'asyncRestTemplateCustomizer' via factory method to bean named 'asyncLoadBalancerInterceptor'
[22:02:29.586] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.client.loadbalancer.AsyncLoadBalancerAutoConfiguration$AsyncRestTemplateCustomizerConfig'
[22:02:29.591] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'loadBalancedAsyncRestTemplateInitializer'
[22:02:29.593] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'loadBalancedAsyncRestTemplateInitializer' via factory method to bean named 'asyncRestTemplateCustomizer'
[22:02:29.597] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.client.loadbalancer.AsyncLoadBalancerAutoConfiguration'
[22:02:29.597] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration$LoadBalancerInterceptorConfig'
[22:02:29.598] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'ribbonInterceptor'
[22:02:29.600] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'loadBalancerRequestFactory'
[22:02:29.600] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration'
[22:02:29.604] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'loadBalancerRequestFactory' via factory method to bean named 'loadBalancerClient'
[22:02:29.608] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'ribbonInterceptor' via factory method to bean named 'loadBalancerClient'
[22:02:29.608] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'ribbonInterceptor' via factory method to bean named 'loadBalancerRequestFactory'
[22:02:29.611] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'restTemplateCustomizer'
[22:02:29.612] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'restTemplateCustomizer' via factory method to bean named 'ribbonInterceptor'
[22:02:29.613] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'loadBalancedRestTemplateInitializerDeprecated'
[22:02:29.614] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'spring.cloud.loadbalancer.retry-org.springframework.cloud.client.loadbalancer.LoadBalancerRetryProperties'
[22:02:29.615] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.commons.httpclient.HttpClientConfiguration$ApacheHttpClientConfiguration'
[22:02:29.615] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'connManFactory'
[22:02:29.621] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'apacheHttpClientBuilder'
[22:02:29.642] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'apacheHttpClientFactory'
[22:02:29.643] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'apacheHttpClientFactory' via factory method to bean named 'apacheHttpClientBuilder'
[22:02:29.644] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.commons.httpclient.HttpClientConfiguration'
[22:02:29.645] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.configuration.CompatibilityVerifierAutoConfiguration'
[22:02:29.645] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'compositeCompatibilityVerifier'
[22:02:29.646] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'springBootVersionVerifier'
[22:02:29.647] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'spring.cloud.compatibility-verifier-org.springframework.cloud.configuration.CompatibilityVerifierProperties'
[22:02:29.648] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'springBootVersionVerifier' via factory method to bean named 'spring.cloud.compatibility-verifier-org.springframework.cloud.configuration.CompatibilityVerifierProperties'
[22:02:29.654] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'compositeCompatibilityVerifier' via factory method to bean named 'springBootVersionVerifier'
[22:02:29.654] DEBUG [main]o.s.c.c.SpringBootVersionVerifier - Version found in Boot manifest [2.1.5.RELEASE]
[22:02:29.655] DEBUG [main]o.s.c.c.SpringBootVersionVerifier - Predicate [Predicate for Boot 2.1] was matched
[22:02:29.655] DEBUG [main]o.s.c.c.CompositeCompatibilityVerifier - All conditions are passing
[22:02:29.655] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.netflix.eureka.server.EurekaServerInitializerConfiguration'
[22:02:29.657] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'eurekaServerBootstrap'
[22:02:29.659] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'peerAwareInstanceRegistry'
[22:02:29.660] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'serverCodecs'
[22:02:29.676] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'peerAwareInstanceRegistry' via factory method to bean named 'serverCodecs'
[22:02:29.680] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'scopedTarget.eurekaClient' via factory method to bean named 'eurekaApplicationInfoManager'
[22:02:29.680] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'scopedTarget.eurekaClient' via factory method to bean named 'eurekaClientConfigBean'
[22:02:29.680] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'scopedTarget.eurekaClient' via factory method to bean named 'eurekaInstanceConfigBean'
[22:02:29.683] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'scopedTarget.eurekaApplicationInfoManager' via factory method to bean named 'eurekaInstanceConfigBean'
[22:02:29.690] INFO  [main]o.s.c.n.e.InstanceInfoFactory - Setting initial instance status as: STARTING
[22:02:29.735] INFO  [main]c.n.d.DiscoveryClient - Initializing Eureka in region us-east-1
[22:02:29.735] INFO  [main]c.n.d.DiscoveryClient - Client configured to neither register nor query for data.
[22:02:29.752] INFO  [main]c.n.d.DiscoveryClient - Discovery Client initialized at timestamp 1606658549751 with initial instances count: 0
[22:02:29.809] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'eurekaServerContext'
[22:02:29.809] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'peerEurekaNodes'
[22:02:29.810] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'peerEurekaNodes' via factory method to bean named 'peerAwareInstanceRegistry'
[22:02:29.810] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'peerEurekaNodes' via factory method to bean named 'serverCodecs'
[22:02:29.811] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'eurekaServerContext' via factory method to bean named 'serverCodecs'
[22:02:29.811] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'eurekaServerContext' via factory method to bean named 'peerAwareInstanceRegistry'
[22:02:29.811] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'eurekaServerContext' via factory method to bean named 'peerEurekaNodes'
[22:02:29.812] INFO  [main]c.n.e.DefaultEurekaServerContext - Initializing ...
[22:02:29.814] DEBUG [main]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[22:02:29.815] WARN  [main]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[22:02:29.838] INFO  [main]c.n.e.r.AbstractInstanceRegistry - Finished initializing remote region registries. All known remote regions: []
[22:02:29.839] INFO  [main]c.n.e.DefaultEurekaServerContext - Initialized
[22:02:29.839] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'eurekaServerBootstrap' via factory method to bean named 'peerAwareInstanceRegistry'
[22:02:29.839] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'eurekaServerBootstrap' via factory method to bean named 'eurekaServerContext'
[22:02:29.840] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'eurekaController'
[22:02:29.841] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'eureka.dashboard-org.springframework.cloud.netflix.eureka.server.EurekaDashboardProperties'
[22:02:29.842] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.cloud.netflix.ribbon.eureka.RibbonEurekaAutoConfiguration'
[22:02:29.842] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.endpoint.web.servlet.WebMvcEndpointManagementContextConfiguration'
[22:02:29.843] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'webEndpointServletHandlerMapping'
[22:02:29.846] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'management.endpoints.web.cors-org.springframework.boot.actuate.autoconfigure.endpoint.web.CorsEndpointProperties'
[22:02:29.848] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'webEndpointServletHandlerMapping' via factory method to bean named 'webEndpointDiscoverer'
[22:02:29.848] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'webEndpointServletHandlerMapping' via factory method to bean named 'servletEndpointDiscoverer'
[22:02:29.848] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'webEndpointServletHandlerMapping' via factory method to bean named 'controllerEndpointDiscoverer'
[22:02:29.848] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'webEndpointServletHandlerMapping' via factory method to bean named 'endpointMediaTypes'
[22:02:29.848] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'webEndpointServletHandlerMapping' via factory method to bean named 'management.endpoints.web.cors-org.springframework.boot.actuate.autoconfigure.endpoint.web.CorsEndpointProperties'
[22:02:29.848] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'webEndpointServletHandlerMapping' via factory method to bean named 'management.endpoints.web-org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties'
[22:02:29.851] INFO  [main]o.s.b.a.e.w.EndpointLinksResolver - Exposing 2 endpoint(s) beneath base path '/actuator'
[22:02:29.858] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'controllerEndpointHandlerMapping'
[22:02:29.858] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'controllerEndpointHandlerMapping' via factory method to bean named 'controllerEndpointDiscoverer'
[22:02:29.859] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'controllerEndpointHandlerMapping' via factory method to bean named 'management.endpoints.web.cors-org.springframework.boot.actuate.autoconfigure.endpoint.web.CorsEndpointProperties'
[22:02:29.859] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'controllerEndpointHandlerMapping' via factory method to bean named 'management.endpoints.web-org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties'
[22:02:29.862] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$SameManagementContextConfiguration$EnableSameManagementContextConfiguration'
[22:02:29.862] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$SameManagementContextConfiguration'
[22:02:29.863] DEBUG [main]o.s.c.LocalVariableTableParameterNameDiscoverer - Cannot find '.class' file for class [class org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$SameManagementContextConfiguration$$EnhancerBySpringCGLIB$$cac607bc] - unable to determine constructor/method parameter names
[22:02:29.864] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$SameManagementContextConfiguration' via constructor to bean named 'environment'
[22:02:29.865] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration'
[22:02:29.865] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'management.server-org.springframework.boot.actuate.autoconfigure.web.server.ManagementServerProperties'
[22:02:29.876] DEBUG [main]o.s.j.e.a.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
[22:02:29.876] DEBUG [main]o.s.j.e.a.AnnotationMBeanExporter - Autodetecting user-defined JMX MBeans
[22:02:29.886] DEBUG [main]o.s.j.e.a.AnnotationMBeanExporter - Bean with name 'refreshScope' has been autodetected for JMX exposure
[22:02:29.886] DEBUG [main]o.s.j.e.a.AnnotationMBeanExporter - Bean with name 'environmentManager' has been autodetected for JMX exposure
[22:02:29.887] DEBUG [main]o.s.j.e.a.AnnotationMBeanExporter - Bean with name 'configurationPropertiesRebinder' has been autodetected for JMX exposure
[22:02:29.890] DEBUG [main]o.s.j.e.a.AnnotationMBeanExporter - Located managed bean 'environmentManager': registering with JMX server as MBean [org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager]
[22:02:29.900] DEBUG [main]o.s.j.e.a.AnnotationMBeanExporter - Located managed bean 'refreshScope': registering with JMX server as MBean [org.springframework.cloud.context.scope.refresh:name=refreshScope,type=RefreshScope]
[22:02:29.913] DEBUG [main]o.s.j.e.a.AnnotationMBeanExporter - Located managed bean 'configurationPropertiesRebinder': registering with JMX server as MBean [org.springframework.cloud.context.properties:name=configurationPropertiesRebinder,context=551aa95a,type=ConfigurationPropertiesRebinder]
[22:02:29.925] DEBUG [main]o.s.c.s.DefaultLifecycleProcessor - Starting beans in phase 0
[22:02:29.928] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'scopedTarget.eurekaRegistration' via factory method to bean named 'eurekaClient'
[22:02:29.928] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'scopedTarget.eurekaRegistration' via factory method to bean named 'eurekaInstanceConfigBean'
[22:02:29.928] DEBUG [main]o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'scopedTarget.eurekaRegistration' via factory method to bean named 'eurekaApplicationInfoManager'
[22:02:29.929] INFO  [main]o.s.c.n.e.s.EurekaServiceRegistry - Registering application EUREKA-SERVER with eureka with status UP
[22:02:29.931] DEBUG [main]o.s.c.c.d.h.DiscoveryClientHealthIndicator - Discovery Client has been initialized
[22:02:29.931] DEBUG [main]o.s.c.s.DefaultLifecycleProcessor - Successfully started bean 'eurekaAutoServiceRegistration'
[22:02:29.932] DEBUG [main]o.s.c.s.DefaultLifecycleProcessor - Successfully started bean 'org.springframework.cloud.netflix.eureka.server.EurekaServerInitializerConfiguration'
[22:02:29.932] INFO  [Thread-11]o.s.c.n.e.s.EurekaServerBootstrap - Setting the eureka configuration..
[22:02:29.932] INFO  [Thread-11]o.s.c.n.e.s.EurekaServerBootstrap - Eureka data center value eureka.datacenter is not set, defaulting to default
[22:02:29.933] INFO  [Thread-11]o.s.c.n.e.s.EurekaServerBootstrap - Eureka environment value eureka.environment is not set, defaulting to test
[22:02:29.952] INFO  [Thread-11]o.s.c.n.e.s.EurekaServerBootstrap - isAws returned false
[22:02:29.953] INFO  [Thread-11]o.s.c.n.e.s.EurekaServerBootstrap - Initialized server context
[22:02:29.953] INFO  [Thread-11]c.n.e.r.PeerAwareInstanceRegistryImpl - Got 1 instances from neighboring DS node
[22:02:29.953] INFO  [Thread-11]c.n.e.r.PeerAwareInstanceRegistryImpl - Renew threshold is: 1
[22:02:29.953] INFO  [Thread-11]c.n.e.r.PeerAwareInstanceRegistryImpl - Changing status to UP
[22:02:29.962] INFO  [Thread-11]o.s.c.n.e.s.EurekaServerInitializerConfiguration - Started Eureka Server
[22:02:29.967] DEBUG [main]o.s.b.a.l.ConditionEvaluationReportLoggingListener - 


============================
CONDITIONS EVALUATION REPORT
============================


Positive matches:
-----------------

   AopAutoConfiguration matched:
      - @ConditionalOnClass found required classes 'org.springframework.context.annotation.EnableAspectJAutoProxy', 'org.aspectj.lang.annotation.Aspect', 'org.aspectj.lang.reflect.Advice', 'org.aspectj.weaver.AnnotatedElement' (OnClassCondition)
      - @ConditionalOnProperty (spring.aop.auto=true) matched (OnPropertyCondition)

   AopAutoConfiguration.CglibAutoProxyConfiguration matched:
      - @ConditionalOnProperty (spring.aop.proxy-target-class=true) matched (OnPropertyCondition)

   ArchaiusAutoConfiguration matched:
      - @ConditionalOnClass found required classes 'com.netflix.config.ConcurrentCompositeConfiguration', 'org.apache.commons.configuration.ConfigurationBuilder' (OnClassCondition)

   ArchaiusAutoConfiguration.ArchaiusEndpointConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.boot.actuate.health.Health' (OnClassCondition)

   ArchaiusAutoConfiguration.ArchaiusEndpointConfiguration#archaiusEndpoint matched:
      - @ConditionalOnEnabledEndpoint no property management.endpoint.archaius.enabled found so using endpoint default (OnEnabledEndpointCondition)

   ArchaiusAutoConfiguration.PropagateEventsConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.cloud.context.environment.EnvironmentChangeEvent' (OnClassCondition)
      - @ConditionalOnProperty (archaius.propagate.environmentChangedEvent) matched (OnPropertyCondition)

   AsyncLoadBalancerAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.web.client.AsyncRestTemplate' (OnClassCondition)
      - @ConditionalOnBean (types: org.springframework.cloud.client.loadbalancer.LoadBalancerClient; SearchStrategy: all) found bean 'loadBalancerClient' (OnBeanCondition)

   AuditAutoConfiguration#auditListener matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.audit.listener.AbstractAuditListener; SearchStrategy: all) did not find any beans (OnBeanCondition)

   AuditAutoConfiguration.AuditEventRepositoryConfiguration matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.audit.AuditEventRepository; SearchStrategy: all) did not find any beans (OnBeanCondition)

   AuditEventsEndpointAutoConfiguration matched:
      - @ConditionalOnEnabledEndpoint no property management.endpoint.auditevents.enabled found so using endpoint default (OnEnabledEndpointCondition)

   AuditEventsEndpointAutoConfiguration#auditEventsEndpoint matched:
      - @ConditionalOnBean (types: org.springframework.boot.actuate.audit.AuditEventRepository; SearchStrategy: all) found bean 'auditEventRepository'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.audit.AuditEventsEndpoint; SearchStrategy: all) did not find any beans (OnBeanCondition)

   AutoServiceRegistrationAutoConfiguration matched:
      - @ConditionalOnProperty (spring.cloud.service-registry.auto-registration.enabled) matched (OnPropertyCondition)

   AutoServiceRegistrationConfiguration matched:
      - @ConditionalOnProperty (spring.cloud.service-registry.auto-registration.enabled) matched (OnPropertyCondition)

   BeansEndpointAutoConfiguration matched:
      - @ConditionalOnEnabledEndpoint no property management.endpoint.beans.enabled found so using endpoint default (OnEnabledEndpointCondition)

   BeansEndpointAutoConfiguration#beansEndpoint matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.beans.BeansEndpoint; SearchStrategy: all) did not find any beans (OnBeanCondition)

   CacheMeterBinderProvidersConfiguration matched:
      - @ConditionalOnClass found required class 'io.micrometer.core.instrument.binder.MeterBinder' (OnClassCondition)

   CachesEndpointAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.cache.CacheManager' (OnClassCondition)
      - @ConditionalOnEnabledEndpoint no property management.endpoint.caches.enabled found so using endpoint default (OnEnabledEndpointCondition)

   CachesEndpointAutoConfiguration#cachesEndpoint matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.cache.CachesEndpoint; SearchStrategy: all) did not find any beans (OnBeanCondition)

   CachesEndpointAutoConfiguration#cachesEndpointWebExtension matched:
      - @ConditionalOnBean (types: org.springframework.boot.actuate.cache.CachesEndpoint; SearchStrategy: all) found bean 'cachesEndpoint'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.cache.CachesEndpointWebExtension; SearchStrategy: all) did not find any beans (OnBeanCondition)

   CodecsAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.http.codec.CodecConfigurer' (OnClassCondition)

   CodecsAutoConfiguration.JacksonCodecConfiguration matched:
      - @ConditionalOnClass found required class 'com.fasterxml.jackson.databind.ObjectMapper' (OnClassCondition)

   CodecsAutoConfiguration.JacksonCodecConfiguration#jacksonCodecCustomizer matched:
      - @ConditionalOnBean (types: com.fasterxml.jackson.databind.ObjectMapper; SearchStrategy: all) found bean 'jacksonObjectMapper' (OnBeanCondition)

   CommonsClientAutoConfiguration.ActuatorConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.boot.actuate.endpoint.annotation.Endpoint' (OnClassCondition)
      - @ConditionalOnProperty (spring.cloud.features.enabled) matched (OnPropertyCondition)

   CommonsClientAutoConfiguration.ActuatorConfiguration#featuresEndpoint matched:
      - @ConditionalOnEnabledEndpoint no property management.endpoint.features.enabled found so using endpoint default (OnEnabledEndpointCondition)

   CommonsClientAutoConfiguration.DiscoveryLoadBalancerConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.boot.actuate.health.HealthIndicator' (OnClassCondition)
      - @ConditionalOnProperty (spring.cloud.discovery.enabled) matched (OnPropertyCondition)
      - @ConditionalOnBean (types: org.springframework.cloud.client.discovery.DiscoveryClient; SearchStrategy: all) found bean 'discoveryClient' (OnBeanCondition)

   CommonsClientAutoConfiguration.DiscoveryLoadBalancerConfiguration#discoveryClientHealthIndicator matched:
      - @ConditionalOnProperty (spring.cloud.discovery.client.health-indicator.enabled) matched (OnPropertyCondition)

   CommonsClientAutoConfiguration.DiscoveryLoadBalancerConfiguration#discoveryCompositeHealthIndicator matched:
      - @ConditionalOnProperty (spring.cloud.discovery.client.composite-indicator.enabled) matched (OnPropertyCondition)
      - @ConditionalOnBean (types: org.springframework.cloud.client.discovery.health.DiscoveryHealthIndicator,org.springframework.boot.actuate.health.HealthAggregator; SearchStrategy: all) found beans 'discoveryClientHealthIndicator', 'eurekaHealthIndicator', 'healthAggregator' (OnBeanCondition)

   CompatibilityVerifierAutoConfiguration matched:
      - @ConditionalOnProperty (spring.cloud.compatibility-verifier.enabled) matched (OnPropertyCondition)

   CompositeMeterRegistryAutoConfiguration matched:
      - @ConditionalOnClass found required class 'io.micrometer.core.instrument.composite.CompositeMeterRegistry' (OnClassCondition)

   ConditionsReportEndpointAutoConfiguration matched:
      - @ConditionalOnEnabledEndpoint no property management.endpoint.conditions.enabled found so using endpoint default (OnEnabledEndpointCondition)

   ConditionsReportEndpointAutoConfiguration#conditionsReportEndpoint matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.autoconfigure.condition.ConditionsReportEndpoint; SearchStrategy: current) did not find any beans (OnBeanCondition)

   ConfigurationPropertiesRebinderAutoConfiguration matched:
      - @ConditionalOnBean (types: org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor; SearchStrategy: all) found bean 'org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor' (OnBeanCondition)

   ConfigurationPropertiesRebinderAutoConfiguration#configurationPropertiesBeans matched:
      - @ConditionalOnMissingBean (types: org.springframework.cloud.context.properties.ConfigurationPropertiesBeans; SearchStrategy: current) did not find any beans (OnBeanCondition)

   ConfigurationPropertiesRebinderAutoConfiguration#configurationPropertiesRebinder matched:
      - @ConditionalOnMissingBean (types: org.springframework.cloud.context.properties.ConfigurationPropertiesRebinder; SearchStrategy: current) did not find any beans (OnBeanCondition)

   ConfigurationPropertiesReportEndpointAutoConfiguration matched:
      - @ConditionalOnEnabledEndpoint no property management.endpoint.configprops.enabled found so using endpoint default (OnEnabledEndpointCondition)

   ConfigurationPropertiesReportEndpointAutoConfiguration#configurationPropertiesReportEndpoint matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.context.properties.ConfigurationPropertiesReportEndpoint; SearchStrategy: all) did not find any beans (OnBeanCondition)

   DiscoveryClientOptionalArgsConfiguration#discoveryClientOptionalArgs matched:
      - @ConditionalOnClass found required class 'com.sun.jersey.api.client.filter.ClientFilter' (OnClassCondition)
      - @ConditionalOnMissingBean (types: com.netflix.discovery.AbstractDiscoveryClientOptionalArgs; SearchStrategy: current) did not find any beans (OnBeanCondition)

   DiskSpaceHealthIndicatorAutoConfiguration matched:
      - @ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true (OnEnabledHealthIndicatorCondition)

   DiskSpaceHealthIndicatorAutoConfiguration#diskSpaceHealthIndicator matched:
      - @ConditionalOnMissingBean (names: diskSpaceHealthIndicator; SearchStrategy: all) did not find any beans (OnBeanCondition)

   DispatcherServletAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet' (OnClassCondition)
      - found 'session' scope (OnWebApplicationCondition)

   DispatcherServletAutoConfiguration.DispatcherServletConfiguration matched:
      - @ConditionalOnClass found required class 'javax.servlet.ServletRegistration' (OnClassCondition)
      - Default DispatcherServlet did not find dispatcher servlet beans (DispatcherServletAutoConfiguration.DefaultDispatcherServletCondition)

   DispatcherServletAutoConfiguration.DispatcherServletRegistrationConfiguration matched:
      - @ConditionalOnClass found required class 'javax.servlet.ServletRegistration' (OnClassCondition)
      - DispatcherServlet Registration did not find servlet registration bean (DispatcherServletAutoConfiguration.DispatcherServletRegistrationCondition)

   DispatcherServletAutoConfiguration.DispatcherServletRegistrationConfiguration#dispatcherServletRegistration matched:
      - @ConditionalOnBean (names: dispatcherServlet; types: org.springframework.web.servlet.DispatcherServlet; SearchStrategy: all) found bean 'dispatcherServlet' (OnBeanCondition)

   EmbeddedWebServerFactoryCustomizerAutoConfiguration matched:
      - @ConditionalOnWebApplication (required) found 'session' scope (OnWebApplicationCondition)

   EmbeddedWebServerFactoryCustomizerAutoConfiguration.TomcatWebServerFactoryCustomizerConfiguration matched:
      - @ConditionalOnClass found required classes 'org.apache.catalina.startup.Tomcat', 'org.apache.coyote.UpgradeProtocol' (OnClassCondition)

   EndpointAutoConfiguration#endpointCachingOperationInvokerAdvisor matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.invoker.cache.CachingOperationInvokerAdvisor; SearchStrategy: all) did not find any beans (OnBeanCondition)

   EndpointAutoConfiguration#endpointOperationParameterMapper matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.invoke.ParameterValueMapper; SearchStrategy: all) did not find any beans (OnBeanCondition)

   EnvironmentEndpointAutoConfiguration matched:
      - @ConditionalOnEnabledEndpoint no property management.endpoint.env.enabled found so using endpoint default (OnEnabledEndpointCondition)

   ErrorMvcAutoConfiguration matched:
      - @ConditionalOnClass found required classes 'javax.servlet.Servlet', 'org.springframework.web.servlet.DispatcherServlet' (OnClassCondition)
      - found 'session' scope (OnWebApplicationCondition)

   ErrorMvcAutoConfiguration#basicErrorController matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.web.servlet.error.ErrorController; SearchStrategy: current) did not find any beans (OnBeanCondition)

   ErrorMvcAutoConfiguration#errorAttributes matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.web.servlet.error.ErrorAttributes; SearchStrategy: current) did not find any beans (OnBeanCondition)

   ErrorMvcAutoConfiguration.DefaultErrorViewResolverConfiguration#conventionErrorViewResolver matched:
      - @ConditionalOnBean (types: org.springframework.web.servlet.DispatcherServlet; SearchStrategy: all) found bean 'dispatcherServlet'; @ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.web.servlet.error.DefaultErrorViewResolver; SearchStrategy: all) did not find any beans (OnBeanCondition)

   ErrorMvcAutoConfiguration.WhitelabelErrorViewConfiguration matched:
      - @ConditionalOnProperty (server.error.whitelabel.enabled) matched (OnPropertyCondition)
      - ErrorTemplate Missing did not find error template view (ErrorMvcAutoConfiguration.ErrorTemplateMissingCondition)

   ErrorMvcAutoConfiguration.WhitelabelErrorViewConfiguration#beanNameViewResolver matched:
      - @ConditionalOnMissingBean (types: org.springframework.web.servlet.view.BeanNameViewResolver; SearchStrategy: all) did not find any beans (OnBeanCondition)

   ErrorMvcAutoConfiguration.WhitelabelErrorViewConfiguration#defaultErrorView matched:
      - @ConditionalOnMissingBean (names: error; SearchStrategy: all) did not find any beans (OnBeanCondition)

   EurekaClientAutoConfiguration matched:
      - @ConditionalOnClass found required class 'com.netflix.discovery.EurekaClientConfig' (OnClassCondition)
      - @ConditionalOnProperty (eureka.client.enabled) matched; @ConditionalOnProperty (spring.cloud.discovery.enabled) matched (OnPropertyCondition)
      - @ConditionalOnBean (types: org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration$Marker; SearchStrategy: all) found bean 'eurekaDiscoverClientMarker' (OnBeanCondition)

   EurekaClientAutoConfiguration#eurekaAutoServiceRegistration matched:
      - @ConditionalOnProperty (spring.cloud.service-registry.auto-registration.enabled) matched (OnPropertyCondition)
      - @ConditionalOnBean (types: org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationProperties; SearchStrategy: all) found bean 'spring.cloud.service-registry.auto-registration-org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationProperties' (OnBeanCondition)

   EurekaClientAutoConfiguration#eurekaClientConfigBean matched:
      - @ConditionalOnMissingBean (types: com.netflix.discovery.EurekaClientConfig; SearchStrategy: current) did not find any beans (OnBeanCondition)

   EurekaClientAutoConfiguration#eurekaInstanceConfigBean matched:
      - @ConditionalOnMissingBean (types: com.netflix.appinfo.EurekaInstanceConfig; SearchStrategy: current) did not find any beans (OnBeanCondition)

   EurekaClientAutoConfiguration#serviceManagementMetadataProvider matched:
      - @ConditionalOnMissingBean (types: org.springframework.cloud.netflix.eureka.metadata.ManagementMetadataProvider; SearchStrategy: all) did not find any beans (OnBeanCondition)

   EurekaClientAutoConfiguration.EurekaHealthIndicatorConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.boot.actuate.health.Health' (OnClassCondition)

   EurekaClientAutoConfiguration.EurekaHealthIndicatorConfiguration#eurekaHealthIndicator matched:
      - @ConditionalOnMissingBean (types: org.springframework.cloud.netflix.eureka.EurekaHealthIndicator; SearchStrategy: all) did not find any beans (OnBeanCondition)
      - @ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true (OnEnabledHealthIndicatorCondition)

   EurekaClientAutoConfiguration.RefreshableEurekaClientConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.cloud.context.scope.refresh.RefreshScope' (OnClassCondition)
      - @ConditionalOnBean (types: org.springframework.cloud.autoconfigure.RefreshAutoConfiguration; SearchStrategy: all) found bean 'org.springframework.cloud.autoconfigure.RefreshAutoConfiguration' (OnBeanCondition)

   EurekaClientAutoConfiguration.RefreshableEurekaClientConfiguration#eurekaApplicationInfoManager matched:
      - @ConditionalOnMissingBean (types: com.netflix.appinfo.ApplicationInfoManager; SearchStrategy: current) did not find any beans (OnBeanCondition)

   EurekaClientAutoConfiguration.RefreshableEurekaClientConfiguration#eurekaClient matched:
      - @ConditionalOnMissingBean (types: com.netflix.discovery.EurekaClient; SearchStrategy: current) did not find any beans (OnBeanCondition)

   EurekaClientAutoConfiguration.RefreshableEurekaClientConfiguration#eurekaRegistration matched:
      - @ConditionalOnProperty (spring.cloud.service-registry.auto-registration.enabled) matched (OnPropertyCondition)
      - @ConditionalOnBean (types: org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationProperties; SearchStrategy: all) found bean 'spring.cloud.service-registry.auto-registration-org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationProperties' (OnBeanCondition)

   EurekaDiscoveryClientConfiguration matched:
      - @ConditionalOnClass found required class 'com.netflix.discovery.EurekaClientConfig' (OnClassCondition)
      - @ConditionalOnProperty (eureka.client.enabled) matched; @ConditionalOnProperty (spring.cloud.discovery.enabled) matched (OnPropertyCondition)

   EurekaDiscoveryClientConfiguration.EurekaClientConfigurationRefresher matched:
      - @ConditionalOnClass found required class 'org.springframework.cloud.context.scope.refresh.RefreshScopeRefreshedEvent' (OnClassCondition)

   EurekaServerAutoConfiguration matched:
      - @ConditionalOnBean (types: org.springframework.cloud.netflix.eureka.server.EurekaServerMarkerConfiguration$Marker; SearchStrategy: all) found bean 'eurekaServerMarkerBean' (OnBeanCondition)

   EurekaServerAutoConfiguration#eurekaController matched:
      - @ConditionalOnProperty (eureka.dashboard.enabled) matched (OnPropertyCondition)

   EurekaServerAutoConfiguration#peerEurekaNodes matched:
      - @ConditionalOnMissingBean (types: com.netflix.eureka.cluster.PeerEurekaNodes; SearchStrategy: all) did not find any beans (OnBeanCondition)

   EurekaServerAutoConfiguration.EurekaServerConfigBeanConfiguration#eurekaServerConfig matched:
      - @ConditionalOnMissingBean (types: com.netflix.eureka.EurekaServerConfig; SearchStrategy: all) did not find any beans (OnBeanCondition)

   FreeMarkerAutoConfiguration matched:
      - @ConditionalOnClass found required classes 'freemarker.template.Configuration', 'org.springframework.ui.freemarker.FreeMarkerConfigurationFactory' (OnClassCondition)

   FreeMarkerServletWebConfiguration matched:
      - @ConditionalOnClass found required classes 'javax.servlet.Servlet', 'org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer' (OnClassCondition)
      - found 'session' scope (OnWebApplicationCondition)

   FreeMarkerServletWebConfiguration#freeMarkerConfigurer matched:
      - @ConditionalOnMissingBean (types: org.springframework.web.servlet.view.freemarker.FreeMarkerConfig; SearchStrategy: all) did not find any beans (OnBeanCondition)

   FreeMarkerServletWebConfiguration#freeMarkerViewResolver matched:
      - @ConditionalOnProperty (spring.freemarker.enabled) matched (OnPropertyCondition)
      - @ConditionalOnMissingBean (names: freeMarkerViewResolver; SearchStrategy: all) did not find any beans (OnBeanCondition)

   GenericCacheConfiguration matched:
      - Cache org.springframework.boot.autoconfigure.cache.GenericCacheConfiguration automatic cache type (CacheCondition)

   GsonAutoConfiguration matched:
      - @ConditionalOnClass found required class 'com.google.gson.Gson' (OnClassCondition)

   GsonAutoConfiguration#gson matched:
      - @ConditionalOnMissingBean (types: com.google.gson.Gson; SearchStrategy: all) did not find any beans (OnBeanCondition)

   GsonAutoConfiguration#gsonBuilder matched:
      - @ConditionalOnMissingBean (types: com.google.gson.GsonBuilder; SearchStrategy: all) did not find any beans (OnBeanCondition)

   GsonHttpMessageConvertersConfiguration matched:
      - @ConditionalOnClass found required class 'com.google.gson.Gson' (OnClassCondition)

   HealthEndpointConfiguration matched:
      - @ConditionalOnEnabledEndpoint no property management.endpoint.health.enabled found so using endpoint default (OnEnabledEndpointCondition)
      - @ConditionalOnSingleCandidate (types: org.springframework.boot.actuate.health.HealthIndicatorRegistry; SearchStrategy: all) found a primary bean from beans 'healthIndicatorRegistry' (OnBeanCondition)

   HealthEndpointConfiguration#healthEndpoint matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthEndpoint; SearchStrategy: all) did not find any beans (OnBeanCondition)

   HealthEndpointWebExtensionConfiguration#createHealthStatusHttpMapper matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthStatusHttpMapper; SearchStrategy: all) did not find any beans (OnBeanCondition)

   HealthEndpointWebExtensionConfiguration#healthWebEndpointResponseMapper matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthWebEndpointResponseMapper; SearchStrategy: all) did not find any beans (OnBeanCondition)

   HealthEndpointWebExtensionConfiguration.ServletWebHealthConfiguration matched:
      - found 'session' scope (OnWebApplicationCondition)
      - @ConditionalOnEnabledEndpoint no property management.endpoint.health.enabled found so using endpoint default (OnEnabledEndpointCondition)

   HealthEndpointWebExtensionConfiguration.ServletWebHealthConfiguration#healthEndpointWebExtension matched:
      - @ConditionalOnBean (types: org.springframework.boot.actuate.health.HealthEndpoint; SearchStrategy: all) found bean 'healthEndpoint'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthEndpointWebExtension; SearchStrategy: all) did not find any beans (OnBeanCondition)

   HealthIndicatorAutoConfiguration#healthAggregator matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthAggregator; SearchStrategy: all) did not find any beans (OnBeanCondition)

   HealthIndicatorAutoConfiguration#healthIndicatorRegistry matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthIndicatorRegistry; SearchStrategy: all) did not find any beans (OnBeanCondition)

   HeapDumpWebEndpointAutoConfiguration matched:
      - @ConditionalOnEnabledEndpoint no property management.endpoint.heapdump.enabled found so using endpoint default (OnEnabledEndpointCondition)

   HeapDumpWebEndpointAutoConfiguration#heapDumpWebEndpoint matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.management.HeapDumpWebEndpoint; SearchStrategy: all) did not find any beans (OnBeanCondition)

   HttpClientConfiguration.ApacheHttpClientConfiguration matched:
      - @ConditionalOnClass found required class 'org.apache.http.client.HttpClient' (OnClassCondition)
      - @ConditionalOnProperty (spring.cloud.httpclientfactories.apache.enabled) matched (OnPropertyCondition)

   HttpClientConfiguration.ApacheHttpClientConfiguration#apacheHttpClientBuilder matched:
      - @ConditionalOnMissingBean (types: org.apache.http.impl.client.HttpClientBuilder; SearchStrategy: all) did not find any beans (OnBeanCondition)

   HttpClientConfiguration.ApacheHttpClientConfiguration#apacheHttpClientFactory matched:
      - @ConditionalOnMissingBean (types: org.springframework.cloud.commons.httpclient.ApacheHttpClientFactory; SearchStrategy: all) did not find any beans (OnBeanCondition)

   HttpClientConfiguration.ApacheHttpClientConfiguration#connManFactory matched:
      - @ConditionalOnMissingBean (types: org.springframework.cloud.commons.httpclient.ApacheHttpClientConnectionManagerFactory; SearchStrategy: all) did not find any beans (OnBeanCondition)

   HttpClientMetricsAutoConfiguration matched:
      - @ConditionalOnClass found required class 'io.micrometer.core.instrument.MeterRegistry' (OnClassCondition)
      - @ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry' (OnBeanCondition)

   HttpEncodingAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.web.filter.CharacterEncodingFilter' (OnClassCondition)
      - found 'session' scope (OnWebApplicationCondition)
      - @ConditionalOnProperty (spring.http.encoding.enabled) matched (OnPropertyCondition)

   HttpEncodingAutoConfiguration#characterEncodingFilter matched:
      - @ConditionalOnMissingBean (types: org.springframework.web.filter.CharacterEncodingFilter; SearchStrategy: all) did not find any beans (OnBeanCondition)

   HttpMessageConvertersAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.http.converter.HttpMessageConverter' (OnClassCondition)

   HttpMessageConvertersAutoConfiguration#messageConverters matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.http.HttpMessageConverters; SearchStrategy: all) did not find any beans (OnBeanCondition)

   HttpMessageConvertersAutoConfiguration.StringHttpMessageConverterConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.http.converter.StringHttpMessageConverter' (OnClassCondition)

   HttpMessageConvertersAutoConfiguration.StringHttpMessageConverterConfiguration#stringHttpMessageConverter matched:
      - @ConditionalOnMissingBean (types: org.springframework.http.converter.StringHttpMessageConverter; SearchStrategy: all) did not find any beans (OnBeanCondition)

   HttpTraceAutoConfiguration matched:
      - @ConditionalOnWebApplication (required) found 'session' scope (OnWebApplicationCondition)
      - @ConditionalOnProperty (management.trace.http.enabled) matched (OnPropertyCondition)

   HttpTraceAutoConfiguration#httpExchangeTracer matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.trace.http.HttpExchangeTracer; SearchStrategy: all) did not find any beans (OnBeanCondition)

   HttpTraceAutoConfiguration#traceRepository matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.trace.http.HttpTraceRepository; SearchStrategy: all) did not find any beans (OnBeanCondition)

   HttpTraceAutoConfiguration.ServletTraceFilterConfiguration matched:
      - found 'session' scope (OnWebApplicationCondition)

   HttpTraceAutoConfiguration.ServletTraceFilterConfiguration#httpTraceFilter matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter; SearchStrategy: all) did not find any beans (OnBeanCondition)

   HttpTraceEndpointAutoConfiguration matched:
      - @ConditionalOnEnabledEndpoint no property management.endpoint.httptrace.enabled found so using endpoint default (OnEnabledEndpointCondition)

   HttpTraceEndpointAutoConfiguration#httpTraceEndpoint matched:
      - @ConditionalOnBean (types: org.springframework.boot.actuate.trace.http.HttpTraceRepository; SearchStrategy: all) found bean 'traceRepository'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.trace.http.HttpTraceEndpoint; SearchStrategy: all) did not find any beans (OnBeanCondition)

   HystrixAutoConfiguration matched:
      - @ConditionalOnClass found required classes 'com.netflix.hystrix.Hystrix', 'org.springframework.boot.actuate.health.HealthIndicator', 'org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration' (OnClassCondition)

   HystrixAutoConfiguration#hystrixHealthIndicator matched:
      - @ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true (OnEnabledHealthIndicatorCondition)

   HystrixAutoConfiguration.HystrixMetricsConfiguration matched:
      - @ConditionalOnClass found required class 'io.micrometer.core.instrument.binder.hystrix.HystrixMetricsBinder' (OnClassCondition)
      - @ConditionalOnProperty (management.metrics.binders.hystrix.enabled) matched (OnPropertyCondition)

   InfoContributorAutoConfiguration#envInfoContributor matched:
      - @ConditionalOnEnabledInfoContributor management.info.defaults.enabled is considered true (OnEnabledInfoContributorCondition)

   InfoEndpointAutoConfiguration matched:
      - @ConditionalOnEnabledEndpoint no property management.endpoint.info.enabled found so using endpoint default (OnEnabledEndpointCondition)

   InfoEndpointAutoConfiguration#infoEndpoint matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.info.InfoEndpoint; SearchStrategy: all) did not find any beans (OnBeanCondition)

   JacksonAutoConfiguration matched:
      - @ConditionalOnClass found required class 'com.fasterxml.jackson.databind.ObjectMapper' (OnClassCondition)

   JacksonAutoConfiguration.Jackson2ObjectMapperBuilderCustomizerConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.http.converter.json.Jackson2ObjectMapperBuilder' (OnClassCondition)

   JacksonAutoConfiguration.JacksonObjectMapperBuilderConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.http.converter.json.Jackson2ObjectMapperBuilder' (OnClassCondition)

   JacksonAutoConfiguration.JacksonObjectMapperBuilderConfiguration#jacksonObjectMapperBuilder matched:
      - @ConditionalOnMissingBean (types: org.springframework.http.converter.json.Jackson2ObjectMapperBuilder; SearchStrategy: all) did not find any beans (OnBeanCondition)

   JacksonAutoConfiguration.JacksonObjectMapperConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.http.converter.json.Jackson2ObjectMapperBuilder' (OnClassCondition)

   JacksonAutoConfiguration.JacksonObjectMapperConfiguration#jacksonObjectMapper matched:
      - @ConditionalOnMissingBean (types: com.fasterxml.jackson.databind.ObjectMapper; SearchStrategy: all) did not find any beans (OnBeanCondition)

   JacksonAutoConfiguration.ParameterNamesModuleConfiguration matched:
      - @ConditionalOnClass found required class 'com.fasterxml.jackson.module.paramnames.ParameterNamesModule' (OnClassCondition)

   JacksonAutoConfiguration.ParameterNamesModuleConfiguration#parameterNamesModule matched:
      - @ConditionalOnMissingBean (types: com.fasterxml.jackson.module.paramnames.ParameterNamesModule; SearchStrategy: all) did not find any beans (OnBeanCondition)

   JacksonHttpMessageConvertersConfiguration.MappingJackson2HttpMessageConverterConfiguration matched:
      - @ConditionalOnClass found required class 'com.fasterxml.jackson.databind.ObjectMapper' (OnClassCondition)
      - @ConditionalOnProperty (spring.http.converters.preferred-json-mapper=jackson) matched (OnPropertyCondition)
      - @ConditionalOnBean (types: com.fasterxml.jackson.databind.ObjectMapper; SearchStrategy: all) found bean 'jacksonObjectMapper' (OnBeanCondition)

   JacksonHttpMessageConvertersConfiguration.MappingJackson2HttpMessageConverterConfiguration#mappingJackson2HttpMessageConverter matched:
      - @ConditionalOnMissingBean (types: org.springframework.http.converter.json.MappingJackson2HttpMessageConverter; SearchStrategy: all) did not find any beans (OnBeanCondition)

   JacksonHttpMessageConvertersConfiguration.MappingJackson2XmlHttpMessageConverterConfiguration matched:
      - @ConditionalOnClass found required class 'com.fasterxml.jackson.dataformat.xml.XmlMapper' (OnClassCondition)
      - @ConditionalOnBean (types: org.springframework.http.converter.json.Jackson2ObjectMapperBuilder; SearchStrategy: all) found bean 'jacksonObjectMapperBuilder' (OnBeanCondition)

   JacksonHttpMessageConvertersConfiguration.MappingJackson2XmlHttpMessageConverterConfiguration#mappingJackson2XmlHttpMessageConverter matched:
      - @ConditionalOnMissingBean (types: org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter; SearchStrategy: all) did not find any beans (OnBeanCondition)

   JmxAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.jmx.export.MBeanExporter' (OnClassCondition)
      - @ConditionalOnProperty (spring.jmx.enabled=true) matched (OnPropertyCondition)

   JmxAutoConfiguration#mbeanExporter matched:
      - @ConditionalOnMissingBean (types: org.springframework.jmx.export.MBeanExporter; SearchStrategy: current) did not find any beans (OnBeanCondition)

   JmxAutoConfiguration#mbeanServer matched:
      - @ConditionalOnMissingBean (types: javax.management.MBeanServer; SearchStrategy: all) did not find any beans (OnBeanCondition)

   JmxAutoConfiguration#objectNamingStrategy matched:
      - @ConditionalOnMissingBean (types: org.springframework.jmx.export.naming.ObjectNamingStrategy; SearchStrategy: current) did not find any beans (OnBeanCondition)

   JmxEndpointAutoConfiguration#jmxAnnotationEndpointDiscoverer matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.jmx.JmxEndpointsSupplier; SearchStrategy: all) did not find any beans (OnBeanCondition)

   JmxEndpointAutoConfiguration#jmxMBeanExporter matched:
      - @ConditionalOnSingleCandidate (types: javax.management.MBeanServer; SearchStrategy: all) found a primary bean from beans 'mbeanServer' (OnBeanCondition)

   JvmMetricsAutoConfiguration matched:
      - @ConditionalOnClass found required class 'io.micrometer.core.instrument.MeterRegistry' (OnClassCondition)
      - @ConditionalOnProperty (management.metrics.binders.jvm.enabled) matched (OnPropertyCondition)
      - @ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry' (OnBeanCondition)

   JvmMetricsAutoConfiguration#classLoaderMetrics matched:
      - @ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.jvm.ClassLoaderMetrics; SearchStrategy: all) did not find any beans (OnBeanCondition)

   JvmMetricsAutoConfiguration#jvmGcMetrics matched:
      - @ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.jvm.JvmGcMetrics; SearchStrategy: all) did not find any beans (OnBeanCondition)

   JvmMetricsAutoConfiguration#jvmMemoryMetrics matched:
      - @ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics; SearchStrategy: all) did not find any beans (OnBeanCondition)

   JvmMetricsAutoConfiguration#jvmThreadMetrics matched:
      - @ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.jvm.JvmThreadMetrics; SearchStrategy: all) did not find any beans (OnBeanCondition)

   LifecycleMvcEndpointAutoConfiguration#environmentManager matched:
      - @ConditionalOnMissingBean (types: org.springframework.cloud.context.environment.EnvironmentManager; SearchStrategy: all) did not find any beans (OnBeanCondition)

   LoadBalancerAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.web.client.RestTemplate' (OnClassCondition)
      - @ConditionalOnBean (types: org.springframework.cloud.client.loadbalancer.LoadBalancerClient; SearchStrategy: all) found bean 'loadBalancerClient' (OnBeanCondition)

   LoadBalancerAutoConfiguration#loadBalancerRequestFactory matched:
      - @ConditionalOnMissingBean (types: org.springframework.cloud.client.loadbalancer.LoadBalancerRequestFactory; SearchStrategy: all) did not find any beans (OnBeanCondition)

   LoadBalancerAutoConfiguration.LoadBalancerInterceptorConfig matched:
      - @ConditionalOnMissingClass did not find unwanted class 'org.springframework.retry.support.RetryTemplate' (OnClassCondition)

   LoadBalancerAutoConfiguration.LoadBalancerInterceptorConfig#restTemplateCustomizer matched:
      - @ConditionalOnMissingBean (types: org.springframework.cloud.client.loadbalancer.RestTemplateCustomizer; SearchStrategy: all) did not find any beans (OnBeanCondition)

   LogFileWebEndpointAutoConfiguration matched:
      - @ConditionalOnEnabledEndpoint no property management.endpoint.logfile.enabled found so using endpoint default (OnEnabledEndpointCondition)

   LogbackMetricsAutoConfiguration matched:
      - @ConditionalOnClass found required classes 'io.micrometer.core.instrument.MeterRegistry', 'ch.qos.logback.classic.LoggerContext', 'org.slf4j.LoggerFactory' (OnClassCondition)
      - @ConditionalOnProperty (management.metrics.binders.logback.enabled) matched (OnPropertyCondition)
      - LogbackLoggingCondition ILoggerFactory is a Logback LoggerContext (LogbackMetricsAutoConfiguration.LogbackLoggingCondition)
      - @ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry' (OnBeanCondition)

   LogbackMetricsAutoConfiguration#logbackMetrics matched:
      - @ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.logging.LogbackMetrics; SearchStrategy: all) did not find any beans (OnBeanCondition)

   LoggersEndpointAutoConfiguration matched:
      - @ConditionalOnEnabledEndpoint no property management.endpoint.loggers.enabled found so using endpoint default (OnEnabledEndpointCondition)

   LoggersEndpointAutoConfiguration#loggersEndpoint matched:
      - Logging System enabled (LoggersEndpointAutoConfiguration.OnEnabledLoggingSystemCondition)
      - @ConditionalOnBean (types: org.springframework.boot.logging.LoggingSystem; SearchStrategy: all) found bean 'springBootLoggingSystem'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.logging.LoggersEndpoint; SearchStrategy: all) did not find any beans (OnBeanCondition)

   ManagementContextAutoConfiguration.SameManagementContextConfiguration matched:
      - Management Port actual port type (SAME) matched required type (OnManagementPortCondition)

   MappingsEndpointAutoConfiguration#mappingsEndpoint matched:
      - @ConditionalOnEnabledEndpoint no property management.endpoint.mappings.enabled found so using endpoint default (OnEnabledEndpointCondition)

   MappingsEndpointAutoConfiguration.ServletWebConfiguration matched:
      - found 'session' scope (OnWebApplicationCondition)

   MappingsEndpointAutoConfiguration.ServletWebConfiguration.SpringMvcConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet' (OnClassCondition)
      - @ConditionalOnBean (types: org.springframework.web.servlet.DispatcherServlet; SearchStrategy: all) found bean 'dispatcherServlet' (OnBeanCondition)

   MetricsAutoConfiguration matched:
      - @ConditionalOnClass found required class 'io.micrometer.core.annotation.Timed' (OnClassCondition)

   MetricsAutoConfiguration#micrometerClock matched:
      - @ConditionalOnMissingBean (types: io.micrometer.core.instrument.Clock; SearchStrategy: all) did not find any beans (OnBeanCondition)

   MetricsEndpointAutoConfiguration matched:
      - @ConditionalOnClass found required class 'io.micrometer.core.annotation.Timed' (OnClassCondition)
      - @ConditionalOnEnabledEndpoint no property management.endpoint.metrics.enabled found so using endpoint default (OnEnabledEndpointCondition)

   MetricsEndpointAutoConfiguration#metricsEndpoint matched:
      - @ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.metrics.MetricsEndpoint; SearchStrategy: all) did not find any beans (OnBeanCondition)

   MultipartAutoConfiguration matched:
      - @ConditionalOnClass found required classes 'javax.servlet.Servlet', 'org.springframework.web.multipart.support.StandardServletMultipartResolver', 'javax.servlet.MultipartConfigElement' (OnClassCondition)
      - found 'session' scope (OnWebApplicationCondition)
      - @ConditionalOnProperty (spring.servlet.multipart.enabled) matched (OnPropertyCondition)

   MultipartAutoConfiguration#multipartConfigElement matched:
      - @ConditionalOnMissingBean (types: javax.servlet.MultipartConfigElement,org.springframework.web.multipart.commons.CommonsMultipartResolver; SearchStrategy: all) did not find any beans (OnBeanCondition)

   MultipartAutoConfiguration#multipartResolver matched:
      - @ConditionalOnMissingBean (types: org.springframework.web.multipart.MultipartResolver; SearchStrategy: all) did not find any beans (OnBeanCondition)

   NoOpCacheConfiguration matched:
      - Cache org.springframework.boot.autoconfigure.cache.NoOpCacheConfiguration automatic cache type (CacheCondition)

   PropertyPlaceholderAutoConfiguration#propertySourcesPlaceholderConfigurer matched:
      - @ConditionalOnMissingBean (types: org.springframework.context.support.PropertySourcesPlaceholderConfigurer; SearchStrategy: current) did not find any beans (OnBeanCondition)

   RefreshAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.cloud.context.scope.refresh.RefreshScope' (OnClassCondition)
      - @ConditionalOnProperty (spring.cloud.refresh.enabled) matched (OnPropertyCondition)

   RefreshAutoConfiguration#contextRefresher matched:
      - @ConditionalOnMissingBean (types: org.springframework.cloud.context.refresh.ContextRefresher; SearchStrategy: all) did not find any beans (OnBeanCondition)

   RefreshAutoConfiguration#loggingRebinder matched:
      - @ConditionalOnMissingBean (types: org.springframework.cloud.logging.LoggingRebinder; SearchStrategy: all) did not find any beans (OnBeanCondition)

   RefreshAutoConfiguration#refreshScope matched:
      - @ConditionalOnMissingBean (types: org.springframework.cloud.context.scope.refresh.RefreshScope; SearchStrategy: all) did not find any beans (OnBeanCondition)

   RefreshEndpointAutoConfiguration matched:
      - @ConditionalOnClass found required classes 'org.springframework.boot.actuate.autoconfigure.endpoint.EndpointAutoConfiguration', 'org.springframework.boot.actuate.health.Health' (OnClassCondition)

   RefreshEndpointAutoConfiguration#refreshScopeHealthIndicator matched:
      - @ConditionalOnMissingBean (types: org.springframework.cloud.health.RefreshScopeHealthIndicator; SearchStrategy: all) did not find any beans (OnBeanCondition)
      - @ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true (OnEnabledHealthIndicatorCondition)

   RefreshEndpointAutoConfiguration.RefreshEndpointConfiguration matched:
      - @ConditionalOnBean (types: org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration; SearchStrategy: all) found bean 'org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration' (OnBeanCondition)

   RefreshEndpointAutoConfiguration.RefreshEndpointConfiguration#refreshEndpoint matched:
      - @ConditionalOnBean (types: org.springframework.cloud.context.refresh.ContextRefresher; SearchStrategy: all) found bean 'contextRefresher'; @ConditionalOnMissingBean (types: org.springframework.cloud.endpoint.RefreshEndpoint; SearchStrategy: all) did not find any beans (OnBeanCondition)
      - @ConditionalOnEnabledEndpoint no property management.endpoint.refresh.enabled found so using endpoint default (OnEnabledEndpointCondition)

   RestTemplateAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.web.client.RestTemplate' (OnClassCondition)

   RestTemplateAutoConfiguration#restTemplateBuilder matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.web.client.RestTemplateBuilder; SearchStrategy: all) did not find any beans (OnBeanCondition)

   RestTemplateMetricsConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.web.client.RestTemplate' (OnClassCondition)

   RestTemplateMetricsConfiguration#restTemplateTagConfigurer matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.metrics.web.client.RestTemplateExchangeTagsProvider; SearchStrategy: all) did not find any beans (OnBeanCondition)

   RestartEndpointWithoutIntegrationConfiguration matched:
      - @ConditionalOnMissingClass did not find unwanted class 'org.springframework.integration.monitor.IntegrationMBeanExporter' (OnClassCondition)

   RibbonAutoConfiguration matched:
      - AllNestedConditions 4 matched 0 did not; NestedCondition on RibbonAutoConfiguration.RibbonClassesConditions.RibbonPresent @ConditionalOnClass found required class 'com.netflix.ribbon.Ribbon'; NestedCondition on RibbonAutoConfiguration.RibbonClassesConditions.AsyncRestTemplatePresent @ConditionalOnClass found required class 'org.springframework.web.client.AsyncRestTemplate'; NestedCondition on RibbonAutoConfiguration.RibbonClassesConditions.RestTemplatePresent @ConditionalOnClass found required class 'org.springframework.web.client.RestTemplate'; NestedCondition on RibbonAutoConfiguration.RibbonClassesConditions.IClientPresent @ConditionalOnClass found required class 'com.netflix.client.IClient' (RibbonAutoConfiguration.RibbonClassesConditions)

   RibbonAutoConfiguration#loadBalancerClient matched:
      - @ConditionalOnMissingBean (types: org.springframework.cloud.client.loadbalancer.LoadBalancerClient; SearchStrategy: all) did not find any beans (OnBeanCondition)

   RibbonAutoConfiguration#propertiesFactory matched:
      - @ConditionalOnMissingBean (types: org.springframework.cloud.netflix.ribbon.PropertiesFactory; SearchStrategy: all) did not find any beans (OnBeanCondition)

   RibbonEurekaAutoConfiguration matched:
      - AllNestedConditions 3 matched 0 did not; NestedCondition on ConditionalOnRibbonAndEurekaEnabled.OnRibbonAndEurekaEnabledCondition.OnEurekaClientEnabled found matching nested conditions @ConditionalOnProperty (eureka.client.enabled) matched; @ConditionalOnProperty (spring.cloud.discovery.enabled) matched, @ConditionalOnProperty (eureka.client.enabled) matched; @ConditionalOnProperty (spring.cloud.discovery.enabled) matched; NestedCondition on ConditionalOnRibbonAndEurekaEnabled.OnRibbonAndEurekaEnabledCondition.EurekaBeans @ConditionalOnBean (types: com.netflix.discovery.EurekaClient; SearchStrategy: all) found bean 'scopedTarget.eurekaClient'; NestedCondition on ConditionalOnRibbonAndEurekaEnabled.OnRibbonAndEurekaEnabledCondition.Defaults found matching nested conditions @ConditionalOnClass found required class 'com.netflix.niws.loadbalancer.DiscoveryEnabledNIWSServerList', @ConditionalOnBean (types: org.springframework.cloud.netflix.ribbon.SpringClientFactory; SearchStrategy: all) found bean 'springClientFactory', @ConditionalOnProperty (ribbon.eureka.enabled) matched (ConditionalOnRibbonAndEurekaEnabled.OnRibbonAndEurekaEnabledCondition)

   ScheduledTasksEndpointAutoConfiguration matched:
      - @ConditionalOnEnabledEndpoint no property management.endpoint.scheduledtasks.enabled found so using endpoint default (OnEnabledEndpointCondition)

   ScheduledTasksEndpointAutoConfiguration#scheduledTasksEndpoint matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.scheduling.ScheduledTasksEndpoint; SearchStrategy: all) did not find any beans (OnBeanCondition)

   ServiceRegistryAutoConfiguration.ServiceRegistryEndpointConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.boot.actuate.endpoint.annotation.Endpoint' (OnClassCondition)
      - @ConditionalOnBean (types: org.springframework.cloud.client.serviceregistry.ServiceRegistry; SearchStrategy: all) found bean 'eurekaServiceRegistry' (OnBeanCondition)

   ServiceRegistryAutoConfiguration.ServiceRegistryEndpointConfiguration#serviceRegistryEndpoint matched:
      - @ConditionalOnEnabledEndpoint no property management.endpoint.service-registry.enabled found so using endpoint default (OnEnabledEndpointCondition)

   ServletEndpointManagementContextConfiguration matched:
      - found 'session' scope (OnWebApplicationCondition)

   ServletEndpointManagementContextConfiguration.WebMvcServletEndpointManagementContextConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet' (OnClassCondition)

   ServletManagementContextAutoConfiguration matched:
      - @ConditionalOnClass found required class 'javax.servlet.Servlet' (OnClassCondition)
      - found 'session' scope (OnWebApplicationCondition)

   ServletWebServerFactoryAutoConfiguration matched:
      - @ConditionalOnClass found required class 'javax.servlet.ServletRequest' (OnClassCondition)
      - found 'session' scope (OnWebApplicationCondition)

   ServletWebServerFactoryAutoConfiguration#tomcatServletWebServerFactoryCustomizer matched:
      - @ConditionalOnClass found required class 'org.apache.catalina.startup.Tomcat' (OnClassCondition)

   ServletWebServerFactoryConfiguration.EmbeddedTomcat matched:
      - @ConditionalOnClass found required classes 'javax.servlet.Servlet', 'org.apache.catalina.startup.Tomcat', 'org.apache.coyote.UpgradeProtocol' (OnClassCondition)
      - @ConditionalOnMissingBean (types: org.springframework.boot.web.servlet.server.ServletWebServerFactory; SearchStrategy: current) did not find any beans (OnBeanCondition)

   SimpleCacheConfiguration matched:
      - Cache org.springframework.boot.autoconfigure.cache.SimpleCacheConfiguration automatic cache type (CacheCondition)

   SimpleMetricsExportAutoConfiguration matched:
      - @ConditionalOnProperty (management.metrics.export.simple.enabled=true) matched (OnPropertyCondition)
      - @ConditionalOnBean (types: io.micrometer.core.instrument.Clock; SearchStrategy: all) found bean 'micrometerClock'; @ConditionalOnMissingBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SimpleMetricsExportAutoConfiguration#simpleConfig matched:
      - @ConditionalOnMissingBean (types: io.micrometer.core.instrument.simple.SimpleConfig; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SystemMetricsAutoConfiguration matched:
      - @ConditionalOnClass found required class 'io.micrometer.core.instrument.MeterRegistry' (OnClassCondition)
      - @ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry' (OnBeanCondition)

   SystemMetricsAutoConfiguration#fileDescriptorMetrics matched:
      - @ConditionalOnProperty (management.metrics.binders.files.enabled) matched (OnPropertyCondition)
      - @ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.system.FileDescriptorMetrics; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SystemMetricsAutoConfiguration#processorMetrics matched:
      - @ConditionalOnProperty (management.metrics.binders.processor.enabled) matched (OnPropertyCondition)
      - @ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.system.ProcessorMetrics; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SystemMetricsAutoConfiguration#uptimeMetrics matched:
      - @ConditionalOnProperty (management.metrics.binders.uptime.enabled) matched (OnPropertyCondition)
      - @ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.system.UptimeMetrics; SearchStrategy: all) did not find any beans (OnBeanCondition)

   TaskExecutionAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor' (OnClassCondition)

   TaskExecutionAutoConfiguration#applicationTaskExecutor matched:
      - @ConditionalOnMissingBean (types: java.util.concurrent.Executor; SearchStrategy: all) did not find any beans (OnBeanCondition)

   TaskExecutionAutoConfiguration#taskExecutorBuilder matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.task.TaskExecutorBuilder; SearchStrategy: all) did not find any beans (OnBeanCondition)

   TaskSchedulingAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler' (OnClassCondition)

   TaskSchedulingAutoConfiguration#taskSchedulerBuilder matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.task.TaskSchedulerBuilder; SearchStrategy: all) did not find any beans (OnBeanCondition)

   ThreadDumpEndpointAutoConfiguration matched:
      - @ConditionalOnEnabledEndpoint no property management.endpoint.threaddump.enabled found so using endpoint default (OnEnabledEndpointCondition)

   ThreadDumpEndpointAutoConfiguration#dumpEndpoint matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.management.ThreadDumpEndpoint; SearchStrategy: all) did not find any beans (OnBeanCondition)

   TomcatMetricsAutoConfiguration matched:
      - @ConditionalOnClass found required classes 'io.micrometer.core.instrument.binder.tomcat.TomcatMetrics', 'org.apache.catalina.Manager' (OnClassCondition)
      - @ConditionalOnWebApplication (required) found 'session' scope (OnWebApplicationCondition)

   TomcatMetricsAutoConfiguration#tomcatMetricsBinder matched:
      - @ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry'; @ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.tomcat.TomcatMetrics,org.springframework.boot.actuate.metrics.web.tomcat.TomcatMetricsBinder; SearchStrategy: all) did not find any beans (OnBeanCondition)

   UtilAutoConfiguration matched:
      - @ConditionalOnProperty (spring.cloud.util.enabled) matched (OnPropertyCondition)

   UtilAutoConfiguration#inetUtils matched:
      - @ConditionalOnMissingBean (types: org.springframework.cloud.commons.util.InetUtils; SearchStrategy: all) did not find any beans (OnBeanCondition)

   ValidationAutoConfiguration matched:
      - @ConditionalOnClass found required class 'javax.validation.executable.ExecutableValidator' (OnClassCondition)
      - @ConditionalOnResource found location classpath:META-INF/services/javax.validation.spi.ValidationProvider (OnResourceCondition)

   ValidationAutoConfiguration#defaultValidator matched:
      - @ConditionalOnMissingBean (types: javax.validation.Validator; SearchStrategy: all) did not find any beans (OnBeanCondition)

   ValidationAutoConfiguration#methodValidationPostProcessor matched:
      - @ConditionalOnMissingBean (types: org.springframework.validation.beanvalidation.MethodValidationPostProcessor; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WebEndpointAutoConfiguration matched:
      - @ConditionalOnWebApplication (required) found 'session' scope (OnWebApplicationCondition)

   WebEndpointAutoConfiguration#controllerEndpointDiscoverer matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointsSupplier; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WebEndpointAutoConfiguration#endpointMediaTypes matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WebEndpointAutoConfiguration#pathMappedEndpoints matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.PathMappedEndpoints; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WebEndpointAutoConfiguration#webEndpointDiscoverer matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.WebEndpointsSupplier; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WebEndpointAutoConfiguration.WebEndpointServletConfiguration matched:
      - found 'session' scope (OnWebApplicationCondition)

   WebEndpointAutoConfiguration.WebEndpointServletConfiguration#servletEndpointDiscoverer matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.annotation.ServletEndpointsSupplier; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WebMvcAutoConfiguration matched:
      - @ConditionalOnClass found required classes 'javax.servlet.Servlet', 'org.springframework.web.servlet.DispatcherServlet', 'org.springframework.web.servlet.config.annotation.WebMvcConfigurer' (OnClassCondition)
      - found 'session' scope (OnWebApplicationCondition)
      - @ConditionalOnMissingBean (types: org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WebMvcAutoConfiguration#formContentFilter matched:
      - @ConditionalOnProperty (spring.mvc.formcontent.filter.enabled) matched (OnPropertyCondition)
      - @ConditionalOnMissingBean (types: org.springframework.web.filter.FormContentFilter; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WebMvcAutoConfiguration#hiddenHttpMethodFilter matched:
      - @ConditionalOnProperty (spring.mvc.hiddenmethod.filter.enabled) matched (OnPropertyCondition)
      - @ConditionalOnMissingBean (types: org.springframework.web.filter.HiddenHttpMethodFilter; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#defaultViewResolver matched:
      - @ConditionalOnMissingBean (types: org.springframework.web.servlet.view.InternalResourceViewResolver; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#requestContextFilter matched:
      - @ConditionalOnMissingBean (types: org.springframework.web.context.request.RequestContextListener,org.springframework.web.filter.RequestContextFilter; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#viewResolver matched:
      - @ConditionalOnBean (types: org.springframework.web.servlet.ViewResolver; SearchStrategy: all) found beans 'defaultViewResolver', 'beanNameViewResolver', 'mvcViewResolver'; @ConditionalOnMissingBean (names: viewResolver; types: org.springframework.web.servlet.view.ContentNegotiatingViewResolver; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter.FaviconConfiguration matched:
      - @ConditionalOnProperty (spring.mvc.favicon.enabled) matched (OnPropertyCondition)

   WebMvcEndpointManagementContextConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet' (OnClassCondition)
      - found 'session' scope (OnWebApplicationCondition)
      - @ConditionalOnBean (types: org.springframework.web.servlet.DispatcherServlet,org.springframework.boot.actuate.endpoint.web.WebEndpointsSupplier; SearchStrategy: all) found beans 'webEndpointDiscoverer', 'dispatcherServlet' (OnBeanCondition)

   WebMvcEndpointManagementContextConfiguration#controllerEndpointHandlerMapping matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.servlet.ControllerEndpointHandlerMapping; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WebMvcEndpointManagementContextConfiguration#webEndpointServletHandlerMapping matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.servlet.WebMvcEndpointHandlerMapping; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WebMvcMetricsAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet' (OnClassCondition)
      - found 'session' scope (OnWebApplicationCondition)
      - @ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry' (OnBeanCondition)

   WebMvcMetricsAutoConfiguration#webMvcTagsProvider matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WebSocketServletAutoConfiguration matched:
      - @ConditionalOnClass found required classes 'javax.servlet.Servlet', 'javax.websocket.server.ServerContainer' (OnClassCondition)
      - found 'session' scope (OnWebApplicationCondition)

   WebSocketServletAutoConfiguration.TomcatWebSocketConfiguration matched:
      - @ConditionalOnClass found required classes 'org.apache.catalina.startup.Tomcat', 'org.apache.tomcat.websocket.server.WsSci' (OnClassCondition)

   WebSocketServletAutoConfiguration.TomcatWebSocketConfiguration#websocketServletWebServerCustomizer matched:
      - @ConditionalOnMissingBean (names: websocketServletWebServerCustomizer; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WritableEnvironmentEndpointAutoConfiguration matched:
      - @ConditionalOnClass found required classes 'org.springframework.boot.actuate.env.EnvironmentEndpoint', 'org.springframework.boot.actuate.autoconfigure.env.EnvironmentEndpointProperties' (OnClassCondition)
      - @ConditionalOnProperty (management.endpoint.env.post.enabled) matched (OnPropertyCondition)
      - @ConditionalOnBean (types: org.springframework.cloud.context.environment.EnvironmentManager; SearchStrategy: all) found bean 'environmentManager' (OnBeanCondition)

   WritableEnvironmentEndpointAutoConfiguration#environmentEndpoint matched:
      - @ConditionalOnMissingBean (types: org.springframework.cloud.context.environment.WritableEnvironmentEndpoint; SearchStrategy: all) did not find any beans (OnBeanCondition)
      - @ConditionalOnEnabledEndpoint no property management.endpoint.env.enabled found so using endpoint default (OnEnabledEndpointCondition)

   WritableEnvironmentEndpointAutoConfiguration#environmentEndpointWebExtension matched:
      - @ConditionalOnEnabledEndpoint no property management.endpoint.env.enabled found so using endpoint default (OnEnabledEndpointCondition)


Negative matches:
-----------------

   ActiveMQAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.jms.ConnectionFactory' (OnClassCondition)

   AopAutoConfiguration.JdkDynamicAutoProxyConfiguration:
      Did not match:
         - @ConditionalOnProperty (spring.aop.proxy-target-class=false) did not find property 'proxy-target-class' (OnPropertyCondition)

   AppOpticsMetricsExportAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.micrometer.appoptics.AppOpticsMeterRegistry' (OnClassCondition)

   ArtemisAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.jms.ConnectionFactory' (OnClassCondition)

   AtlasMetricsExportAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.micrometer.atlas.AtlasMeterRegistry' (OnClassCondition)

   AuditAutoConfiguration#authenticationAuditListener:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.authentication.event.AbstractAuthenticationEvent' (OnClassCondition)

   AuditAutoConfiguration#authorizationAuditListener:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.access.event.AbstractAuthorizationEvent' (OnClassCondition)

   BatchAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.batch.core.launch.JobLauncher' (OnClassCondition)

   CacheAutoConfiguration:
      Did not match:
         - @ConditionalOnBean (types: org.springframework.cache.interceptor.CacheAspectSupport; SearchStrategy: all) did not find any beans of type org.springframework.cache.interceptor.CacheAspectSupport (OnBeanCondition)
      Matched:
         - @ConditionalOnClass found required class 'org.springframework.cache.CacheManager' (OnClassCondition)

   CacheAutoConfiguration.CacheManagerJpaDependencyConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean' (OnClassCondition)
         - Ancestor org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration did not match (ConditionEvaluationReport.AncestorsMatchedCondition)

   CacheMeterBinderProvidersConfiguration.CaffeineCacheMeterBinderProviderConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.github.benmanes.caffeine.cache.Cache' (OnClassCondition)

   CacheMeterBinderProvidersConfiguration.EhCache2CacheMeterBinderProviderConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'net.sf.ehcache.Ehcache' (OnClassCondition)

   CacheMeterBinderProvidersConfiguration.HazelcastCacheMeterBinderProviderConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required classes 'com.hazelcast.spring.cache.HazelcastCache', 'com.hazelcast.core.Hazelcast' (OnClassCondition)

   CacheMeterBinderProvidersConfiguration.JCacheCacheMeterBinderProviderConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.cache.CacheManager' (OnClassCondition)

   CacheMetricsAutoConfiguration:
      Did not match:
         - @ConditionalOnBean (types: org.springframework.cache.CacheManager; SearchStrategy: all) did not find any beans of type org.springframework.cache.CacheManager (OnBeanCondition)

   CaffeineCacheConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.github.benmanes.caffeine.cache.Caffeine' (OnClassCondition)

   CassandraAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.datastax.driver.core.Cluster' (OnClassCondition)

   CassandraDataAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.datastax.driver.core.Cluster' (OnClassCondition)

   CassandraHealthIndicatorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.datastax.driver.core.Cluster' (OnClassCondition)

   CassandraReactiveDataAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.datastax.driver.core.Cluster' (OnClassCondition)

   CassandraReactiveHealthIndicatorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.datastax.driver.core.Cluster' (OnClassCondition)

   CassandraReactiveRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.cassandra.ReactiveSession' (OnClassCondition)

   CassandraRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.datastax.driver.core.Session' (OnClassCondition)

   ClientHttpConnectorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.web.reactive.function.client.WebClient' (OnClassCondition)

   CloudFoundryActuatorAutoConfiguration:
      Did not match:
         - @ConditionalOnCloudPlatform did not find CLOUD_FOUNDRY (OnCloudPlatformCondition)
      Matched:
         - @ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet' (OnClassCondition)
         - found 'session' scope (OnWebApplicationCondition)
         - @ConditionalOnProperty (management.cloudfoundry.enabled) matched (OnPropertyCondition)

   CloudHypermediaAutoConfiguration:
      Did not match:
         - @ConditionalOnBean (types: org.springframework.cloud.client.hypermedia.RemoteResource; SearchStrategy: all) did not find any beans of type org.springframework.cloud.client.hypermedia.RemoteResource (OnBeanCondition)

   CloudServiceConnectorsAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.cloud.config.java.CloudScanConfiguration' (OnClassCondition)

   CompositeMeterRegistryConfiguration:
      Did not match:
         - NoneNestedConditions 1 matched 1 did not; NestedCondition on CompositeMeterRegistryConfiguration.MultipleNonPrimaryMeterRegistriesCondition.SingleInjectableMeterRegistry @ConditionalOnSingleCandidate (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found a primary bean from beans 'simpleMeterRegistry'; NestedCondition on CompositeMeterRegistryConfiguration.MultipleNonPrimaryMeterRegistriesCondition.NoMeterRegistryCondition @ConditionalOnMissingBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found beans of type 'io.micrometer.core.instrument.MeterRegistry' simpleMeterRegistry (CompositeMeterRegistryConfiguration.MultipleNonPrimaryMeterRegistriesCondition)

   CouchbaseAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster' (OnClassCondition)

   CouchbaseCacheConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required classes 'com.couchbase.client.java.Bucket', 'com.couchbase.client.spring.cache.CouchbaseCacheManager' (OnClassCondition)

   CouchbaseDataAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.couchbase.client.java.Bucket' (OnClassCondition)

   CouchbaseHealthIndicatorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster' (OnClassCondition)

   CouchbaseReactiveDataAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.couchbase.client.java.Bucket' (OnClassCondition)

   CouchbaseReactiveHealthIndicatorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster' (OnClassCondition)

   CouchbaseReactiveRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.couchbase.client.java.Bucket' (OnClassCondition)

   CouchbaseRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.couchbase.client.java.Bucket' (OnClassCondition)

   DataSourceAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType' (OnClassCondition)

   DataSourceHealthIndicatorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.jdbc.core.JdbcTemplate' (OnClassCondition)

   DataSourcePoolMetricsAutoConfiguration:
      Did not match:
         - @ConditionalOnBean (types: javax.sql.DataSource,io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) did not find any beans of type javax.sql.DataSource (OnBeanCondition)
      Matched:
         - @ConditionalOnClass found required classes 'javax.sql.DataSource', 'io.micrometer.core.instrument.MeterRegistry' (OnClassCondition)

   DataSourcePoolMetricsAutoConfiguration.HikariDataSourceMetricsConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.zaxxer.hikari.HikariDataSource' (OnClassCondition)
         - Ancestor org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsAutoConfiguration did not match (ConditionEvaluationReport.AncestorsMatchedCondition)

   DataSourceTransactionManagerAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.jdbc.core.JdbcTemplate' (OnClassCondition)

   DatadogMetricsExportAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.micrometer.datadog.DatadogMeterRegistry' (OnClassCondition)

   DiscoveryClientOptionalArgsConfiguration#restTemplateDiscoveryClientOptionalArgs:
      Did not match:
         - @ConditionalOnMissingClass found unwanted class 'com.sun.jersey.api.client.filter.ClientFilter' (OnClassCondition)

   DispatcherServletAutoConfiguration.DispatcherServletConfiguration#multipartResolver:
      Did not match:
         - @ConditionalOnBean (types: org.springframework.web.multipart.MultipartResolver; SearchStrategy: all) did not find any beans of type org.springframework.web.multipart.MultipartResolver (OnBeanCondition)

   DynatraceMetricsExportAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.micrometer.dynatrace.DynatraceMeterRegistry' (OnClassCondition)

   EhCacheCacheConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'net.sf.ehcache.Cache' (OnClassCondition)

   ElasticMetricsExportAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.micrometer.elastic.ElasticMeterRegistry' (OnClassCondition)

   ElasticSearchClientHealthIndicatorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.elasticsearch.client.Client' (OnClassCondition)

   ElasticSearchJestHealthIndicatorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.searchbox.client.JestClient' (OnClassCondition)

   ElasticSearchRestHealthIndicatorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.elasticsearch.client.RestClient' (OnClassCondition)

   ElasticsearchAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.elasticsearch.client.Client' (OnClassCondition)

   ElasticsearchDataAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.elasticsearch.client.Client' (OnClassCondition)

   ElasticsearchRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.elasticsearch.client.Client' (OnClassCondition)

   EmbeddedLdapAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.unboundid.ldap.listener.InMemoryDirectoryServer' (OnClassCondition)

   EmbeddedMongoAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.mongodb.MongoClient' (OnClassCondition)

   EmbeddedWebServerFactoryCustomizerAutoConfiguration.JettyWebServerFactoryCustomizerConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required classes 'org.eclipse.jetty.server.Server', 'org.eclipse.jetty.util.Loader', 'org.eclipse.jetty.webapp.WebAppContext' (OnClassCondition)

   EmbeddedWebServerFactoryCustomizerAutoConfiguration.NettyWebServerFactoryCustomizerConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'reactor.netty.http.server.HttpServer' (OnClassCondition)

   EmbeddedWebServerFactoryCustomizerAutoConfiguration.UndertowWebServerFactoryCustomizerConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required classes 'io.undertow.Undertow', 'org.xnio.SslClientAuthMode' (OnClassCondition)

   EnvironmentEndpointAutoConfiguration#environmentEndpoint:
      Did not match:
         - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.env.EnvironmentEndpoint; SearchStrategy: all) found beans of type 'org.springframework.boot.actuate.env.EnvironmentEndpoint' environmentEndpoint (OnBeanCondition)

   EnvironmentEndpointAutoConfiguration#environmentEndpointWebExtension:
      Did not match:
         - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.env.EnvironmentEndpointWebExtension; SearchStrategy: all) found beans of type 'org.springframework.boot.actuate.env.EnvironmentEndpointWebExtension' environmentEndpointWebExtension (OnBeanCondition)

   ErrorWebFluxAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.web.reactive.config.WebFluxConfigurer' (OnClassCondition)

   EurekaClientAutoConfiguration.EurekaClientConfiguration:
      Did not match:
         - AnyNestedCondition 0 matched 2 did not; NestedCondition on EurekaClientAutoConfiguration.OnMissingRefreshScopeCondition.MissingScope @ConditionalOnMissingBean (types: org.springframework.cloud.autoconfigure.RefreshAutoConfiguration; SearchStrategy: all) found beans of type 'org.springframework.cloud.autoconfigure.RefreshAutoConfiguration' org.springframework.cloud.autoconfigure.RefreshAutoConfiguration; NestedCondition on EurekaClientAutoConfiguration.OnMissingRefreshScopeCondition.MissingClass @ConditionalOnMissingClass found unwanted class 'org.springframework.cloud.context.scope.refresh.RefreshScope' (EurekaClientAutoConfiguration.OnMissingRefreshScopeCondition)

   EurekaClientConfigServerAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.cloud.config.server.config.ConfigServerProperties' (OnClassCondition)

   EurekaDiscoveryClientConfigServiceAutoConfiguration:
      Did not match:
         - @ConditionalOnProperty (spring.cloud.config.discovery.enabled) did not find property 'spring.cloud.config.discovery.enabled' (OnPropertyCondition)

   EurekaDiscoveryClientConfiguration.EurekaHealthCheckHandlerConfiguration:
      Did not match:
         - @ConditionalOnProperty (eureka.client.healthcheck.enabled) did not find property 'eureka.client.healthcheck.enabled' (OnPropertyCondition)

   FlywayAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.flywaydb.core.Flyway' (OnClassCondition)

   FlywayEndpointAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.flywaydb.core.Flyway' (OnClassCondition)

   FreeMarkerNonWebConfiguration:
      Did not match:
         - @ConditionalOnWebApplication found 'session' scope and did not find reactive web application classes (OnWebApplicationCondition)

   FreeMarkerReactiveWebConfiguration:
      Did not match:
         - did not find reactive web application classes (OnWebApplicationCondition)

   FreeMarkerServletWebConfiguration#resourceUrlEncodingFilter:
      Did not match:
         - @ConditionalOnEnabledResourceChain did not find class org.webjars.WebJarAssetLocator (OnEnabledResourceChainCondition)

   GangliaMetricsExportAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.micrometer.ganglia.GangliaMeterRegistry' (OnClassCondition)

   GraphiteMetricsExportAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.micrometer.graphite.GraphiteMeterRegistry' (OnClassCondition)

   GroovyTemplateAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'groovy.text.markup.MarkupTemplateEngine' (OnClassCondition)

   GsonHttpMessageConvertersConfiguration.GsonHttpMessageConverterConfiguration:
      Did not match:
         - AnyNestedCondition 0 matched 2 did not; NestedCondition on GsonHttpMessageConvertersConfiguration.PreferGsonOrJacksonAndJsonbUnavailableCondition.JacksonJsonbUnavailable NoneNestedConditions 1 matched 1 did not; NestedCondition on GsonHttpMessageConvertersConfiguration.JacksonAndJsonbUnavailableCondition.JsonbPreferred @ConditionalOnProperty (spring.http.converters.preferred-json-mapper=jsonb) did not find property 'spring.http.converters.preferred-json-mapper'; NestedCondition on GsonHttpMessageConvertersConfiguration.JacksonAndJsonbUnavailableCondition.JacksonAvailable @ConditionalOnBean (types: org.springframework.http.converter.json.MappingJackson2HttpMessageConverter; SearchStrategy: all) found bean 'mappingJackson2HttpMessageConverter'; NestedCondition on GsonHttpMessageConvertersConfiguration.PreferGsonOrJacksonAndJsonbUnavailableCondition.GsonPreferred @ConditionalOnProperty (spring.http.converters.preferred-json-mapper=gson) did not find property 'spring.http.converters.preferred-json-mapper' (GsonHttpMessageConvertersConfiguration.PreferGsonOrJacksonAndJsonbUnavailableCondition)

   H2ConsoleAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.h2.server.web.WebServlet' (OnClassCondition)

   HazelcastAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.hazelcast.core.HazelcastInstance' (OnClassCondition)

   HazelcastCacheConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required classes 'com.hazelcast.core.HazelcastInstance', 'com.hazelcast.spring.cache.HazelcastCacheManager' (OnClassCondition)

   HazelcastJpaDependencyAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.hazelcast.core.HazelcastInstance' (OnClassCondition)

   HealthEndpointWebExtensionConfiguration.ReactiveWebHealthConfiguration:
      Did not match:
         - did not find reactive web application classes (OnWebApplicationCondition)

   HealthIndicatorAutoConfiguration#applicationHealthIndicator:
      Did not match:
         - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthIndicator,org.springframework.boot.actuate.health.ReactiveHealthIndicator; SearchStrategy: all) found beans of type 'org.springframework.boot.actuate.health.HealthIndicator' diskSpaceHealthIndicator (OnBeanCondition)

   HealthIndicatorAutoConfiguration.ReactiveHealthIndicatorConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'reactor.core.publisher.Flux' (OnClassCondition)

   HibernateJpaAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.persistence.EntityManager' (OnClassCondition)

   HibernateMetricsAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.persistence.EntityManagerFactory' (OnClassCondition)

   HttpClientConfiguration.OkHttpClientConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'okhttp3.OkHttpClient' (OnClassCondition)

   HttpHandlerAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.web.reactive.DispatcherHandler' (OnClassCondition)

   HttpTraceAutoConfiguration.ReactiveTraceFilterConfiguration:
      Did not match:
         - did not find reactive web application classes (OnWebApplicationCondition)

   HumioMetricsExportAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.micrometer.humio.HumioMeterRegistry' (OnClassCondition)

   HypermediaAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.hateoas.Resource' (OnClassCondition)

   HystrixAutoConfiguration.HystrixServletAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.netflix.hystrix.contrib.metrics.eventstream.HystrixMetricsStreamServlet' (OnClassCondition)

   HystrixAutoConfiguration.HystrixWebfluxManagementContextConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.web.reactive.DispatcherHandler' (OnClassCondition)

   HystrixSecurityAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.core.context.SecurityContext' (OnClassCondition)

   InfinispanCacheConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.infinispan.spring.provider.SpringEmbeddedCacheManager' (OnClassCondition)

   InfluxDbAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.influxdb.InfluxDB' (OnClassCondition)

   InfluxDbHealthIndicatorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.influxdb.InfluxDB' (OnClassCondition)

   InfluxMetricsExportAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.micrometer.influx.InfluxMeterRegistry' (OnClassCondition)

   InfoContributorAutoConfiguration#buildInfoContributor:
      Did not match:
         - @ConditionalOnSingleCandidate (types: org.springframework.boot.info.BuildProperties; SearchStrategy: all) did not find any beans (OnBeanCondition)
      Matched:
         - @ConditionalOnEnabledInfoContributor management.info.defaults.enabled is considered true (OnEnabledInfoContributorCondition)

   InfoContributorAutoConfiguration#gitInfoContributor:
      Did not match:
         - @ConditionalOnSingleCandidate (types: org.springframework.boot.info.GitProperties; SearchStrategy: all) did not find any beans (OnBeanCondition)
      Matched:
         - @ConditionalOnEnabledInfoContributor management.info.defaults.enabled is considered true (OnEnabledInfoContributorCondition)

   IntegrationAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.integration.config.EnableIntegration' (OnClassCondition)

   IntegrationGraphEndpointAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.integration.graph.IntegrationGraphServer' (OnClassCondition)

   JCacheCacheConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.cache.Caching' (OnClassCondition)

   JacksonAutoConfiguration.JodaDateTimeJacksonConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required classes 'com.fasterxml.jackson.datatype.joda.ser.DateTimeSerializer', 'com.fasterxml.jackson.datatype.joda.cfg.JacksonJodaDateFormat' (OnClassCondition)

   JdbcRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.jdbc.repository.config.JdbcConfiguration' (OnClassCondition)

   JdbcTemplateAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.jdbc.core.JdbcTemplate' (OnClassCondition)

   JerseyAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.glassfish.jersey.server.spring.SpringComponentProvider' (OnClassCondition)

   JerseySameManagementContextConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.glassfish.jersey.server.ResourceConfig' (OnClassCondition)

   JerseyServerMetricsAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.micrometer.jersey2.server.MetricsApplicationEventListener' (OnClassCondition)

   JerseyWebEndpointManagementContextConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.glassfish.jersey.server.ResourceConfig' (OnClassCondition)

   JestAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.searchbox.client.JestClient' (OnClassCondition)

   JettyMetricsAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.eclipse.jetty.server.Server' (OnClassCondition)

   JmsAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.jms.Message' (OnClassCondition)

   JmsHealthIndicatorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.jms.ConnectionFactory' (OnClassCondition)

   JmxMetricsExportAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.micrometer.jmx.JmxMeterRegistry' (OnClassCondition)

   JndiConnectionFactoryAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.jms.core.JmsTemplate' (OnClassCondition)

   JndiDataSourceAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType' (OnClassCondition)

   JolokiaEndpointAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.jolokia.http.AgentServlet' (OnClassCondition)

   JooqAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.jooq.DSLContext' (OnClassCondition)

   JpaRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.jpa.repository.JpaRepository' (OnClassCondition)

   JsonbAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.json.bind.Jsonb' (OnClassCondition)

   JsonbHttpMessageConvertersConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.json.bind.Jsonb' (OnClassCondition)

   JtaAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.transaction.Transaction' (OnClassCondition)

   KafkaAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.kafka.core.KafkaTemplate' (OnClassCondition)

   KafkaMetricsAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.apache.kafka.clients.consumer.KafkaConsumer' (OnClassCondition)

   KairosMetricsExportAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.micrometer.kairos.KairosMeterRegistry' (OnClassCondition)

   LdapAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.ldap.core.ContextSource' (OnClassCondition)

   LdapHealthIndicatorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.ldap.core.LdapOperations' (OnClassCondition)

   LdapRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.ldap.repository.LdapRepository' (OnClassCondition)

   LiquibaseAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'liquibase.change.DatabaseChange' (OnClassCondition)

   LiquibaseEndpointAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'liquibase.integration.spring.SpringLiquibase' (OnClassCondition)

   LoadBalancerAutoConfiguration.RetryAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.retry.support.RetryTemplate' (OnClassCondition)

   LoadBalancerAutoConfiguration.RetryInterceptorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.retry.support.RetryTemplate' (OnClassCondition)

   Log4J2MetricsAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.apache.logging.log4j.core.LoggerContext' (OnClassCondition)

   LogFileWebEndpointAutoConfiguration#logFileWebEndpoint:
      Did not match:
         - Log File did not find logging file (LogFileWebEndpointAutoConfiguration.LogFileCondition)

   MailHealthIndicatorAutoConfiguration:
      Did not match:
         - @ConditionalOnBean (types: org.springframework.mail.javamail.JavaMailSenderImpl; SearchStrategy: all) did not find any beans of type org.springframework.mail.javamail.JavaMailSenderImpl (OnBeanCondition)
      Matched:
         - @ConditionalOnClass found required class 'org.springframework.mail.javamail.JavaMailSenderImpl' (OnClassCondition)
         - @ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true (OnEnabledHealthIndicatorCondition)

   MailSenderAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.mail.internet.MimeMessage' (OnClassCondition)

   MailSenderValidatorAutoConfiguration:
      Did not match:
         - @ConditionalOnProperty (spring.mail.test-connection) did not find property 'test-connection' (OnPropertyCondition)

   ManagementContextAutoConfiguration.DifferentManagementContextConfiguration:
      Did not match:
         - Management Port actual port type (SAME) did not match required type (DIFFERENT) (OnManagementPortCondition)

   ManagementWebSecurityAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter' (OnClassCondition)

   MappingsEndpointAutoConfiguration.ReactiveWebConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.web.reactive.DispatcherHandler' (OnClassCondition)

   MessageSourceAutoConfiguration:
      Did not match:
         - ResourceBundle did not find bundle with basename messages (MessageSourceAutoConfiguration.ResourceBundleCondition)

   MongoAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.mongodb.MongoClient' (OnClassCondition)

   MongoDataAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.mongodb.client.MongoClient' (OnClassCondition)

   MongoHealthIndicatorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.mongodb.core.MongoTemplate' (OnClassCondition)

   MongoReactiveAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.mongodb.reactivestreams.client.MongoClient' (OnClassCondition)

   MongoReactiveDataAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.mongodb.reactivestreams.client.MongoClient' (OnClassCondition)

   MongoReactiveHealthIndicatorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'reactor.core.publisher.Flux' (OnClassCondition)

   MongoReactiveRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.mongodb.reactivestreams.client.MongoClient' (OnClassCondition)

   MongoRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.mongodb.MongoClient' (OnClassCondition)

   MustacheAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.samskivert.mustache.Mustache' (OnClassCondition)

   Neo4jDataAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.neo4j.ogm.session.SessionFactory' (OnClassCondition)

   Neo4jHealthIndicatorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.neo4j.ogm.session.SessionFactory' (OnClassCondition)

   Neo4jRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.neo4j.ogm.session.Neo4jSession' (OnClassCondition)

   NewRelicMetricsExportAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.micrometer.newrelic.NewRelicMeterRegistry' (OnClassCondition)

   NoOpMeterRegistryConfiguration:
      Did not match:
         - @ConditionalOnMissingBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found beans of type 'io.micrometer.core.instrument.MeterRegistry' simpleMeterRegistry (OnBeanCondition)

   NoopDiscoveryClientAutoConfiguration:
      Did not match:
         - @ConditionalOnMissingBean (types: org.springframework.cloud.client.discovery.DiscoveryClient; SearchStrategy: all) found beans of type 'org.springframework.cloud.client.discovery.DiscoveryClient' discoveryClient, compositeDiscoveryClient, simpleDiscoveryClient (OnBeanCondition)

   NoopDiscoveryClientAutoConfiguration.Boot15PortFinderConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext' (OnClassCondition)
         - Ancestor org.springframework.cloud.client.discovery.noop.NoopDiscoveryClientAutoConfiguration did not match (ConditionEvaluationReport.AncestorsMatchedCondition)

   OAuth2ClientAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.config.annotation.web.configuration.EnableWebSecurity' (OnClassCondition)

   OAuth2ResourceServerAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.oauth2.jwt.JwtDecoder' (OnClassCondition)

   PauseResumeEndpointsConfiguration#pauseEndpoint:
      Did not match:
         - @ConditionalOnBean (types: org.springframework.cloud.context.restart.RestartEndpoint; SearchStrategy: all) did not find any beans of type org.springframework.cloud.context.restart.RestartEndpoint (OnBeanCondition)

   PauseResumeEndpointsConfiguration#resumeEndpoint:
      Did not match:
         - @ConditionalOnBean (types: org.springframework.cloud.context.restart.RestartEndpoint; SearchStrategy: all) did not find any beans of type org.springframework.cloud.context.restart.RestartEndpoint (OnBeanCondition)

   PersistenceExceptionTranslationAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor' (OnClassCondition)

   ProjectInfoAutoConfiguration#buildProperties:
      Did not match:
         - @ConditionalOnResource did not find resource '${spring.info.build.location:classpath:META-INF/build-info.properties}' (OnResourceCondition)

   ProjectInfoAutoConfiguration#gitProperties:
      Did not match:
         - GitResource did not find git info at classpath:git.properties (ProjectInfoAutoConfiguration.GitResourceAvailableCondition)

   PrometheusMetricsExportAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.micrometer.prometheus.PrometheusMeterRegistry' (OnClassCondition)

   QuartzAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.quartz.Scheduler' (OnClassCondition)

   RabbitAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.rabbitmq.client.Channel' (OnClassCondition)

   RabbitHealthIndicatorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.amqp.rabbit.core.RabbitTemplate' (OnClassCondition)

   RabbitMetricsAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.rabbitmq.client.ConnectionFactory' (OnClassCondition)

   ReactiveCloudFoundryActuatorAutoConfiguration:
      Did not match:
         - @ConditionalOnWebApplication did not find reactive web application classes (OnWebApplicationCondition)

   ReactiveLoadBalancerAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.web.reactive.function.client.WebClient' (OnClassCondition)

   ReactiveManagementContextAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'reactor.core.publisher.Flux' (OnClassCondition)

   ReactiveManagementWebSecurityAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity' (OnClassCondition)

   ReactiveOAuth2ClientAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'reactor.core.publisher.Flux' (OnClassCondition)

   ReactiveOAuth2ResourceServerAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity' (OnClassCondition)

   ReactiveSecurityAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'reactor.core.publisher.Flux' (OnClassCondition)

   ReactiveUserDetailsServiceAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.authentication.ReactiveAuthenticationManager' (OnClassCondition)

   ReactiveWebServerFactoryAutoConfiguration:
      Did not match:
         - @ConditionalOnWebApplication did not find reactive web application classes (OnWebApplicationCondition)

   ReactorCoreAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'reactor.core.publisher.Flux' (OnClassCondition)

   RedisAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.redis.core.RedisOperations' (OnClassCondition)

   RedisCacheConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.redis.connection.RedisConnectionFactory' (OnClassCondition)

   RedisHealthIndicatorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.redis.connection.RedisConnectionFactory' (OnClassCondition)

   RedisReactiveAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'reactor.core.publisher.Flux' (OnClassCondition)

   RedisReactiveHealthIndicatorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'reactor.core.publisher.Flux' (OnClassCondition)

   RedisRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.redis.repository.configuration.EnableRedisRepositories' (OnClassCondition)

   RefreshAutoConfiguration.JpaInvokerConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.persistence.EntityManagerFactory' (OnClassCondition)

   RepositoryRestMvcAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration' (OnClassCondition)

   RestClientAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.elasticsearch.client.RestClient' (OnClassCondition)

   RestartEndpointWithIntegrationConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.integration.monitor.IntegrationMBeanExporter' (OnClassCondition)

   RestartEndpointWithoutIntegrationConfiguration#restartEndpointWithoutIntegration:
      Did not match:
         - @ConditionalOnEnabledEndpoint no property management.endpoint.restart.enabled found so using endpoint default (OnEnabledEndpointCondition)

   RibbonAutoConfiguration#loadBalancedRetryPolicyFactory:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.retry.support.RetryTemplate' (OnClassCondition)

   RibbonAutoConfiguration#ribbonApplicationContextInitializer:
      Did not match:
         - @ConditionalOnProperty (ribbon.eager-load.enabled) did not find property 'ribbon.eager-load.enabled' (OnPropertyCondition)

   RibbonAutoConfiguration.RibbonClientHttpRequestFactoryConfiguration:
      Did not match:
         - AnyNestedCondition 0 matched 2 did not; NestedCondition on RibbonAutoConfiguration.OnRibbonRestClientCondition.RibbonProperty @ConditionalOnProperty (ribbon.restclient.enabled) did not find property 'ribbon.restclient.enabled'; NestedCondition on RibbonAutoConfiguration.OnRibbonRestClientCondition.ZuulProperty @ConditionalOnProperty (ribbon.http.client.enabled) did not find property 'ribbon.http.client.enabled' (RibbonAutoConfiguration.OnRibbonRestClientCondition)
      Matched:
         - @ConditionalOnClass found required class 'com.netflix.client.http.HttpRequest' (OnClassCondition)

   SecurityAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.authentication.DefaultAuthenticationEventPublisher' (OnClassCondition)

   SecurityFilterAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.config.http.SessionCreationPolicy' (OnClassCondition)

   SecurityRequestMatcherProviderAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.web.util.matcher.RequestMatcher' (OnClassCondition)

   SendGridAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.sendgrid.SendGrid' (OnClassCondition)

   ServletEndpointManagementContextConfiguration.JerseyServletEndpointManagementContextConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.glassfish.jersey.server.ResourceConfig' (OnClassCondition)

   ServletManagementContextAutoConfiguration.ApplicationContextFilterConfiguration:
      Did not match:
         - @ConditionalOnProperty (management.server.add-application-context-header=true) did not find property 'add-application-context-header' (OnPropertyCondition)

   ServletWebServerFactoryConfiguration.EmbeddedJetty:
      Did not match:
         - @ConditionalOnClass did not find required classes 'org.eclipse.jetty.server.Server', 'org.eclipse.jetty.util.Loader', 'org.eclipse.jetty.webapp.WebAppContext' (OnClassCondition)

   ServletWebServerFactoryConfiguration.EmbeddedUndertow:
      Did not match:
         - @ConditionalOnClass did not find required classes 'io.undertow.Undertow', 'org.xnio.SslClientAuthMode' (OnClassCondition)

   SessionAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.session.Session' (OnClassCondition)

   SessionsEndpointAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.session.FindByIndexNameSessionRepository' (OnClassCondition)

   ShutdownEndpointAutoConfiguration:
      Did not match:
         - @ConditionalOnEnabledEndpoint no property management.endpoint.shutdown.enabled found so using endpoint default (OnEnabledEndpointCondition)

   SignalFxMetricsExportAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.micrometer.signalfx.SignalFxMeterRegistry' (OnClassCondition)

   SolrAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.apache.solr.client.solrj.impl.CloudSolrClient' (OnClassCondition)

   SolrHealthIndicatorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.apache.solr.client.solrj.SolrClient' (OnClassCondition)

   SolrRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.apache.solr.client.solrj.SolrClient' (OnClassCondition)

   SpringApplicationAdminJmxAutoConfiguration:
      Did not match:
         - @ConditionalOnProperty (spring.application.admin.enabled=true) did not find property 'enabled' (OnPropertyCondition)

   SpringDataWebAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.web.PageableHandlerMethodArgumentResolver' (OnClassCondition)

   StatsdMetricsExportAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.micrometer.statsd.StatsdMeterRegistry' (OnClassCondition)

   TaskSchedulingAutoConfiguration#taskScheduler:
      Did not match:
         - @ConditionalOnBean (names: org.springframework.context.annotation.internalScheduledAnnotationProcessor; SearchStrategy: all) did not find any beans named org.springframework.context.annotation.internalScheduledAnnotationProcessor (OnBeanCondition)

   ThymeleafAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.thymeleaf.spring5.SpringTemplateEngine' (OnClassCondition)

   TransactionAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.transaction.PlatformTransactionManager' (OnClassCondition)

   UserDetailsServiceAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.authentication.AuthenticationManager' (OnClassCondition)

   WavefrontMetricsExportAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.micrometer.wavefront.WavefrontMeterRegistry' (OnClassCondition)

   WebClientAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.web.reactive.function.client.WebClient' (OnClassCondition)

   WebClientMetricsConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.web.reactive.function.client.WebClient' (OnClassCondition)

   WebFluxAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.web.reactive.config.WebFluxConfigurer' (OnClassCondition)

   WebFluxEndpointManagementContextConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.web.reactive.DispatcherHandler' (OnClassCondition)

   WebFluxMetricsAutoConfiguration:
      Did not match:
         - @ConditionalOnWebApplication did not find reactive web application classes (OnWebApplicationCondition)

   WebMvcAutoConfiguration.ResourceChainCustomizerConfiguration:
      Did not match:
         - @ConditionalOnEnabledResourceChain did not find class org.webjars.WebJarAssetLocator (OnEnabledResourceChainCondition)

   WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#beanNameViewResolver:
      Did not match:
         - @ConditionalOnMissingBean (types: org.springframework.web.servlet.view.BeanNameViewResolver; SearchStrategy: all) found beans of type 'org.springframework.web.servlet.view.BeanNameViewResolver' beanNameViewResolver (OnBeanCondition)

   WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#localeResolver:
      Did not match:
         - @ConditionalOnProperty (spring.mvc.locale) did not find property 'locale' (OnPropertyCondition)

   WebServiceTemplateAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.oxm.Marshaller' (OnClassCondition)

   WebServicesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.ws.transport.http.MessageDispatcherServlet' (OnClassCondition)

   WebSocketMessagingAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer' (OnClassCondition)

   WebSocketReactiveAutoConfiguration:
      Did not match:
         - @ConditionalOnWebApplication did not find reactive web application classes (OnWebApplicationCondition)

   WebSocketServletAutoConfiguration.JettyWebSocketConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.eclipse.jetty.websocket.jsr356.server.deploy.WebSocketServerContainerInitializer' (OnClassCondition)

   WebSocketServletAutoConfiguration.UndertowWebSocketConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.undertow.websockets.jsr.Bootstrap' (OnClassCondition)

   XADataSourceAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.transaction.TransactionManager' (OnClassCondition)


Exclusions:
-----------

    None


Unconditional classes:
----------------------

    org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration

    org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointAutoConfiguration

    org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration

    org.springframework.boot.actuate.autoconfigure.info.InfoContributorAutoConfiguration

    org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration

    org.springframework.cloud.client.discovery.simple.SimpleDiscoveryClientAutoConfiguration

    org.springframework.cloud.client.CommonsClientAutoConfiguration

    org.springframework.cloud.commons.httpclient.HttpClientConfiguration

    org.springframework.boot.actuate.autoconfigure.endpoint.EndpointAutoConfiguration

    org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration

    org.springframework.boot.actuate.autoconfigure.health.HealthEndpointAutoConfiguration

    org.springframework.cloud.client.discovery.composite.CompositeDiscoveryClientAutoConfiguration

    org.springframework.boot.actuate.autoconfigure.web.mappings.MappingsEndpointAutoConfiguration

    org.springframework.cloud.client.serviceregistry.ServiceRegistryAutoConfiguration

    org.springframework.cloud.autoconfigure.LifecycleMvcEndpointAutoConfiguration

    org.springframework.boot.actuate.autoconfigure.audit.AuditAutoConfiguration

    org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration



[22:02:29.972] INFO  [main]o.a.c.h.Http11NioProtocol - Starting ProtocolHandler ["http-nio-20000"]
[22:02:30.004] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:02:30.036] INFO  [main]o.s.b.w.e.t.TomcatWebServer - Tomcat started on port(s): 20000 (http) with context path ''
[22:02:30.036] INFO  [main]o.s.c.n.e.s.EurekaAutoServiceRegistration - Updating port to 20000
[22:02:30.038] INFO  [main]c.m.EurekaServerApplication - Started EurekaServerApplication in 6.357 seconds (JVM running for 6.761)
[22:02:30.101] INFO  [http-nio-20000-exec-1]o.a.c.c.C.[.[.[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
[22:02:30.101] INFO  [http-nio-20000-exec-1]o.s.w.s.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
[22:02:30.101] DEBUG [http-nio-20000-exec-1]o.s.w.s.DispatcherServlet - Detected StandardServletMultipartResolver
[22:02:30.108] DEBUG [http-nio-20000-exec-1]o.s.w.s.DispatcherServlet - enableLoggingRequestDetails='false': request parameters and headers will be masked to prevent unsafe logging of potentially sensitive data
[22:02:30.108] INFO  [http-nio-20000-exec-1]o.s.w.s.DispatcherServlet - Completed initialization in 7 ms
[22:02:30.146] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:02:30.146] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:30.146] WARN  [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - DS: Registry: lease doesn't exist, registering resource: RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001
[22:02:30.146] WARN  [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Not Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001
[22:02:30.154] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[22:02:30.164] DEBUG [http-nio-20000-exec-1]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode 
[22:02:30.176] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:30.176] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode 
[22:02:30.262] DEBUG [http-nio-20000-exec-3]c.n.d.u.DeserializerStringCache - clearing global-level cache with size 1
[22:02:30.262] DEBUG [http-nio-20000-exec-3]c.n.d.u.DeserializerStringCache - clearing app-level serialization cache with size 8
[22:02:30.262] DEBUG [http-nio-20000-exec-3]c.n.e.r.ApplicationResource - Registering instance 192.168.31.38:ribbon-consumer:31001 (replication=null)
[22:02:30.263] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - register RIBBON-CONSUMER, vip ribbon-consumer, leaseDuration 90, isReplication false
[22:02:30.263] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - No previous lease information found; it is new registration
[22:02:30.264] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:02:30.264] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.AlwaysMatchInstanceStatusRule - Returning the default instance status UP for instance 192.168.31.38:ribbon-consumer:31001
[22:02:30.264] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 JSON, full
[22:02:30.265] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 JSON, compact
[22:02:30.265] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 JSON, full
[22:02:30.265] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 JSON, compact
[22:02:30.265] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, full
[22:02:30.265] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, compact
[22:02:30.265] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V1 JSON, full
[22:02:30.265] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V1 JSON, full
[22:02:30.265] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 JSON, full
[22:02:30.265] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 JSON, compact
[22:02:30.265] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 JSON, full
[22:02:30.280] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 JSON, compact
[22:02:30.280] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, full
[22:02:30.280] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, compact
[22:02:30.280] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V2 JSON, full
[22:02:30.280] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V2 JSON, full
[22:02:30.280] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 XML, full
[22:02:30.280] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 XML, compact
[22:02:30.280] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 XML, full
[22:02:30.280] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 XML, compact
[22:02:30.280] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, full
[22:02:30.280] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, compact
[22:02:30.280] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V1 XML, full
[22:02:30.280] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V1 XML, full
[22:02:30.280] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 XML, full
[22:02:30.280] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 XML, compact
[22:02:30.280] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 XML, full
[22:02:30.280] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 XML, compact
[22:02:30.280] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, full
[22:02:30.280] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, compact
[22:02:30.281] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V2 XML, full
[22:02:30.281] DEBUG [http-nio-20000-exec-3]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V2 XML, full
[22:02:30.281] INFO  [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Registered instance RIBBON-CONSUMER/192.168.31.38:ribbon-consumer:31001 with status UP (replication=false)
[22:02:30.553] DEBUG [http-nio-20000-exec-5]o.s.w.s.DispatcherServlet - GET "/", parameters={}
[22:02:30.560] DEBUG [http-nio-20000-exec-5]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public java.lang.String org.springframework.cloud.netflix.eureka.server.EurekaController.status(javax.servlet.http.HttpServletRequest,java.util.Map<java.lang.String, java.lang.Object>)
[22:02:30.578] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:30.598] DEBUG [http-nio-20000-exec-5]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/status_zh.ftl]
[22:02:30.599] DEBUG [http-nio-20000-exec-5]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/status.ftl]
[22:02:30.706] DEBUG [http-nio-20000-exec-5]o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, application/signed-exchange;v=b3;q=0.9, */*;q=0.8]
[22:02:30.707] DEBUG [http-nio-20000-exec-5]o.s.w.s.v.f.FreeMarkerView - View name 'eureka/status', model {time=Sun Nov 29 22:02:30 CST 2020, basePath=/, dashboardPath=, currentTime=2020-11-29T22:02:30 +0800, upTime=00:00, environment=test, datacenter=default, registry=org.springframework.cloud.netflix.eureka.server.InstanceRegistry@54906dee, isBelowRenewThresold=false, replicas=[], apps=[{name=RIBBON-CONSUMER, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:ribbon-consumer:31001, url=http://192.168.31.38:31001/actuator/info, isHref=true}], isNotUp=false}]}], statusInfo=com.netflix.eureka.util.StatusInfo@21e5c3a7, instanceInfo={ipAddr=192.168.31.38, status=UP}, applicationStats={registered-replicas=, available-replicas=, unavailable-replicas=}, org.springframework.validation.BindingResult.registry=org.springframework.validation.BeanPropertyBindingResult: 0 errors, org.springframework.validation.BindingResult.statusInfo=org.springframework.validation.BeanPropertyBindingResult: 0 errors}
[22:02:30.710] DEBUG [http-nio-20000-exec-5]o.s.w.s.v.f.FreeMarkerView - Rendering [eureka/status.ftl]
[22:02:30.720] DEBUG [http-nio-20000-exec-5]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [spring_zh.ftl]
[22:02:30.721] DEBUG [http-nio-20000-exec-5]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [spring.ftl]
[22:02:30.757] DEBUG [http-nio-20000-exec-5]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/header_zh.ftl]
[22:02:30.758] DEBUG [http-nio-20000-exec-5]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/header.ftl]
[22:02:30.760] DEBUG [http-nio-20000-exec-5]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/navbar_zh.ftl]
[22:02:30.760] DEBUG [http-nio-20000-exec-6]o.s.w.s.DispatcherServlet - GET "/", parameters={}
[22:02:30.760] DEBUG [http-nio-20000-exec-5]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/navbar.ftl]
[22:02:30.762] DEBUG [http-nio-20000-exec-6]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public java.lang.String org.springframework.cloud.netflix.eureka.server.EurekaController.status(javax.servlet.http.HttpServletRequest,java.util.Map<java.lang.String, java.lang.Object>)
[22:02:30.762] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:30.765] DEBUG [http-nio-20000-exec-6]o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, application/signed-exchange;v=b3;q=0.9, */*;q=0.8]
[22:02:30.765] DEBUG [http-nio-20000-exec-6]o.s.w.s.v.f.FreeMarkerView - View name 'eureka/status', model {time=Sun Nov 29 22:02:30 CST 2020, basePath=/, dashboardPath=, currentTime=2020-11-29T22:02:30 +0800, upTime=00:00, environment=test, datacenter=default, registry=org.springframework.cloud.netflix.eureka.server.InstanceRegistry@54906dee, isBelowRenewThresold=false, replicas=[], apps=[{name=RIBBON-CONSUMER, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:ribbon-consumer:31001, url=http://192.168.31.38:31001/actuator/info, isHref=true}], isNotUp=false}]}], statusInfo=com.netflix.eureka.util.StatusInfo@743e2f1e, instanceInfo={ipAddr=192.168.31.38, status=UP}, applicationStats={registered-replicas=, available-replicas=, unavailable-replicas=}, org.springframework.validation.BindingResult.registry=org.springframework.validation.BeanPropertyBindingResult: 0 errors, org.springframework.validation.BindingResult.statusInfo=org.springframework.validation.BeanPropertyBindingResult: 0 errors}
[22:02:30.765] DEBUG [http-nio-20000-exec-6]o.s.w.s.v.f.FreeMarkerView - Rendering [eureka/status.ftl]
[22:02:30.789] DEBUG [http-nio-20000-exec-5]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:30.789] DEBUG [http-nio-20000-exec-6]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:30.827] DEBUG [http-nio-20000-exec-7]o.s.w.s.DispatcherServlet - GET "/eureka/css/wro.css", parameters={}
[22:02:30.829] DEBUG [http-nio-20000-exec-8]o.s.w.s.DispatcherServlet - GET "/eureka/js/wro.js", parameters={}
[22:02:30.831] DEBUG [http-nio-20000-exec-7]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler ["classpath:/META-INF/resources/", "classpath:/resources/", "classpath:/static/", "classpath:/public/", "/"]
[22:02:30.831] DEBUG [http-nio-20000-exec-8]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler ["classpath:/META-INF/resources/", "classpath:/resources/", "classpath:/static/", "classpath:/public/", "/"]
[22:02:30.845] DEBUG [http-nio-20000-exec-7]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:30.845] DEBUG [http-nio-20000-exec-8]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:30.882] DEBUG [http-nio-20000-exec-9]o.s.w.s.DispatcherServlet - GET "/eureka/images/spring-logo-eureka.png", parameters={}
[22:02:30.883] DEBUG [http-nio-20000-exec-9]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler ["classpath:/META-INF/resources/", "classpath:/resources/", "classpath:/static/", "classpath:/public/", "/"]
[22:02:30.885] DEBUG [http-nio-20000-exec-9]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:30.899] DEBUG [http-nio-20000-exec-2]o.s.w.s.DispatcherServlet - GET "/eureka/fonts/montserrat-webfont.woff", parameters={}
[22:02:30.899] DEBUG [http-nio-20000-exec-10]o.s.w.s.DispatcherServlet - GET "/eureka/fonts/varela_round-webfont.woff", parameters={}
[22:02:30.900] DEBUG [http-nio-20000-exec-2]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler ["classpath:/META-INF/resources/", "classpath:/resources/", "classpath:/static/", "classpath:/public/", "/"]
[22:02:30.900] DEBUG [http-nio-20000-exec-10]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler ["classpath:/META-INF/resources/", "classpath:/resources/", "classpath:/static/", "classpath:/public/", "/"]
[22:02:30.910] DEBUG [http-nio-20000-exec-2]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:30.910] DEBUG [http-nio-20000-exec-10]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:30.936] DEBUG [http-nio-20000-exec-1]o.s.w.s.DispatcherServlet - GET "/favicon.ico", parameters={}
[22:02:30.937] DEBUG [http-nio-20000-exec-1]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [class path resource [META-INF/resources/], class path resource [resources/], class path resource [static/], class path resource [public/], ServletContext resource [/], class path resource []]
[22:02:30.948] DEBUG [http-nio-20000-exec-1]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:31.130] DEBUG [http-nio-20000-exec-4]o.s.w.s.DispatcherServlet - GET "/eureka/js/wro.js.map", parameters={}
[22:02:31.131] DEBUG [http-nio-20000-exec-4]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler ["classpath:/META-INF/resources/", "classpath:/resources/", "classpath:/static/", "classpath:/public/", "/"]
[22:02:31.132] DEBUG [http-nio-20000-exec-4]o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
[22:02:31.132] DEBUG [http-nio-20000-exec-4]o.s.w.s.DispatcherServlet - Completed 404 NOT_FOUND
[22:02:31.136] DEBUG [http-nio-20000-exec-4]o.s.w.s.DispatcherServlet - "ERROR" dispatch for GET "/error", parameters={}
[22:02:31.137] DEBUG [http-nio-20000-exec-4]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
[22:02:31.143] DEBUG [http-nio-20000-exec-4]o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/json, application/*+json, application/xml, text/xml, application/*+xml, application/xml, text/xml, application/*+xml]
[22:02:31.143] DEBUG [http-nio-20000-exec-4]o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{timestamp=Sun Nov 29 22:02:31 CST 2020, status=404, error=Not Found, message=No message available,  (truncated)...]
[22:02:31.155] DEBUG [http-nio-20000-exec-4]o.s.w.s.DispatcherServlet - Exiting from "ERROR" dispatch, status 404
[22:02:33.471] DEBUG [http-nio-20000-exec-3]o.s.w.s.DispatcherServlet - GET "/", parameters={}
[22:02:33.472] DEBUG [http-nio-20000-exec-3]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public java.lang.String org.springframework.cloud.netflix.eureka.server.EurekaController.status(javax.servlet.http.HttpServletRequest,java.util.Map<java.lang.String, java.lang.Object>)
[22:02:33.473] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:33.475] DEBUG [http-nio-20000-exec-3]o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, application/signed-exchange;v=b3;q=0.9, */*;q=0.8]
[22:02:33.475] DEBUG [http-nio-20000-exec-3]o.s.w.s.v.f.FreeMarkerView - View name 'eureka/status', model {time=Sun Nov 29 22:02:33 CST 2020, basePath=/, dashboardPath=, currentTime=2020-11-29T22:02:33 +0800, upTime=00:00, environment=test, datacenter=default, registry=org.springframework.cloud.netflix.eureka.server.InstanceRegistry@54906dee, isBelowRenewThresold=false, replicas=[], apps=[{name=RIBBON-CONSUMER, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:ribbon-consumer:31001, url=http://192.168.31.38:31001/actuator/info, isHref=true}], isNotUp=false}]}], statusInfo=com.netflix.eureka.util.StatusInfo@2246c30a, instanceInfo={ipAddr=192.168.31.38, status=UP}, applicationStats={registered-replicas=, available-replicas=, unavailable-replicas=}, org.springframework.validation.BindingResult.registry=org.springframework.validation.BeanPropertyBindingResult: 0 errors, org.springframework.validation.BindingResult.statusInfo=org.springframework.validation.BeanPropertyBindingResult: 0 errors}
[22:02:33.475] DEBUG [http-nio-20000-exec-3]o.s.w.s.v.f.FreeMarkerView - Rendering [eureka/status.ftl]
[22:02:33.477] DEBUG [http-nio-20000-exec-3]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:33.534] DEBUG [http-nio-20000-exec-6]o.s.w.s.DispatcherServlet - GET "/favicon.ico", parameters={}
[22:02:33.534] DEBUG [http-nio-20000-exec-6]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [class path resource [META-INF/resources/], class path resource [resources/], class path resource [static/], class path resource [public/], ServletContext resource [/], class path resource []]
[22:02:33.537] DEBUG [http-nio-20000-exec-6]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:33.746] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:02:33.746] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:33.746] WARN  [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - DS: Registry: lease doesn't exist, registering resource: EUREKA-CLIENT - 192.168.31.38:eureka-client:30002
[22:02:33.746] WARN  [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Not Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002
[22:02:33.753] DEBUG [http-nio-20000-exec-9]c.n.d.u.DeserializerStringCache - clearing global-level cache with size 1
[22:02:33.753] DEBUG [http-nio-20000-exec-9]c.n.d.u.DeserializerStringCache - clearing app-level serialization cache with size 8
[22:02:33.753] DEBUG [http-nio-20000-exec-9]c.n.e.r.ApplicationResource - Registering instance 192.168.31.38:eureka-client:30002 (replication=null)
[22:02:33.753] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - register EUREKA-CLIENT, vip eureka-client, leaseDuration 90, isReplication false
[22:02:33.753] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - No previous lease information found; it is new registration
[22:02:33.753] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:02:33.753] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.AlwaysMatchInstanceStatusRule - Returning the default instance status UP for instance 192.168.31.38:eureka-client:30002
[22:02:33.753] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application EUREKA-CLIENT V1 JSON, full
[22:02:33.754] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application EUREKA-CLIENT V1 JSON, compact
[22:02:33.754] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 JSON, full
[22:02:33.754] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 JSON, compact
[22:02:33.754] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, full
[22:02:33.754] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, compact
[22:02:33.754] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP eureka-client V1 JSON, full
[22:02:33.754] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP eureka-client V1 JSON, full
[22:02:33.754] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application EUREKA-CLIENT V2 JSON, full
[22:02:33.754] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application EUREKA-CLIENT V2 JSON, compact
[22:02:33.754] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 JSON, full
[22:02:33.754] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 JSON, compact
[22:02:33.754] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, full
[22:02:33.754] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, compact
[22:02:33.754] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP eureka-client V2 JSON, full
[22:02:33.754] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP eureka-client V2 JSON, full
[22:02:33.754] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application EUREKA-CLIENT V1 XML, full
[22:02:33.754] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application EUREKA-CLIENT V1 XML, compact
[22:02:33.754] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 XML, full
[22:02:33.754] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 XML, compact
[22:02:33.754] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, full
[22:02:33.754] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, compact
[22:02:33.754] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP eureka-client V1 XML, full
[22:02:33.754] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP eureka-client V1 XML, full
[22:02:33.754] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application EUREKA-CLIENT V2 XML, full
[22:02:33.754] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application EUREKA-CLIENT V2 XML, compact
[22:02:33.754] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 XML, full
[22:02:33.754] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 XML, compact
[22:02:33.754] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, full
[22:02:33.754] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, compact
[22:02:33.754] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP eureka-client V2 XML, full
[22:02:33.754] DEBUG [http-nio-20000-exec-9]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP eureka-client V2 XML, full
[22:02:33.754] INFO  [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Registered instance EUREKA-CLIENT/192.168.31.38:eureka-client:30002 with status UP (replication=false)
[22:02:34.280] DEBUG [http-nio-20000-exec-2]o.s.w.s.DispatcherServlet - GET "/", parameters={}
[22:02:34.281] DEBUG [http-nio-20000-exec-2]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public java.lang.String org.springframework.cloud.netflix.eureka.server.EurekaController.status(javax.servlet.http.HttpServletRequest,java.util.Map<java.lang.String, java.lang.Object>)
[22:02:34.282] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:34.283] DEBUG [http-nio-20000-exec-2]o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, application/signed-exchange;v=b3;q=0.9, */*;q=0.8]
[22:02:34.283] DEBUG [http-nio-20000-exec-2]o.s.w.s.v.f.FreeMarkerView - View name 'eureka/status', model {time=Sun Nov 29 22:02:34 CST 2020, basePath=/, dashboardPath=, currentTime=2020-11-29T22:02:34 +0800, upTime=00:00, environment=test, datacenter=default, registry=org.springframework.cloud.netflix.eureka.server.InstanceRegistry@54906dee, isBelowRenewThresold=false, replicas=[], apps=[{name=EUREKA-CLIENT, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:eureka-client:30002, url=http://192.168.31.38:30002/actuator/info, isHref=true}], isNotUp=false}]}, {name=RIBBON-CONSUMER, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:ribbon-consumer:31001, url=http://192.168.31.38:31001/actuator/info, isHref=true}], isNotUp=false}]}], statusInfo=com.netflix.eureka.util.StatusInfo@4e6298a5, instanceInfo={ipAddr=192.168.31.38, status=UP}, applicationStats={registered-replicas=, available-replicas=, unavailable-replicas=}, org.springframework.validation.BindingResult.registry=org.springframework.validation.BeanPropertyBindingResult: 0 errors, org.springframework.validation.BindingResult.statusInfo=org.springframework.validation.BeanPropertyBindingResult: 0 errors}
[22:02:34.284] DEBUG [http-nio-20000-exec-2]o.s.w.s.v.f.FreeMarkerView - Rendering [eureka/status.ftl]
[22:02:34.285] DEBUG [http-nio-20000-exec-2]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:34.341] DEBUG [http-nio-20000-exec-10]o.s.w.s.DispatcherServlet - GET "/favicon.ico", parameters={}
[22:02:34.341] DEBUG [http-nio-20000-exec-10]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [class path resource [META-INF/resources/], class path resource [resources/], class path resource [static/], class path resource [public/], ServletContext resource [/], class path resource []]
[22:02:34.343] DEBUG [http-nio-20000-exec-10]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:34.493] DEBUG [http-nio-20000-exec-1]o.s.w.s.DispatcherServlet - GET "/", parameters={}
[22:02:34.494] DEBUG [http-nio-20000-exec-1]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public java.lang.String org.springframework.cloud.netflix.eureka.server.EurekaController.status(javax.servlet.http.HttpServletRequest,java.util.Map<java.lang.String, java.lang.Object>)
[22:02:34.494] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:34.496] DEBUG [http-nio-20000-exec-1]o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, application/signed-exchange;v=b3;q=0.9, */*;q=0.8]
[22:02:34.496] DEBUG [http-nio-20000-exec-1]o.s.w.s.v.f.FreeMarkerView - View name 'eureka/status', model {time=Sun Nov 29 22:02:34 CST 2020, basePath=/, dashboardPath=, currentTime=2020-11-29T22:02:34 +0800, upTime=00:00, environment=test, datacenter=default, registry=org.springframework.cloud.netflix.eureka.server.InstanceRegistry@54906dee, isBelowRenewThresold=false, replicas=[], apps=[{name=EUREKA-CLIENT, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:eureka-client:30002, url=http://192.168.31.38:30002/actuator/info, isHref=true}], isNotUp=false}]}, {name=RIBBON-CONSUMER, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:ribbon-consumer:31001, url=http://192.168.31.38:31001/actuator/info, isHref=true}], isNotUp=false}]}], statusInfo=com.netflix.eureka.util.StatusInfo@56e55886, instanceInfo={ipAddr=192.168.31.38, status=UP}, applicationStats={registered-replicas=, available-replicas=, unavailable-replicas=}, org.springframework.validation.BindingResult.registry=org.springframework.validation.BeanPropertyBindingResult: 0 errors, org.springframework.validation.BindingResult.statusInfo=org.springframework.validation.BeanPropertyBindingResult: 0 errors}
[22:02:34.496] DEBUG [http-nio-20000-exec-1]o.s.w.s.v.f.FreeMarkerView - Rendering [eureka/status.ftl]
[22:02:34.497] DEBUG [http-nio-20000-exec-1]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:34.550] DEBUG [http-nio-20000-exec-4]o.s.w.s.DispatcherServlet - GET "/favicon.ico", parameters={}
[22:02:34.550] DEBUG [http-nio-20000-exec-4]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [class path resource [META-INF/resources/], class path resource [resources/], class path resource [static/], class path resource [public/], ServletContext resource [/], class path resource []]
[22:02:34.552] DEBUG [http-nio-20000-exec-4]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:34.707] DEBUG [http-nio-20000-exec-3]o.s.w.s.DispatcherServlet - GET "/", parameters={}
[22:02:34.708] DEBUG [http-nio-20000-exec-3]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public java.lang.String org.springframework.cloud.netflix.eureka.server.EurekaController.status(javax.servlet.http.HttpServletRequest,java.util.Map<java.lang.String, java.lang.Object>)
[22:02:34.708] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:34.709] DEBUG [http-nio-20000-exec-3]o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, application/signed-exchange;v=b3;q=0.9, */*;q=0.8]
[22:02:34.710] DEBUG [http-nio-20000-exec-3]o.s.w.s.v.f.FreeMarkerView - View name 'eureka/status', model {time=Sun Nov 29 22:02:34 CST 2020, basePath=/, dashboardPath=, currentTime=2020-11-29T22:02:34 +0800, upTime=00:00, environment=test, datacenter=default, registry=org.springframework.cloud.netflix.eureka.server.InstanceRegistry@54906dee, isBelowRenewThresold=false, replicas=[], apps=[{name=EUREKA-CLIENT, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:eureka-client:30002, url=http://192.168.31.38:30002/actuator/info, isHref=true}], isNotUp=false}]}, {name=RIBBON-CONSUMER, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:ribbon-consumer:31001, url=http://192.168.31.38:31001/actuator/info, isHref=true}], isNotUp=false}]}], statusInfo=com.netflix.eureka.util.StatusInfo@d45c380, instanceInfo={ipAddr=192.168.31.38, status=UP}, applicationStats={registered-replicas=, available-replicas=, unavailable-replicas=}, org.springframework.validation.BindingResult.registry=org.springframework.validation.BeanPropertyBindingResult: 0 errors, org.springframework.validation.BindingResult.statusInfo=org.springframework.validation.BeanPropertyBindingResult: 0 errors}
[22:02:34.710] DEBUG [http-nio-20000-exec-3]o.s.w.s.v.f.FreeMarkerView - Rendering [eureka/status.ftl]
[22:02:34.712] DEBUG [http-nio-20000-exec-3]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:34.766] DEBUG [http-nio-20000-exec-6]o.s.w.s.DispatcherServlet - GET "/favicon.ico", parameters={}
[22:02:34.767] DEBUG [http-nio-20000-exec-6]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [class path resource [META-INF/resources/], class path resource [resources/], class path resource [static/], class path resource [public/], ServletContext resource [/], class path resource []]
[22:02:34.770] DEBUG [http-nio-20000-exec-6]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:35.021] DEBUG [http-nio-20000-exec-8]o.s.w.s.DispatcherServlet - GET "/", parameters={}
[22:02:35.022] DEBUG [http-nio-20000-exec-8]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public java.lang.String org.springframework.cloud.netflix.eureka.server.EurekaController.status(javax.servlet.http.HttpServletRequest,java.util.Map<java.lang.String, java.lang.Object>)
[22:02:35.022] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:35.023] DEBUG [http-nio-20000-exec-8]o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, application/signed-exchange;v=b3;q=0.9, */*;q=0.8]
[22:02:35.023] DEBUG [http-nio-20000-exec-8]o.s.w.s.v.f.FreeMarkerView - View name 'eureka/status', model {time=Sun Nov 29 22:02:35 CST 2020, basePath=/, dashboardPath=, currentTime=2020-11-29T22:02:35 +0800, upTime=00:00, environment=test, datacenter=default, registry=org.springframework.cloud.netflix.eureka.server.InstanceRegistry@54906dee, isBelowRenewThresold=false, replicas=[], apps=[{name=EUREKA-CLIENT, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:eureka-client:30002, url=http://192.168.31.38:30002/actuator/info, isHref=true}], isNotUp=false}]}, {name=RIBBON-CONSUMER, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:ribbon-consumer:31001, url=http://192.168.31.38:31001/actuator/info, isHref=true}], isNotUp=false}]}], statusInfo=com.netflix.eureka.util.StatusInfo@9fdf850, instanceInfo={ipAddr=192.168.31.38, status=UP}, applicationStats={registered-replicas=, available-replicas=, unavailable-replicas=}, org.springframework.validation.BindingResult.registry=org.springframework.validation.BeanPropertyBindingResult: 0 errors, org.springframework.validation.BindingResult.statusInfo=org.springframework.validation.BeanPropertyBindingResult: 0 errors}
[22:02:35.024] DEBUG [http-nio-20000-exec-8]o.s.w.s.v.f.FreeMarkerView - Rendering [eureka/status.ftl]
[22:02:35.025] DEBUG [http-nio-20000-exec-8]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:35.078] DEBUG [http-nio-20000-exec-5]o.s.w.s.DispatcherServlet - GET "/favicon.ico", parameters={}
[22:02:35.079] DEBUG [http-nio-20000-exec-5]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [class path resource [META-INF/resources/], class path resource [resources/], class path resource [static/], class path resource [public/], ServletContext resource [/], class path resource []]
[22:02:35.080] DEBUG [http-nio-20000-exec-5]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:35.225] DEBUG [http-nio-20000-exec-7]o.s.w.s.DispatcherServlet - GET "/", parameters={}
[22:02:35.226] DEBUG [http-nio-20000-exec-7]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public java.lang.String org.springframework.cloud.netflix.eureka.server.EurekaController.status(javax.servlet.http.HttpServletRequest,java.util.Map<java.lang.String, java.lang.Object>)
[22:02:35.226] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:35.228] DEBUG [http-nio-20000-exec-7]o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, application/signed-exchange;v=b3;q=0.9, */*;q=0.8]
[22:02:35.228] DEBUG [http-nio-20000-exec-7]o.s.w.s.v.f.FreeMarkerView - View name 'eureka/status', model {time=Sun Nov 29 22:02:35 CST 2020, basePath=/, dashboardPath=, currentTime=2020-11-29T22:02:35 +0800, upTime=00:00, environment=test, datacenter=default, registry=org.springframework.cloud.netflix.eureka.server.InstanceRegistry@54906dee, isBelowRenewThresold=false, replicas=[], apps=[{name=EUREKA-CLIENT, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:eureka-client:30002, url=http://192.168.31.38:30002/actuator/info, isHref=true}], isNotUp=false}]}, {name=RIBBON-CONSUMER, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:ribbon-consumer:31001, url=http://192.168.31.38:31001/actuator/info, isHref=true}], isNotUp=false}]}], statusInfo=com.netflix.eureka.util.StatusInfo@6ad274f3, instanceInfo={ipAddr=192.168.31.38, status=UP}, applicationStats={registered-replicas=, available-replicas=, unavailable-replicas=}, org.springframework.validation.BindingResult.registry=org.springframework.validation.BeanPropertyBindingResult: 0 errors, org.springframework.validation.BindingResult.statusInfo=org.springframework.validation.BeanPropertyBindingResult: 0 errors}
[22:02:35.228] DEBUG [http-nio-20000-exec-7]o.s.w.s.v.f.FreeMarkerView - Rendering [eureka/status.ftl]
[22:02:35.230] DEBUG [http-nio-20000-exec-7]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:35.284] DEBUG [http-nio-20000-exec-9]o.s.w.s.DispatcherServlet - GET "/favicon.ico", parameters={}
[22:02:35.284] DEBUG [http-nio-20000-exec-9]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [class path resource [META-INF/resources/], class path resource [resources/], class path resource [static/], class path resource [public/], ServletContext resource [/], class path resource []]
[22:02:35.286] DEBUG [http-nio-20000-exec-9]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:35.687] DEBUG [http-nio-20000-exec-2]o.s.w.s.DispatcherServlet - GET "/", parameters={}
[22:02:35.687] DEBUG [http-nio-20000-exec-2]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public java.lang.String org.springframework.cloud.netflix.eureka.server.EurekaController.status(javax.servlet.http.HttpServletRequest,java.util.Map<java.lang.String, java.lang.Object>)
[22:02:35.688] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:35.689] DEBUG [http-nio-20000-exec-2]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/status_zh.ftl]
[22:02:35.690] DEBUG [http-nio-20000-exec-2]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/status.ftl]
[22:02:35.690] DEBUG [http-nio-20000-exec-2]o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, application/signed-exchange;v=b3;q=0.9, */*;q=0.8]
[22:02:35.690] DEBUG [http-nio-20000-exec-2]o.s.w.s.v.f.FreeMarkerView - View name 'eureka/status', model {time=Sun Nov 29 22:02:35 CST 2020, basePath=/, dashboardPath=, currentTime=2020-11-29T22:02:35 +0800, upTime=00:00, environment=test, datacenter=default, registry=org.springframework.cloud.netflix.eureka.server.InstanceRegistry@54906dee, isBelowRenewThresold=false, replicas=[], apps=[{name=EUREKA-CLIENT, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:eureka-client:30002, url=http://192.168.31.38:30002/actuator/info, isHref=true}], isNotUp=false}]}, {name=RIBBON-CONSUMER, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:ribbon-consumer:31001, url=http://192.168.31.38:31001/actuator/info, isHref=true}], isNotUp=false}]}], statusInfo=com.netflix.eureka.util.StatusInfo@461993dd, instanceInfo={ipAddr=192.168.31.38, status=UP}, applicationStats={registered-replicas=, available-replicas=, unavailable-replicas=}, org.springframework.validation.BindingResult.registry=org.springframework.validation.BeanPropertyBindingResult: 0 errors, org.springframework.validation.BindingResult.statusInfo=org.springframework.validation.BeanPropertyBindingResult: 0 errors}
[22:02:35.691] DEBUG [http-nio-20000-exec-2]o.s.w.s.v.f.FreeMarkerView - Rendering [eureka/status.ftl]
[22:02:35.692] DEBUG [http-nio-20000-exec-2]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:35.749] DEBUG [http-nio-20000-exec-10]o.s.w.s.DispatcherServlet - GET "/favicon.ico", parameters={}
[22:02:35.749] DEBUG [http-nio-20000-exec-10]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [class path resource [META-INF/resources/], class path resource [resources/], class path resource [static/], class path resource [public/], ServletContext resource [/], class path resource []]
[22:02:35.751] DEBUG [http-nio-20000-exec-10]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:36.193] DEBUG [http-nio-20000-exec-1]o.s.w.s.DispatcherServlet - GET "/", parameters={}
[22:02:36.194] DEBUG [http-nio-20000-exec-1]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public java.lang.String org.springframework.cloud.netflix.eureka.server.EurekaController.status(javax.servlet.http.HttpServletRequest,java.util.Map<java.lang.String, java.lang.Object>)
[22:02:36.194] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:36.195] DEBUG [http-nio-20000-exec-1]o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, application/signed-exchange;v=b3;q=0.9, */*;q=0.8]
[22:02:36.195] DEBUG [http-nio-20000-exec-1]o.s.w.s.v.f.FreeMarkerView - View name 'eureka/status', model {time=Sun Nov 29 22:02:36 CST 2020, basePath=/, dashboardPath=, currentTime=2020-11-29T22:02:36 +0800, upTime=00:00, environment=test, datacenter=default, registry=org.springframework.cloud.netflix.eureka.server.InstanceRegistry@54906dee, isBelowRenewThresold=false, replicas=[], apps=[{name=EUREKA-CLIENT, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:eureka-client:30002, url=http://192.168.31.38:30002/actuator/info, isHref=true}], isNotUp=false}]}, {name=RIBBON-CONSUMER, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:ribbon-consumer:31001, url=http://192.168.31.38:31001/actuator/info, isHref=true}], isNotUp=false}]}], statusInfo=com.netflix.eureka.util.StatusInfo@4ff18285, instanceInfo={ipAddr=192.168.31.38, status=UP}, applicationStats={registered-replicas=, available-replicas=, unavailable-replicas=}, org.springframework.validation.BindingResult.registry=org.springframework.validation.BeanPropertyBindingResult: 0 errors, org.springframework.validation.BindingResult.statusInfo=org.springframework.validation.BeanPropertyBindingResult: 0 errors}
[22:02:36.196] DEBUG [http-nio-20000-exec-1]o.s.w.s.v.f.FreeMarkerView - Rendering [eureka/status.ftl]
[22:02:36.196] DEBUG [http-nio-20000-exec-1]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [spring_zh.ftl]
[22:02:36.197] DEBUG [http-nio-20000-exec-1]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/header_zh.ftl]
[22:02:36.197] DEBUG [http-nio-20000-exec-1]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/header.ftl]
[22:02:36.198] DEBUG [http-nio-20000-exec-1]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/navbar_zh.ftl]
[22:02:36.198] DEBUG [http-nio-20000-exec-1]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/navbar.ftl]
[22:02:36.200] DEBUG [http-nio-20000-exec-1]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:36.252] DEBUG [http-nio-20000-exec-4]o.s.w.s.DispatcherServlet - GET "/favicon.ico", parameters={}
[22:02:36.252] DEBUG [http-nio-20000-exec-4]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [class path resource [META-INF/resources/], class path resource [resources/], class path resource [static/], class path resource [public/], ServletContext resource [/], class path resource []]
[22:02:36.255] DEBUG [http-nio-20000-exec-4]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:36.622] DEBUG [http-nio-20000-exec-3]o.s.w.s.DispatcherServlet - GET "/", parameters={}
[22:02:36.622] DEBUG [http-nio-20000-exec-3]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public java.lang.String org.springframework.cloud.netflix.eureka.server.EurekaController.status(javax.servlet.http.HttpServletRequest,java.util.Map<java.lang.String, java.lang.Object>)
[22:02:36.623] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:36.624] DEBUG [http-nio-20000-exec-3]o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, application/signed-exchange;v=b3;q=0.9, */*;q=0.8]
[22:02:36.624] DEBUG [http-nio-20000-exec-3]o.s.w.s.v.f.FreeMarkerView - View name 'eureka/status', model {time=Sun Nov 29 22:02:36 CST 2020, basePath=/, dashboardPath=, currentTime=2020-11-29T22:02:36 +0800, upTime=00:00, environment=test, datacenter=default, registry=org.springframework.cloud.netflix.eureka.server.InstanceRegistry@54906dee, isBelowRenewThresold=false, replicas=[], apps=[{name=EUREKA-CLIENT, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:eureka-client:30002, url=http://192.168.31.38:30002/actuator/info, isHref=true}], isNotUp=false}]}, {name=RIBBON-CONSUMER, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:ribbon-consumer:31001, url=http://192.168.31.38:31001/actuator/info, isHref=true}], isNotUp=false}]}], statusInfo=com.netflix.eureka.util.StatusInfo@218b1742, instanceInfo={ipAddr=192.168.31.38, status=UP}, applicationStats={registered-replicas=, available-replicas=, unavailable-replicas=}, org.springframework.validation.BindingResult.registry=org.springframework.validation.BeanPropertyBindingResult: 0 errors, org.springframework.validation.BindingResult.statusInfo=org.springframework.validation.BeanPropertyBindingResult: 0 errors}
[22:02:36.624] DEBUG [http-nio-20000-exec-3]o.s.w.s.v.f.FreeMarkerView - Rendering [eureka/status.ftl]
[22:02:36.625] DEBUG [http-nio-20000-exec-3]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:36.681] DEBUG [http-nio-20000-exec-6]o.s.w.s.DispatcherServlet - GET "/favicon.ico", parameters={}
[22:02:36.682] DEBUG [http-nio-20000-exec-6]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [class path resource [META-INF/resources/], class path resource [resources/], class path resource [static/], class path resource [public/], ServletContext resource [/], class path resource []]
[22:02:36.683] DEBUG [http-nio-20000-exec-6]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:37.110] DEBUG [http-nio-20000-exec-8]o.s.w.s.DispatcherServlet - GET "/", parameters={}
[22:02:37.110] DEBUG [http-nio-20000-exec-8]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public java.lang.String org.springframework.cloud.netflix.eureka.server.EurekaController.status(javax.servlet.http.HttpServletRequest,java.util.Map<java.lang.String, java.lang.Object>)
[22:02:37.111] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:37.112] DEBUG [http-nio-20000-exec-8]o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, application/signed-exchange;v=b3;q=0.9, */*;q=0.8]
[22:02:37.112] DEBUG [http-nio-20000-exec-8]o.s.w.s.v.f.FreeMarkerView - View name 'eureka/status', model {time=Sun Nov 29 22:02:37 CST 2020, basePath=/, dashboardPath=, currentTime=2020-11-29T22:02:37 +0800, upTime=00:00, environment=test, datacenter=default, registry=org.springframework.cloud.netflix.eureka.server.InstanceRegistry@54906dee, isBelowRenewThresold=false, replicas=[], apps=[{name=EUREKA-CLIENT, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:eureka-client:30002, url=http://192.168.31.38:30002/actuator/info, isHref=true}], isNotUp=false}]}, {name=RIBBON-CONSUMER, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:ribbon-consumer:31001, url=http://192.168.31.38:31001/actuator/info, isHref=true}], isNotUp=false}]}], statusInfo=com.netflix.eureka.util.StatusInfo@1969ecca, instanceInfo={ipAddr=192.168.31.38, status=UP}, applicationStats={registered-replicas=, available-replicas=, unavailable-replicas=}, org.springframework.validation.BindingResult.registry=org.springframework.validation.BeanPropertyBindingResult: 0 errors, org.springframework.validation.BindingResult.statusInfo=org.springframework.validation.BeanPropertyBindingResult: 0 errors}
[22:02:37.112] DEBUG [http-nio-20000-exec-8]o.s.w.s.v.f.FreeMarkerView - Rendering [eureka/status.ftl]
[22:02:37.114] DEBUG [http-nio-20000-exec-8]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:37.167] DEBUG [http-nio-20000-exec-5]o.s.w.s.DispatcherServlet - GET "/favicon.ico", parameters={}
[22:02:37.168] DEBUG [http-nio-20000-exec-5]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [class path resource [META-INF/resources/], class path resource [resources/], class path resource [static/], class path resource [public/], ServletContext resource [/], class path resource []]
[22:02:37.170] DEBUG [http-nio-20000-exec-5]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:37.647] DEBUG [http-nio-20000-exec-7]o.s.w.s.DispatcherServlet - GET "/", parameters={}
[22:02:37.648] DEBUG [http-nio-20000-exec-7]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public java.lang.String org.springframework.cloud.netflix.eureka.server.EurekaController.status(javax.servlet.http.HttpServletRequest,java.util.Map<java.lang.String, java.lang.Object>)
[22:02:37.648] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:37.649] DEBUG [http-nio-20000-exec-7]o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, application/signed-exchange;v=b3;q=0.9, */*;q=0.8]
[22:02:37.650] DEBUG [http-nio-20000-exec-7]o.s.w.s.v.f.FreeMarkerView - View name 'eureka/status', model {time=Sun Nov 29 22:02:37 CST 2020, basePath=/, dashboardPath=, currentTime=2020-11-29T22:02:37 +0800, upTime=00:00, environment=test, datacenter=default, registry=org.springframework.cloud.netflix.eureka.server.InstanceRegistry@54906dee, isBelowRenewThresold=false, replicas=[], apps=[{name=EUREKA-CLIENT, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:eureka-client:30002, url=http://192.168.31.38:30002/actuator/info, isHref=true}], isNotUp=false}]}, {name=RIBBON-CONSUMER, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:ribbon-consumer:31001, url=http://192.168.31.38:31001/actuator/info, isHref=true}], isNotUp=false}]}], statusInfo=com.netflix.eureka.util.StatusInfo@2fd0f7cd, instanceInfo={ipAddr=192.168.31.38, status=UP}, applicationStats={registered-replicas=, available-replicas=, unavailable-replicas=}, org.springframework.validation.BindingResult.registry=org.springframework.validation.BeanPropertyBindingResult: 0 errors, org.springframework.validation.BindingResult.statusInfo=org.springframework.validation.BeanPropertyBindingResult: 0 errors}
[22:02:37.650] DEBUG [http-nio-20000-exec-7]o.s.w.s.v.f.FreeMarkerView - Rendering [eureka/status.ftl]
[22:02:37.651] DEBUG [http-nio-20000-exec-7]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:37.704] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:02:37.704] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:37.704] WARN  [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - DS: Registry: lease doesn't exist, registering resource: SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003
[22:02:37.704] WARN  [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Not Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003
[22:02:37.705] DEBUG [http-nio-20000-exec-10]o.s.w.s.DispatcherServlet - GET "/favicon.ico", parameters={}
[22:02:37.705] DEBUG [http-nio-20000-exec-10]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [class path resource [META-INF/resources/], class path resource [resources/], class path resource [static/], class path resource [public/], ServletContext resource [/], class path resource []]
[22:02:37.708] DEBUG [http-nio-20000-exec-10]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:37.712] DEBUG [http-nio-20000-exec-4]c.n.d.u.DeserializerStringCache - clearing global-level cache with size 1
[22:02:37.712] DEBUG [http-nio-20000-exec-4]c.n.d.u.DeserializerStringCache - clearing app-level serialization cache with size 8
[22:02:37.712] DEBUG [http-nio-20000-exec-4]c.n.e.r.ApplicationResource - Registering instance 192.168.31.38:shop-cloud-order-service:10003 (replication=null)
[22:02:37.712] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - register SHOP-CLOUD-ORDER-SERVICE, vip shop-cloud-order-service, leaseDuration 90, isReplication false
[22:02:37.712] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - No previous lease information found; it is new registration
[22:02:37.712] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:02:37.712] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.AlwaysMatchInstanceStatusRule - Returning the default instance status UP for instance 192.168.31.38:shop-cloud-order-service:10003
[22:02:37.712] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-ORDER-SERVICE V1 JSON, full
[22:02:37.712] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-ORDER-SERVICE V1 JSON, compact
[22:02:37.712] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 JSON, full
[22:02:37.712] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 JSON, compact
[22:02:37.712] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, full
[22:02:37.712] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, compact
[22:02:37.712] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP shop-cloud-order-service V1 JSON, full
[22:02:37.712] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP shop-cloud-order-service V1 JSON, full
[22:02:37.712] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-ORDER-SERVICE V2 JSON, full
[22:02:37.712] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-ORDER-SERVICE V2 JSON, compact
[22:02:37.712] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 JSON, full
[22:02:37.712] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 JSON, compact
[22:02:37.712] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, full
[22:02:37.712] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, compact
[22:02:37.713] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP shop-cloud-order-service V2 JSON, full
[22:02:37.713] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP shop-cloud-order-service V2 JSON, full
[22:02:37.713] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-ORDER-SERVICE V1 XML, full
[22:02:37.713] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-ORDER-SERVICE V1 XML, compact
[22:02:37.713] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 XML, full
[22:02:37.713] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 XML, compact
[22:02:37.713] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, full
[22:02:37.713] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, compact
[22:02:37.713] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP shop-cloud-order-service V1 XML, full
[22:02:37.713] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP shop-cloud-order-service V1 XML, full
[22:02:37.713] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-ORDER-SERVICE V2 XML, full
[22:02:37.713] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-ORDER-SERVICE V2 XML, compact
[22:02:37.713] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 XML, full
[22:02:37.713] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 XML, compact
[22:02:37.713] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, full
[22:02:37.713] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, compact
[22:02:37.713] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP shop-cloud-order-service V2 XML, full
[22:02:37.713] DEBUG [http-nio-20000-exec-4]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP shop-cloud-order-service V2 XML, full
[22:02:37.713] INFO  [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Registered instance SHOP-CLOUD-ORDER-SERVICE/192.168.31.38:shop-cloud-order-service:10003 with status UP (replication=false)
[22:02:38.106] DEBUG [http-nio-20000-exec-3]o.s.w.s.DispatcherServlet - GET "/", parameters={}
[22:02:38.107] DEBUG [http-nio-20000-exec-3]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public java.lang.String org.springframework.cloud.netflix.eureka.server.EurekaController.status(javax.servlet.http.HttpServletRequest,java.util.Map<java.lang.String, java.lang.Object>)
[22:02:38.107] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:38.109] DEBUG [http-nio-20000-exec-3]o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, application/signed-exchange;v=b3;q=0.9, */*;q=0.8]
[22:02:38.109] DEBUG [http-nio-20000-exec-3]o.s.w.s.v.f.FreeMarkerView - View name 'eureka/status', model {time=Sun Nov 29 22:02:38 CST 2020, basePath=/, dashboardPath=, currentTime=2020-11-29T22:02:38 +0800, upTime=00:00, environment=test, datacenter=default, registry=org.springframework.cloud.netflix.eureka.server.InstanceRegistry@54906dee, isBelowRenewThresold=false, replicas=[], apps=[{name=EUREKA-CLIENT, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:eureka-client:30002, url=http://192.168.31.38:30002/actuator/info, isHref=true}], isNotUp=false}]}, {name=RIBBON-CONSUMER, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:ribbon-consumer:31001, url=http://192.168.31.38:31001/actuator/info, isHref=true}], isNotUp=false}]}, {name=SHOP-CLOUD-ORDER-SERVICE, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:shop-cloud-order-service:10003, url=http://192.168.31.38:10003/actuator/info, isHref=true}], isNotUp=false}]}], statusInfo=com.netflix.eureka.util.StatusInfo@2719930, instanceInfo={ipAddr=192.168.31.38, status=UP}, applicationStats={registered-replicas=, available-replicas=, unavailable-replicas=}, org.springframework.validation.BindingResult.registry=org.springframework.validation.BeanPropertyBindingResult: 0 errors, org.springframework.validation.BindingResult.statusInfo=org.springframework.validation.BeanPropertyBindingResult: 0 errors}
[22:02:38.109] DEBUG [http-nio-20000-exec-3]o.s.w.s.v.f.FreeMarkerView - Rendering [eureka/status.ftl]
[22:02:38.110] DEBUG [http-nio-20000-exec-3]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:38.170] DEBUG [http-nio-20000-exec-6]o.s.w.s.DispatcherServlet - GET "/favicon.ico", parameters={}
[22:02:38.170] DEBUG [http-nio-20000-exec-6]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [class path resource [META-INF/resources/], class path resource [resources/], class path resource [static/], class path resource [public/], ServletContext resource [/], class path resource []]
[22:02:38.172] DEBUG [http-nio-20000-exec-6]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:38.816] DEBUG [http-nio-20000-exec-8]o.s.w.s.DispatcherServlet - GET "/", parameters={}
[22:02:38.816] DEBUG [http-nio-20000-exec-8]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public java.lang.String org.springframework.cloud.netflix.eureka.server.EurekaController.status(javax.servlet.http.HttpServletRequest,java.util.Map<java.lang.String, java.lang.Object>)
[22:02:38.817] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:38.818] DEBUG [http-nio-20000-exec-8]o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, application/signed-exchange;v=b3;q=0.9, */*;q=0.8]
[22:02:38.818] DEBUG [http-nio-20000-exec-8]o.s.w.s.v.f.FreeMarkerView - View name 'eureka/status', model {time=Sun Nov 29 22:02:38 CST 2020, basePath=/, dashboardPath=, currentTime=2020-11-29T22:02:38 +0800, upTime=00:00, environment=test, datacenter=default, registry=org.springframework.cloud.netflix.eureka.server.InstanceRegistry@54906dee, isBelowRenewThresold=false, replicas=[], apps=[{name=EUREKA-CLIENT, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:eureka-client:30002, url=http://192.168.31.38:30002/actuator/info, isHref=true}], isNotUp=false}]}, {name=RIBBON-CONSUMER, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:ribbon-consumer:31001, url=http://192.168.31.38:31001/actuator/info, isHref=true}], isNotUp=false}]}, {name=SHOP-CLOUD-ORDER-SERVICE, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:shop-cloud-order-service:10003, url=http://192.168.31.38:10003/actuator/info, isHref=true}], isNotUp=false}]}], statusInfo=com.netflix.eureka.util.StatusInfo@58a0dfbe, instanceInfo={ipAddr=192.168.31.38, status=UP}, applicationStats={registered-replicas=, available-replicas=, unavailable-replicas=}, org.springframework.validation.BindingResult.registry=org.springframework.validation.BeanPropertyBindingResult: 0 errors, org.springframework.validation.BindingResult.statusInfo=org.springframework.validation.BeanPropertyBindingResult: 0 errors}
[22:02:38.818] DEBUG [http-nio-20000-exec-8]o.s.w.s.v.f.FreeMarkerView - Rendering [eureka/status.ftl]
[22:02:38.819] DEBUG [http-nio-20000-exec-8]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:38.873] DEBUG [http-nio-20000-exec-5]o.s.w.s.DispatcherServlet - GET "/favicon.ico", parameters={}
[22:02:38.873] DEBUG [http-nio-20000-exec-5]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [class path resource [META-INF/resources/], class path resource [resources/], class path resource [static/], class path resource [public/], ServletContext resource [/], class path resource []]
[22:02:38.875] DEBUG [http-nio-20000-exec-5]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:39.254] DEBUG [http-nio-20000-exec-7]o.s.w.s.DispatcherServlet - GET "/", parameters={}
[22:02:39.254] DEBUG [http-nio-20000-exec-7]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public java.lang.String org.springframework.cloud.netflix.eureka.server.EurekaController.status(javax.servlet.http.HttpServletRequest,java.util.Map<java.lang.String, java.lang.Object>)
[22:02:39.255] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:39.257] DEBUG [http-nio-20000-exec-7]o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, application/signed-exchange;v=b3;q=0.9, */*;q=0.8]
[22:02:39.257] DEBUG [http-nio-20000-exec-7]o.s.w.s.v.f.FreeMarkerView - View name 'eureka/status', model {time=Sun Nov 29 22:02:39 CST 2020, basePath=/, dashboardPath=, currentTime=2020-11-29T22:02:39 +0800, upTime=00:00, environment=test, datacenter=default, registry=org.springframework.cloud.netflix.eureka.server.InstanceRegistry@54906dee, isBelowRenewThresold=false, replicas=[], apps=[{name=EUREKA-CLIENT, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:eureka-client:30002, url=http://192.168.31.38:30002/actuator/info, isHref=true}], isNotUp=false}]}, {name=RIBBON-CONSUMER, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:ribbon-consumer:31001, url=http://192.168.31.38:31001/actuator/info, isHref=true}], isNotUp=false}]}, {name=SHOP-CLOUD-ORDER-SERVICE, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:shop-cloud-order-service:10003, url=http://192.168.31.38:10003/actuator/info, isHref=true}], isNotUp=false}]}], statusInfo=com.netflix.eureka.util.StatusInfo@6739f537, instanceInfo={ipAddr=192.168.31.38, status=UP}, applicationStats={registered-replicas=, available-replicas=, unavailable-replicas=}, org.springframework.validation.BindingResult.registry=org.springframework.validation.BeanPropertyBindingResult: 0 errors, org.springframework.validation.BindingResult.statusInfo=org.springframework.validation.BeanPropertyBindingResult: 0 errors}
[22:02:39.257] DEBUG [http-nio-20000-exec-7]o.s.w.s.v.f.FreeMarkerView - Rendering [eureka/status.ftl]
[22:02:39.259] DEBUG [http-nio-20000-exec-7]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:39.313] DEBUG [http-nio-20000-exec-9]o.s.w.s.DispatcherServlet - GET "/favicon.ico", parameters={}
[22:02:39.313] DEBUG [http-nio-20000-exec-9]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [class path resource [META-INF/resources/], class path resource [resources/], class path resource [static/], class path resource [public/], ServletContext resource [/], class path resource []]
[22:02:39.315] DEBUG [http-nio-20000-exec-9]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:39.592] DEBUG [http-nio-20000-exec-2]o.s.w.s.DispatcherServlet - GET "/", parameters={}
[22:02:39.592] DEBUG [http-nio-20000-exec-2]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public java.lang.String org.springframework.cloud.netflix.eureka.server.EurekaController.status(javax.servlet.http.HttpServletRequest,java.util.Map<java.lang.String, java.lang.Object>)
[22:02:39.593] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:39.594] DEBUG [http-nio-20000-exec-2]o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, application/signed-exchange;v=b3;q=0.9, */*;q=0.8]
[22:02:39.594] DEBUG [http-nio-20000-exec-2]o.s.w.s.v.f.FreeMarkerView - View name 'eureka/status', model {time=Sun Nov 29 22:02:39 CST 2020, basePath=/, dashboardPath=, currentTime=2020-11-29T22:02:39 +0800, upTime=00:00, environment=test, datacenter=default, registry=org.springframework.cloud.netflix.eureka.server.InstanceRegistry@54906dee, isBelowRenewThresold=false, replicas=[], apps=[{name=EUREKA-CLIENT, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:eureka-client:30002, url=http://192.168.31.38:30002/actuator/info, isHref=true}], isNotUp=false}]}, {name=RIBBON-CONSUMER, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:ribbon-consumer:31001, url=http://192.168.31.38:31001/actuator/info, isHref=true}], isNotUp=false}]}, {name=SHOP-CLOUD-ORDER-SERVICE, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:shop-cloud-order-service:10003, url=http://192.168.31.38:10003/actuator/info, isHref=true}], isNotUp=false}]}], statusInfo=com.netflix.eureka.util.StatusInfo@3e981da4, instanceInfo={ipAddr=192.168.31.38, status=UP}, applicationStats={registered-replicas=, available-replicas=, unavailable-replicas=}, org.springframework.validation.BindingResult.registry=org.springframework.validation.BeanPropertyBindingResult: 0 errors, org.springframework.validation.BindingResult.statusInfo=org.springframework.validation.BeanPropertyBindingResult: 0 errors}
[22:02:39.594] DEBUG [http-nio-20000-exec-2]o.s.w.s.v.f.FreeMarkerView - Rendering [eureka/status.ftl]
[22:02:39.596] DEBUG [http-nio-20000-exec-2]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:39.646] DEBUG [http-nio-20000-exec-10]o.s.w.s.DispatcherServlet - GET "/favicon.ico", parameters={}
[22:02:39.646] DEBUG [http-nio-20000-exec-10]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [class path resource [META-INF/resources/], class path resource [resources/], class path resource [static/], class path resource [public/], ServletContext resource [/], class path resource []]
[22:02:39.647] DEBUG [http-nio-20000-exec-10]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:40.121] DEBUG [http-nio-20000-exec-1]o.s.w.s.DispatcherServlet - GET "/", parameters={}
[22:02:40.121] DEBUG [http-nio-20000-exec-1]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public java.lang.String org.springframework.cloud.netflix.eureka.server.EurekaController.status(javax.servlet.http.HttpServletRequest,java.util.Map<java.lang.String, java.lang.Object>)
[22:02:40.121] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:40.123] DEBUG [http-nio-20000-exec-1]o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, application/signed-exchange;v=b3;q=0.9, */*;q=0.8]
[22:02:40.123] DEBUG [http-nio-20000-exec-1]o.s.w.s.v.f.FreeMarkerView - View name 'eureka/status', model {time=Sun Nov 29 22:02:40 CST 2020, basePath=/, dashboardPath=, currentTime=2020-11-29T22:02:40 +0800, upTime=00:00, environment=test, datacenter=default, registry=org.springframework.cloud.netflix.eureka.server.InstanceRegistry@54906dee, isBelowRenewThresold=false, replicas=[], apps=[{name=EUREKA-CLIENT, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:eureka-client:30002, url=http://192.168.31.38:30002/actuator/info, isHref=true}], isNotUp=false}]}, {name=RIBBON-CONSUMER, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:ribbon-consumer:31001, url=http://192.168.31.38:31001/actuator/info, isHref=true}], isNotUp=false}]}, {name=SHOP-CLOUD-ORDER-SERVICE, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:shop-cloud-order-service:10003, url=http://192.168.31.38:10003/actuator/info, isHref=true}], isNotUp=false}]}], statusInfo=com.netflix.eureka.util.StatusInfo@78d4e393, instanceInfo={ipAddr=192.168.31.38, status=UP}, applicationStats={registered-replicas=, available-replicas=, unavailable-replicas=}, org.springframework.validation.BindingResult.registry=org.springframework.validation.BeanPropertyBindingResult: 0 errors, org.springframework.validation.BindingResult.statusInfo=org.springframework.validation.BeanPropertyBindingResult: 0 errors}
[22:02:40.123] DEBUG [http-nio-20000-exec-1]o.s.w.s.v.f.FreeMarkerView - Rendering [eureka/status.ftl]
[22:02:40.124] DEBUG [http-nio-20000-exec-1]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:40.174] DEBUG [http-nio-20000-exec-4]o.s.w.s.DispatcherServlet - GET "/favicon.ico", parameters={}
[22:02:40.174] DEBUG [http-nio-20000-exec-4]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [class path resource [META-INF/resources/], class path resource [resources/], class path resource [static/], class path resource [public/], ServletContext resource [/], class path resource []]
[22:02:40.176] DEBUG [http-nio-20000-exec-4]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:40.638] DEBUG [http-nio-20000-exec-3]o.s.w.s.DispatcherServlet - GET "/", parameters={}
[22:02:40.657] DEBUG [http-nio-20000-exec-3]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public java.lang.String org.springframework.cloud.netflix.eureka.server.EurekaController.status(javax.servlet.http.HttpServletRequest,java.util.Map<java.lang.String, java.lang.Object>)
[22:02:40.657] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:40.659] DEBUG [http-nio-20000-exec-3]o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, application/signed-exchange;v=b3;q=0.9, */*;q=0.8]
[22:02:40.659] DEBUG [http-nio-20000-exec-3]o.s.w.s.v.f.FreeMarkerView - View name 'eureka/status', model {time=Sun Nov 29 22:02:40 CST 2020, basePath=/, dashboardPath=, currentTime=2020-11-29T22:02:40 +0800, upTime=00:00, environment=test, datacenter=default, registry=org.springframework.cloud.netflix.eureka.server.InstanceRegistry@54906dee, isBelowRenewThresold=false, replicas=[], apps=[{name=EUREKA-CLIENT, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:eureka-client:30002, url=http://192.168.31.38:30002/actuator/info, isHref=true}], isNotUp=false}]}, {name=RIBBON-CONSUMER, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:ribbon-consumer:31001, url=http://192.168.31.38:31001/actuator/info, isHref=true}], isNotUp=false}]}, {name=SHOP-CLOUD-ORDER-SERVICE, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:shop-cloud-order-service:10003, url=http://192.168.31.38:10003/actuator/info, isHref=true}], isNotUp=false}]}], statusInfo=com.netflix.eureka.util.StatusInfo@1012bb03, instanceInfo={ipAddr=192.168.31.38, status=UP}, applicationStats={registered-replicas=, available-replicas=, unavailable-replicas=}, org.springframework.validation.BindingResult.registry=org.springframework.validation.BeanPropertyBindingResult: 0 errors, org.springframework.validation.BindingResult.statusInfo=org.springframework.validation.BeanPropertyBindingResult: 0 errors}
[22:02:40.659] DEBUG [http-nio-20000-exec-3]o.s.w.s.v.f.FreeMarkerView - Rendering [eureka/status.ftl]
[22:02:40.660] DEBUG [http-nio-20000-exec-3]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:40.710] DEBUG [http-nio-20000-exec-6]o.s.w.s.DispatcherServlet - GET "/favicon.ico", parameters={}
[22:02:40.710] DEBUG [http-nio-20000-exec-6]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [class path resource [META-INF/resources/], class path resource [resources/], class path resource [static/], class path resource [public/], ServletContext resource [/], class path resource []]
[22:02:40.712] DEBUG [http-nio-20000-exec-6]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:41.313] DEBUG [http-nio-20000-exec-8]o.s.w.s.DispatcherServlet - GET "/", parameters={}
[22:02:41.314] DEBUG [http-nio-20000-exec-8]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public java.lang.String org.springframework.cloud.netflix.eureka.server.EurekaController.status(javax.servlet.http.HttpServletRequest,java.util.Map<java.lang.String, java.lang.Object>)
[22:02:41.314] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:41.316] DEBUG [http-nio-20000-exec-8]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/status_zh.ftl]
[22:02:41.317] DEBUG [http-nio-20000-exec-8]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/status.ftl]
[22:02:41.317] DEBUG [http-nio-20000-exec-8]o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, application/signed-exchange;v=b3;q=0.9, */*;q=0.8]
[22:02:41.317] DEBUG [http-nio-20000-exec-8]o.s.w.s.v.f.FreeMarkerView - View name 'eureka/status', model {time=Sun Nov 29 22:02:41 CST 2020, basePath=/, dashboardPath=, currentTime=2020-11-29T22:02:41 +0800, upTime=00:00, environment=test, datacenter=default, registry=org.springframework.cloud.netflix.eureka.server.InstanceRegistry@54906dee, isBelowRenewThresold=false, replicas=[], apps=[{name=EUREKA-CLIENT, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:eureka-client:30002, url=http://192.168.31.38:30002/actuator/info, isHref=true}], isNotUp=false}]}, {name=RIBBON-CONSUMER, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:ribbon-consumer:31001, url=http://192.168.31.38:31001/actuator/info, isHref=true}], isNotUp=false}]}, {name=SHOP-CLOUD-ORDER-SERVICE, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:shop-cloud-order-service:10003, url=http://192.168.31.38:10003/actuator/info, isHref=true}], isNotUp=false}]}], statusInfo=com.netflix.eureka.util.StatusInfo@32edf9ee, instanceInfo={ipAddr=192.168.31.38, status=UP}, applicationStats={registered-replicas=, available-replicas=, unavailable-replicas=}, org.springframework.validation.BindingResult.registry=org.springframework.validation.BeanPropertyBindingResult: 0 errors, org.springframework.validation.BindingResult.statusInfo=org.springframework.validation.BeanPropertyBindingResult: 0 errors}
[22:02:41.317] DEBUG [http-nio-20000-exec-8]o.s.w.s.v.f.FreeMarkerView - Rendering [eureka/status.ftl]
[22:02:41.318] DEBUG [http-nio-20000-exec-8]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [spring_zh.ftl]
[22:02:41.319] DEBUG [http-nio-20000-exec-8]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/header_zh.ftl]
[22:02:41.319] DEBUG [http-nio-20000-exec-8]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/header.ftl]
[22:02:41.320] DEBUG [http-nio-20000-exec-8]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/navbar_zh.ftl]
[22:02:41.320] DEBUG [http-nio-20000-exec-8]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/navbar.ftl]
[22:02:41.321] DEBUG [http-nio-20000-exec-8]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:41.373] DEBUG [http-nio-20000-exec-5]o.s.w.s.DispatcherServlet - GET "/favicon.ico", parameters={}
[22:02:41.373] DEBUG [http-nio-20000-exec-5]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [class path resource [META-INF/resources/], class path resource [resources/], class path resource [static/], class path resource [public/], ServletContext resource [/], class path resource []]
[22:02:41.420] DEBUG [http-nio-20000-exec-5]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:41.830] DEBUG [http-nio-20000-exec-7]o.s.w.s.DispatcherServlet - GET "/", parameters={}
[22:02:41.831] DEBUG [http-nio-20000-exec-7]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public java.lang.String org.springframework.cloud.netflix.eureka.server.EurekaController.status(javax.servlet.http.HttpServletRequest,java.util.Map<java.lang.String, java.lang.Object>)
[22:02:41.831] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:41.832] DEBUG [http-nio-20000-exec-7]o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, application/signed-exchange;v=b3;q=0.9, */*;q=0.8]
[22:02:41.832] DEBUG [http-nio-20000-exec-7]o.s.w.s.v.f.FreeMarkerView - View name 'eureka/status', model {time=Sun Nov 29 22:02:41 CST 2020, basePath=/, dashboardPath=, currentTime=2020-11-29T22:02:41 +0800, upTime=00:00, environment=test, datacenter=default, registry=org.springframework.cloud.netflix.eureka.server.InstanceRegistry@54906dee, isBelowRenewThresold=false, replicas=[], apps=[{name=EUREKA-CLIENT, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:eureka-client:30002, url=http://192.168.31.38:30002/actuator/info, isHref=true}], isNotUp=false}]}, {name=RIBBON-CONSUMER, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:ribbon-consumer:31001, url=http://192.168.31.38:31001/actuator/info, isHref=true}], isNotUp=false}]}, {name=SHOP-CLOUD-ORDER-SERVICE, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:shop-cloud-order-service:10003, url=http://192.168.31.38:10003/actuator/info, isHref=true}], isNotUp=false}]}], statusInfo=com.netflix.eureka.util.StatusInfo@4bb1b3cc, instanceInfo={ipAddr=192.168.31.38, status=UP}, applicationStats={registered-replicas=, available-replicas=, unavailable-replicas=}, org.springframework.validation.BindingResult.registry=org.springframework.validation.BeanPropertyBindingResult: 0 errors, org.springframework.validation.BindingResult.statusInfo=org.springframework.validation.BeanPropertyBindingResult: 0 errors}
[22:02:41.832] DEBUG [http-nio-20000-exec-7]o.s.w.s.v.f.FreeMarkerView - Rendering [eureka/status.ftl]
[22:02:41.833] DEBUG [http-nio-20000-exec-7]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:41.888] DEBUG [http-nio-20000-exec-9]o.s.w.s.DispatcherServlet - GET "/favicon.ico", parameters={}
[22:02:41.888] DEBUG [http-nio-20000-exec-9]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [class path resource [META-INF/resources/], class path resource [resources/], class path resource [static/], class path resource [public/], ServletContext resource [/], class path resource []]
[22:02:41.890] DEBUG [http-nio-20000-exec-9]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:42.358] DEBUG [http-nio-20000-exec-2]o.s.w.s.DispatcherServlet - GET "/", parameters={}
[22:02:42.358] DEBUG [http-nio-20000-exec-2]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public java.lang.String org.springframework.cloud.netflix.eureka.server.EurekaController.status(javax.servlet.http.HttpServletRequest,java.util.Map<java.lang.String, java.lang.Object>)
[22:02:42.359] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:42.360] DEBUG [http-nio-20000-exec-2]o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, application/signed-exchange;v=b3;q=0.9, */*;q=0.8]
[22:02:42.360] DEBUG [http-nio-20000-exec-2]o.s.w.s.v.f.FreeMarkerView - View name 'eureka/status', model {time=Sun Nov 29 22:02:42 CST 2020, basePath=/, dashboardPath=, currentTime=2020-11-29T22:02:42 +0800, upTime=00:00, environment=test, datacenter=default, registry=org.springframework.cloud.netflix.eureka.server.InstanceRegistry@54906dee, isBelowRenewThresold=false, replicas=[], apps=[{name=EUREKA-CLIENT, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:eureka-client:30002, url=http://192.168.31.38:30002/actuator/info, isHref=true}], isNotUp=false}]}, {name=RIBBON-CONSUMER, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:ribbon-consumer:31001, url=http://192.168.31.38:31001/actuator/info, isHref=true}], isNotUp=false}]}, {name=SHOP-CLOUD-ORDER-SERVICE, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:shop-cloud-order-service:10003, url=http://192.168.31.38:10003/actuator/info, isHref=true}], isNotUp=false}]}], statusInfo=com.netflix.eureka.util.StatusInfo@69377741, instanceInfo={ipAddr=192.168.31.38, status=UP}, applicationStats={registered-replicas=, available-replicas=, unavailable-replicas=}, org.springframework.validation.BindingResult.registry=org.springframework.validation.BeanPropertyBindingResult: 0 errors, org.springframework.validation.BindingResult.statusInfo=org.springframework.validation.BeanPropertyBindingResult: 0 errors}
[22:02:42.360] DEBUG [http-nio-20000-exec-2]o.s.w.s.v.f.FreeMarkerView - Rendering [eureka/status.ftl]
[22:02:42.361] DEBUG [http-nio-20000-exec-2]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:42.413] DEBUG [http-nio-20000-exec-10]o.s.w.s.DispatcherServlet - GET "/favicon.ico", parameters={}
[22:02:42.413] DEBUG [http-nio-20000-exec-10]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [class path resource [META-INF/resources/], class path resource [resources/], class path resource [static/], class path resource [public/], ServletContext resource [/], class path resource []]
[22:02:42.416] DEBUG [http-nio-20000-exec-10]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:43.126] DEBUG [http-nio-20000-exec-1]o.s.w.s.DispatcherServlet - GET "/", parameters={}
[22:02:43.126] DEBUG [http-nio-20000-exec-1]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public java.lang.String org.springframework.cloud.netflix.eureka.server.EurekaController.status(javax.servlet.http.HttpServletRequest,java.util.Map<java.lang.String, java.lang.Object>)
[22:02:43.127] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:43.128] DEBUG [http-nio-20000-exec-1]o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, application/signed-exchange;v=b3;q=0.9, */*;q=0.8]
[22:02:43.129] DEBUG [http-nio-20000-exec-1]o.s.w.s.v.f.FreeMarkerView - View name 'eureka/status', model {time=Sun Nov 29 22:02:43 CST 2020, basePath=/, dashboardPath=, currentTime=2020-11-29T22:02:43 +0800, upTime=00:00, environment=test, datacenter=default, registry=org.springframework.cloud.netflix.eureka.server.InstanceRegistry@54906dee, isBelowRenewThresold=false, replicas=[], apps=[{name=EUREKA-CLIENT, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:eureka-client:30002, url=http://192.168.31.38:30002/actuator/info, isHref=true}], isNotUp=false}]}, {name=RIBBON-CONSUMER, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:ribbon-consumer:31001, url=http://192.168.31.38:31001/actuator/info, isHref=true}], isNotUp=false}]}, {name=SHOP-CLOUD-ORDER-SERVICE, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:shop-cloud-order-service:10003, url=http://192.168.31.38:10003/actuator/info, isHref=true}], isNotUp=false}]}], statusInfo=com.netflix.eureka.util.StatusInfo@65a3df4e, instanceInfo={ipAddr=192.168.31.38, status=UP}, applicationStats={registered-replicas=, available-replicas=, unavailable-replicas=}, org.springframework.validation.BindingResult.registry=org.springframework.validation.BeanPropertyBindingResult: 0 errors, org.springframework.validation.BindingResult.statusInfo=org.springframework.validation.BeanPropertyBindingResult: 0 errors}
[22:02:43.129] DEBUG [http-nio-20000-exec-1]o.s.w.s.v.f.FreeMarkerView - Rendering [eureka/status.ftl]
[22:02:43.130] DEBUG [http-nio-20000-exec-1]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:43.184] DEBUG [http-nio-20000-exec-4]o.s.w.s.DispatcherServlet - GET "/favicon.ico", parameters={}
[22:02:43.184] DEBUG [http-nio-20000-exec-4]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [class path resource [META-INF/resources/], class path resource [resources/], class path resource [static/], class path resource [public/], ServletContext resource [/], class path resource []]
[22:02:43.186] DEBUG [http-nio-20000-exec-4]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:48.292] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:02:48.292] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:48.293] WARN  [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - DS: Registry: lease doesn't exist, registering resource: SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001
[22:02:48.293] WARN  [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Not Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001
[22:02:48.300] DEBUG [http-nio-20000-exec-5]c.n.d.u.DeserializerStringCache - clearing global-level cache with size 1
[22:02:48.300] DEBUG [http-nio-20000-exec-5]c.n.d.u.DeserializerStringCache - clearing app-level serialization cache with size 8
[22:02:48.300] DEBUG [http-nio-20000-exec-5]c.n.e.r.ApplicationResource - Registering instance 192.168.31.38:shop-cloud-item-service:10001 (replication=null)
[22:02:48.300] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - register SHOP-CLOUD-ITEM-SERVICE, vip shop-cloud-item-service, leaseDuration 90, isReplication false
[22:02:48.300] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - No previous lease information found; it is new registration
[22:02:48.300] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:02:48.301] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.AlwaysMatchInstanceStatusRule - Returning the default instance status UP for instance 192.168.31.38:shop-cloud-item-service:10001
[22:02:48.301] DEBUG [http-nio-20000-exec-5]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-ITEM-SERVICE V1 JSON, full
[22:02:48.301] DEBUG [http-nio-20000-exec-5]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-ITEM-SERVICE V1 JSON, compact
[22:02:48.301] DEBUG [http-nio-20000-exec-5]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 JSON, full
[22:02:48.301] DEBUG [http-nio-20000-exec-5]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 JSON, compact
[22:02:48.301] DEBUG [http-nio-20000-exec-5]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, full
[22:02:48.301] DEBUG [http-nio-20000-exec-5]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, compact
[22:02:48.301] DEBUG [http-nio-20000-exec-5]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP shop-cloud-item-service V1 JSON, full
[22:02:48.301] DEBUG [http-nio-20000-exec-5]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP shop-cloud-item-service V1 JSON, full
[22:02:48.301] DEBUG [http-nio-20000-exec-5]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-ITEM-SERVICE V2 JSON, full
[22:02:48.301] DEBUG [http-nio-20000-exec-5]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-ITEM-SERVICE V2 JSON, compact
[22:02:48.301] DEBUG [http-nio-20000-exec-5]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 JSON, full
[22:02:48.301] DEBUG [http-nio-20000-exec-5]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 JSON, compact
[22:02:48.301] DEBUG [http-nio-20000-exec-5]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, full
[22:02:48.301] DEBUG [http-nio-20000-exec-5]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, compact
[22:02:48.301] DEBUG [http-nio-20000-exec-5]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP shop-cloud-item-service V2 JSON, full
[22:02:48.301] DEBUG [http-nio-20000-exec-5]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP shop-cloud-item-service V2 JSON, full
[22:02:48.301] DEBUG [http-nio-20000-exec-5]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-ITEM-SERVICE V1 XML, full
[22:02:48.301] DEBUG [http-nio-20000-exec-5]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-ITEM-SERVICE V1 XML, compact
[22:02:48.301] DEBUG [http-nio-20000-exec-5]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 XML, full
[22:02:48.301] DEBUG [http-nio-20000-exec-5]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 XML, compact
[22:02:48.301] DEBUG [http-nio-20000-exec-5]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, full
[22:02:48.301] DEBUG [http-nio-20000-exec-5]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, compact
[22:02:48.301] DEBUG [http-nio-20000-exec-5]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP shop-cloud-item-service V1 XML, full
[22:02:48.301] DEBUG [http-nio-20000-exec-5]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP shop-cloud-item-service V1 XML, full
[22:02:48.301] DEBUG [http-nio-20000-exec-5]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-ITEM-SERVICE V2 XML, full
[22:02:48.301] DEBUG [http-nio-20000-exec-5]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-ITEM-SERVICE V2 XML, compact
[22:02:48.301] DEBUG [http-nio-20000-exec-5]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 XML, full
[22:02:48.301] DEBUG [http-nio-20000-exec-5]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 XML, compact
[22:02:48.301] DEBUG [http-nio-20000-exec-5]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, full
[22:02:48.301] DEBUG [http-nio-20000-exec-5]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, compact
[22:02:48.301] DEBUG [http-nio-20000-exec-5]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP shop-cloud-item-service V2 XML, full
[22:02:48.301] DEBUG [http-nio-20000-exec-5]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP shop-cloud-item-service V2 XML, full
[22:02:48.302] INFO  [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Registered instance SHOP-CLOUD-ITEM-SERVICE/192.168.31.38:shop-cloud-item-service:10001 with status UP (replication=false)
[22:02:49.850] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:02:49.850] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:49.851] WARN  [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - DS: Registry: lease doesn't exist, registering resource: RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000
[22:02:49.851] WARN  [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Not Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000
[22:02:49.856] DEBUG [http-nio-20000-exec-10]c.n.d.u.DeserializerStringCache - clearing global-level cache with size 1
[22:02:49.856] DEBUG [http-nio-20000-exec-10]c.n.d.u.DeserializerStringCache - clearing app-level serialization cache with size 8
[22:02:49.856] DEBUG [http-nio-20000-exec-10]c.n.e.r.ApplicationResource - Registering instance 192.168.31.38:ribbon-consumer:31000 (replication=null)
[22:02:49.856] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - register RIBBON-CONSUMER, vip ribbon-consumer, leaseDuration 90, isReplication false
[22:02:49.856] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - No previous lease information found; it is new registration
[22:02:49.856] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:02:49.856] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.AlwaysMatchInstanceStatusRule - Returning the default instance status UP for instance 192.168.31.38:ribbon-consumer:31000
[22:02:49.857] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 JSON, full
[22:02:49.857] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 JSON, compact
[22:02:49.857] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 JSON, full
[22:02:49.857] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 JSON, compact
[22:02:49.857] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, full
[22:02:49.857] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, compact
[22:02:49.857] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V1 JSON, full
[22:02:49.857] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V1 JSON, full
[22:02:49.857] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 JSON, full
[22:02:49.857] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 JSON, compact
[22:02:49.857] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 JSON, full
[22:02:49.857] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 JSON, compact
[22:02:49.857] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, full
[22:02:49.857] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, compact
[22:02:49.857] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V2 JSON, full
[22:02:49.857] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V2 JSON, full
[22:02:49.857] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 XML, full
[22:02:49.857] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V1 XML, compact
[22:02:49.857] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 XML, full
[22:02:49.857] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 XML, compact
[22:02:49.857] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, full
[22:02:49.857] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, compact
[22:02:49.857] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V1 XML, full
[22:02:49.857] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V1 XML, full
[22:02:49.857] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 XML, full
[22:02:49.857] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application RIBBON-CONSUMER V2 XML, compact
[22:02:49.857] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 XML, full
[22:02:49.857] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 XML, compact
[22:02:49.857] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, full
[22:02:49.857] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, compact
[22:02:49.857] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP ribbon-consumer V2 XML, full
[22:02:49.857] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP ribbon-consumer V2 XML, full
[22:02:49.857] INFO  [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Registered instance RIBBON-CONSUMER/192.168.31.38:ribbon-consumer:31000 with status UP (replication=false)
[22:02:51.416] DEBUG [http-nio-20000-exec-1]o.s.w.s.DispatcherServlet - GET "/", parameters={}
[22:02:51.416] DEBUG [http-nio-20000-exec-1]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public java.lang.String org.springframework.cloud.netflix.eureka.server.EurekaController.status(javax.servlet.http.HttpServletRequest,java.util.Map<java.lang.String, java.lang.Object>)
[22:02:51.417] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:51.418] DEBUG [http-nio-20000-exec-1]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/status_zh.ftl]
[22:02:51.419] DEBUG [http-nio-20000-exec-1]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/status.ftl]
[22:02:51.419] DEBUG [http-nio-20000-exec-1]o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, application/signed-exchange;v=b3;q=0.9, */*;q=0.8]
[22:02:51.419] DEBUG [http-nio-20000-exec-1]o.s.w.s.v.f.FreeMarkerView - View name 'eureka/status', model {time=Sun Nov 29 22:02:51 CST 2020, basePath=/, dashboardPath=, currentTime=2020-11-29T22:02:51 +0800, upTime=00:00, environment=test, datacenter=default, registry=org.springframework.cloud.netflix.eureka.server.InstanceRegistry@54906dee, isBelowRenewThresold=false, replicas=[], apps=[{name=EUREKA-CLIENT, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:eureka-client:30002, url=http://192.168.31.38:30002/actuator/info, isHref=true}], isNotUp=false}]}, {name=RIBBON-CONSUMER, amiCounts=[n/a=2], zoneCounts=[=2], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:ribbon-consumer:31000, url=http://192.168.31.38:31000/actuator/info, isHref=true}, {id=192.168.31.38:ribbon-consumer:31001, url=http://192.168.31.38:31001/actuator/info, isHref=true}], isNotUp=false}]}, {name=SHOP-CLOUD-ITEM-SERVICE, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:shop-cloud-item-service:10001, url=http://192.168.31.38:10001/actuator/info, isHref=true}], isNotUp=false}]}, {name=SHOP-CLOUD-ORDER-SERVICE, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:shop-cloud-order-service:10003, url=http://192.168.31.38:10003/actuator/info, isHref=true}], isNotUp=false}]}], statusInfo=com.netflix.eureka.util.StatusInfo@197e9a14, instanceInfo={ipAddr=192.168.31.38, status=UP}, applicationStats={registered-replicas=, available-replicas=, unavailable-replicas=}, org.springframework.validation.BindingResult.registry=org.springframework.validation.BeanPropertyBindingResult: 0 errors, org.springframework.validation.BindingResult.statusInfo=org.springframework.validation.BeanPropertyBindingResult: 0 errors}
[22:02:51.420] DEBUG [http-nio-20000-exec-1]o.s.w.s.v.f.FreeMarkerView - Rendering [eureka/status.ftl]
[22:02:51.420] DEBUG [http-nio-20000-exec-1]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [spring_zh.ftl]
[22:02:51.421] DEBUG [http-nio-20000-exec-1]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/header_zh.ftl]
[22:02:51.421] DEBUG [http-nio-20000-exec-1]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/header.ftl]
[22:02:51.421] DEBUG [http-nio-20000-exec-1]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/navbar_zh.ftl]
[22:02:51.422] DEBUG [http-nio-20000-exec-1]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/navbar.ftl]
[22:02:51.423] DEBUG [http-nio-20000-exec-1]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:51.471] DEBUG [http-nio-20000-exec-4]o.s.w.s.DispatcherServlet - GET "/favicon.ico", parameters={}
[22:02:51.472] DEBUG [http-nio-20000-exec-4]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [class path resource [META-INF/resources/], class path resource [resources/], class path resource [static/], class path resource [public/], ServletContext resource [/], class path resource []]
[22:02:51.515] DEBUG [http-nio-20000-exec-4]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:51.934] DEBUG [http-nio-20000-exec-3]o.s.w.s.DispatcherServlet - GET "/", parameters={}
[22:02:51.935] DEBUG [http-nio-20000-exec-3]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public java.lang.String org.springframework.cloud.netflix.eureka.server.EurekaController.status(javax.servlet.http.HttpServletRequest,java.util.Map<java.lang.String, java.lang.Object>)
[22:02:51.936] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:51.937] DEBUG [http-nio-20000-exec-3]o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, application/signed-exchange;v=b3;q=0.9, */*;q=0.8]
[22:02:51.937] DEBUG [http-nio-20000-exec-3]o.s.w.s.v.f.FreeMarkerView - View name 'eureka/status', model {time=Sun Nov 29 22:02:51 CST 2020, basePath=/, dashboardPath=, currentTime=2020-11-29T22:02:51 +0800, upTime=00:00, environment=test, datacenter=default, registry=org.springframework.cloud.netflix.eureka.server.InstanceRegistry@54906dee, isBelowRenewThresold=false, replicas=[], apps=[{name=EUREKA-CLIENT, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:eureka-client:30002, url=http://192.168.31.38:30002/actuator/info, isHref=true}], isNotUp=false}]}, {name=RIBBON-CONSUMER, amiCounts=[n/a=2], zoneCounts=[=2], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:ribbon-consumer:31000, url=http://192.168.31.38:31000/actuator/info, isHref=true}, {id=192.168.31.38:ribbon-consumer:31001, url=http://192.168.31.38:31001/actuator/info, isHref=true}], isNotUp=false}]}, {name=SHOP-CLOUD-ITEM-SERVICE, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:shop-cloud-item-service:10001, url=http://192.168.31.38:10001/actuator/info, isHref=true}], isNotUp=false}]}, {name=SHOP-CLOUD-ORDER-SERVICE, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:shop-cloud-order-service:10003, url=http://192.168.31.38:10003/actuator/info, isHref=true}], isNotUp=false}]}], statusInfo=com.netflix.eureka.util.StatusInfo@398e27a2, instanceInfo={ipAddr=192.168.31.38, status=UP}, applicationStats={registered-replicas=, available-replicas=, unavailable-replicas=}, org.springframework.validation.BindingResult.registry=org.springframework.validation.BeanPropertyBindingResult: 0 errors, org.springframework.validation.BindingResult.statusInfo=org.springframework.validation.BeanPropertyBindingResult: 0 errors}
[22:02:51.937] DEBUG [http-nio-20000-exec-3]o.s.w.s.v.f.FreeMarkerView - Rendering [eureka/status.ftl]
[22:02:51.938] DEBUG [http-nio-20000-exec-3]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:51.987] DEBUG [http-nio-20000-exec-6]o.s.w.s.DispatcherServlet - GET "/favicon.ico", parameters={}
[22:02:51.988] DEBUG [http-nio-20000-exec-6]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [class path resource [META-INF/resources/], class path resource [resources/], class path resource [static/], class path resource [public/], ServletContext resource [/], class path resource []]
[22:02:51.990] DEBUG [http-nio-20000-exec-6]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:52.124] DEBUG [http-nio-20000-exec-8]o.s.w.s.DispatcherServlet - GET "/", parameters={}
[22:02:52.124] DEBUG [http-nio-20000-exec-8]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public java.lang.String org.springframework.cloud.netflix.eureka.server.EurekaController.status(javax.servlet.http.HttpServletRequest,java.util.Map<java.lang.String, java.lang.Object>)
[22:02:52.125] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:52.126] DEBUG [http-nio-20000-exec-8]o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, application/signed-exchange;v=b3;q=0.9, */*;q=0.8]
[22:02:52.127] DEBUG [http-nio-20000-exec-8]o.s.w.s.v.f.FreeMarkerView - View name 'eureka/status', model {time=Sun Nov 29 22:02:52 CST 2020, basePath=/, dashboardPath=, currentTime=2020-11-29T22:02:52 +0800, upTime=00:00, environment=test, datacenter=default, registry=org.springframework.cloud.netflix.eureka.server.InstanceRegistry@54906dee, isBelowRenewThresold=false, replicas=[], apps=[{name=EUREKA-CLIENT, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:eureka-client:30002, url=http://192.168.31.38:30002/actuator/info, isHref=true}], isNotUp=false}]}, {name=RIBBON-CONSUMER, amiCounts=[n/a=2], zoneCounts=[=2], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:ribbon-consumer:31000, url=http://192.168.31.38:31000/actuator/info, isHref=true}, {id=192.168.31.38:ribbon-consumer:31001, url=http://192.168.31.38:31001/actuator/info, isHref=true}], isNotUp=false}]}, {name=SHOP-CLOUD-ITEM-SERVICE, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:shop-cloud-item-service:10001, url=http://192.168.31.38:10001/actuator/info, isHref=true}], isNotUp=false}]}, {name=SHOP-CLOUD-ORDER-SERVICE, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:shop-cloud-order-service:10003, url=http://192.168.31.38:10003/actuator/info, isHref=true}], isNotUp=false}]}], statusInfo=com.netflix.eureka.util.StatusInfo@54b4b89b, instanceInfo={ipAddr=192.168.31.38, status=UP}, applicationStats={registered-replicas=, available-replicas=, unavailable-replicas=}, org.springframework.validation.BindingResult.registry=org.springframework.validation.BeanPropertyBindingResult: 0 errors, org.springframework.validation.BindingResult.statusInfo=org.springframework.validation.BeanPropertyBindingResult: 0 errors}
[22:02:52.127] DEBUG [http-nio-20000-exec-8]o.s.w.s.v.f.FreeMarkerView - Rendering [eureka/status.ftl]
[22:02:52.128] DEBUG [http-nio-20000-exec-8]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:52.178] DEBUG [http-nio-20000-exec-5]o.s.w.s.DispatcherServlet - GET "/favicon.ico", parameters={}
[22:02:52.178] DEBUG [http-nio-20000-exec-5]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [class path resource [META-INF/resources/], class path resource [resources/], class path resource [static/], class path resource [public/], ServletContext resource [/], class path resource []]
[22:02:52.180] DEBUG [http-nio-20000-exec-5]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:02:54.522] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:02:54.522] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:02:54.522] WARN  [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - DS: Registry: lease doesn't exist, registering resource: SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002
[22:02:54.522] WARN  [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Not Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002
[22:02:54.527] DEBUG [http-nio-20000-exec-10]c.n.d.u.DeserializerStringCache - clearing global-level cache with size 1
[22:02:54.527] DEBUG [http-nio-20000-exec-10]c.n.d.u.DeserializerStringCache - clearing app-level serialization cache with size 8
[22:02:54.527] DEBUG [http-nio-20000-exec-10]c.n.e.r.ApplicationResource - Registering instance 192.168.31.38:shop-cloud-user-service:10002 (replication=null)
[22:02:54.527] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - register SHOP-CLOUD-USER-SERVICE, vip shop-cloud-user-service, leaseDuration 90, isReplication false
[22:02:54.527] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - No previous lease information found; it is new registration
[22:02:54.527] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:02:54.527] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.AlwaysMatchInstanceStatusRule - Returning the default instance status UP for instance 192.168.31.38:shop-cloud-user-service:10002
[22:02:54.527] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-USER-SERVICE V1 JSON, full
[22:02:54.527] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-USER-SERVICE V1 JSON, compact
[22:02:54.527] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 JSON, full
[22:02:54.527] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 JSON, compact
[22:02:54.527] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, full
[22:02:54.527] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 JSON, compact
[22:02:54.527] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP shop-cloud-user-service V1 JSON, full
[22:02:54.527] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP shop-cloud-user-service V1 JSON, full
[22:02:54.527] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-USER-SERVICE V2 JSON, full
[22:02:54.527] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-USER-SERVICE V2 JSON, compact
[22:02:54.527] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 JSON, full
[22:02:54.527] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 JSON, compact
[22:02:54.527] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, full
[22:02:54.527] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 JSON, compact
[22:02:54.527] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP shop-cloud-user-service V2 JSON, full
[22:02:54.527] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP shop-cloud-user-service V2 JSON, full
[22:02:54.527] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-USER-SERVICE V1 XML, full
[22:02:54.527] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-USER-SERVICE V1 XML, compact
[22:02:54.527] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 XML, full
[22:02:54.527] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V1 XML, compact
[22:02:54.527] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, full
[22:02:54.527] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V1 XML, compact
[22:02:54.527] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP shop-cloud-user-service V1 XML, full
[22:02:54.527] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP shop-cloud-user-service V1 XML, full
[22:02:54.528] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-USER-SERVICE V2 XML, full
[22:02:54.528] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application SHOP-CLOUD-USER-SERVICE V2 XML, compact
[22:02:54.528] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 XML, full
[22:02:54.528] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS V2 XML, compact
[22:02:54.528] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, full
[22:02:54.528] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : Application ALL_APPS_DELTA V2 XML, compact
[22:02:54.528] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : VIP shop-cloud-user-service V2 XML, full
[22:02:54.528] DEBUG [http-nio-20000-exec-10]c.n.e.r.ResponseCacheImpl - Invalidating the response cache key : SVIP shop-cloud-user-service V2 XML, full
[22:02:54.528] INFO  [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Registered instance SHOP-CLOUD-USER-SERVICE/192.168.31.38:shop-cloud-user-service:10002 with status UP (replication=false)
[22:03:00.007] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:03:00.007] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:03:00.007] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 6
[22:03:00.008] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The instance id 192.168.31.38:ribbon-consumer:31001 is found with status UP and actiontype ADDED
[22:03:00.008] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The instance id 192.168.31.38:eureka-client:30002 is found with status UP and actiontype ADDED
[22:03:00.008] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The instance id 192.168.31.38:shop-cloud-order-service:10003 is found with status UP and actiontype ADDED
[22:03:00.008] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The instance id 192.168.31.38:shop-cloud-item-service:10001 is found with status UP and actiontype ADDED
[22:03:00.008] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The instance id 192.168.31.38:ribbon-consumer:31000 is found with status UP and actiontype ADDED
[22:03:00.008] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The instance id 192.168.31.38:shop-cloud-user-service:10002 is found with status UP and actiontype ADDED
[22:03:00.028] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_6_
[22:03:00.028] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:03:00.028] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:03:00.029] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_6_
[22:03:00.289] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:03:00.289] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:03:00.289] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:03:00.290] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:03:00.290] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:03:03.763] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:03:03.763] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:03:03.763] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:03:03.764] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:03:03.764] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:03:07.720] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:03:07.720] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:03:07.721] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:03:07.721] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:03:07.721] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:03:18.310] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:03:18.310] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:03:18.310] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:03:18.310] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:03:18.310] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:03:19.863] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:03:19.863] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:03:19.864] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:03:19.864] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:03:19.864] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:03:24.533] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:03:24.533] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:03:24.533] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:03:24.533] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:03:24.533] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:03:29.958] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[22:03:29.958] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[22:03:29.958] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - DS: lease expiration is currently disabled.
[22:03:30.011] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:03:30.011] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:03:30.011] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:03:30.298] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:03:30.298] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:03:30.298] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:03:30.298] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:03:30.299] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:03:33.774] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:03:33.774] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:03:33.774] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:03:33.774] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:03:33.774] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:03:36.235] DEBUG [http-nio-20000-exec-10]o.s.w.s.DispatcherServlet - GET "/", parameters={}
[22:03:36.235] DEBUG [http-nio-20000-exec-10]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public java.lang.String org.springframework.cloud.netflix.eureka.server.EurekaController.status(javax.servlet.http.HttpServletRequest,java.util.Map<java.lang.String, java.lang.Object>)
[22:03:36.235] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:03:36.236] DEBUG [http-nio-20000-exec-10]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/status_zh.ftl]
[22:03:36.237] DEBUG [http-nio-20000-exec-10]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/status.ftl]
[22:03:36.237] DEBUG [http-nio-20000-exec-10]o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, application/signed-exchange;v=b3;q=0.9, */*;q=0.8]
[22:03:36.237] DEBUG [http-nio-20000-exec-10]o.s.w.s.v.f.FreeMarkerView - View name 'eureka/status', model {time=Sun Nov 29 22:03:36 CST 2020, basePath=/, dashboardPath=, currentTime=2020-11-29T22:03:36 +0800, upTime=00:01, environment=test, datacenter=default, registry=org.springframework.cloud.netflix.eureka.server.InstanceRegistry@54906dee, isBelowRenewThresold=false, replicas=[], apps=[{name=EUREKA-CLIENT, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:eureka-client:30002, url=http://192.168.31.38:30002/actuator/info, isHref=true}], isNotUp=false}]}, {name=RIBBON-CONSUMER, amiCounts=[n/a=2], zoneCounts=[=2], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:ribbon-consumer:31000, url=http://192.168.31.38:31000/actuator/info, isHref=true}, {id=192.168.31.38:ribbon-consumer:31001, url=http://192.168.31.38:31001/actuator/info, isHref=true}], isNotUp=false}]}, {name=SHOP-CLOUD-ITEM-SERVICE, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:shop-cloud-item-service:10001, url=http://192.168.31.38:10001/actuator/info, isHref=true}], isNotUp=false}]}, {name=SHOP-CLOUD-ORDER-SERVICE, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:shop-cloud-order-service:10003, url=http://192.168.31.38:10003/actuator/info, isHref=true}], isNotUp=false}]}, {name=SHOP-CLOUD-USER-SERVICE, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:shop-cloud-user-service:10002, url=http://192.168.31.38:10002/actuator/info, isHref=true}], isNotUp=false}]}], statusInfo=com.netflix.eureka.util.StatusInfo@24a79f3a, instanceInfo={ipAddr=192.168.31.38, status=UP}, applicationStats={registered-replicas=, available-replicas=, unavailable-replicas=}, org.springframework.validation.BindingResult.registry=org.springframework.validation.BeanPropertyBindingResult: 0 errors, org.springframework.validation.BindingResult.statusInfo=org.springframework.validation.BeanPropertyBindingResult: 0 errors}
[22:03:36.237] DEBUG [http-nio-20000-exec-10]o.s.w.s.v.f.FreeMarkerView - Rendering [eureka/status.ftl]
[22:03:36.238] DEBUG [http-nio-20000-exec-10]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [spring_zh.ftl]
[22:03:36.238] DEBUG [http-nio-20000-exec-10]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/header_zh.ftl]
[22:03:36.239] DEBUG [http-nio-20000-exec-10]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/header.ftl]
[22:03:36.239] DEBUG [http-nio-20000-exec-10]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/navbar_zh.ftl]
[22:03:36.240] DEBUG [http-nio-20000-exec-10]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/navbar.ftl]
[22:03:36.240] DEBUG [http-nio-20000-exec-10]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:03:36.361] DEBUG [http-nio-20000-exec-9]o.s.w.s.DispatcherServlet - GET "/favicon.ico", parameters={}
[22:03:36.362] DEBUG [http-nio-20000-exec-9]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [class path resource [META-INF/resources/], class path resource [resources/], class path resource [static/], class path resource [public/], ServletContext resource [/], class path resource []]
[22:03:36.413] DEBUG [http-nio-20000-exec-9]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:03:37.729] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:03:37.729] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:03:37.730] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:03:37.730] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:03:37.730] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:03:48.317] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:03:48.317] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:03:48.317] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:03:48.317] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:03:48.317] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:03:49.873] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:03:49.873] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:03:49.873] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:03:49.873] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:03:49.873] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:03:54.542] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:03:54.542] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:03:54.542] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:03:54.542] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:03:54.542] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:04:00.012] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:04:00.012] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:04:00.012] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:04:00.308] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:04:00.308] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:04:00.308] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:04:00.308] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:04:00.308] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:04:03.784] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:04:03.784] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:04:03.784] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:04:03.784] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:04:03.785] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:04:07.738] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:04:07.738] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:04:07.738] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:04:07.738] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:04:07.738] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:04:18.325] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:04:18.325] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:04:18.325] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:04:18.325] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:04:18.325] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:04:19.879] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:04:19.879] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:04:19.879] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:04:19.879] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:04:19.879] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:04:24.551] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:04:24.551] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:04:24.551] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:04:24.552] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:04:24.552] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:04:29.962] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[22:04:29.963] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[22:04:30.018] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:04:30.018] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:04:30.018] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:04:30.314] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:04:30.314] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:04:30.314] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:04:30.314] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:04:30.314] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:04:33.791] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:04:33.791] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:04:33.791] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:04:33.791] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:04:33.791] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:04:37.745] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:04:37.745] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:04:37.745] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:04:37.745] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:04:37.745] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:04:48.331] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:04:48.332] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:04:48.332] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:04:48.332] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:04:48.332] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:04:49.890] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:04:49.890] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:04:49.890] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:04:49.890] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:04:49.890] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:04:54.558] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:04:54.558] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:04:54.559] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:04:54.559] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:04:54.559] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:05:00.022] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:05:00.022] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:05:00.022] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:05:00.323] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:05:00.323] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:05:00.323] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:05:00.323] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:05:00.323] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:05:03.801] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:05:03.801] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:05:03.801] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:05:03.801] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:05:03.801] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:05:07.751] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:05:07.751] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:05:07.752] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:05:07.752] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:05:07.752] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:05:18.340] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:05:18.340] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:05:18.340] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:05:18.340] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:05:18.340] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:05:19.898] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:05:19.898] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:05:19.899] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:05:19.899] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:05:19.899] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:05:24.567] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:05:24.567] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:05:24.567] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:05:24.567] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:05:24.567] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:05:29.966] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[22:05:29.966] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[22:05:30.026] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:05:30.026] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:05:30.026] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:05:30.332] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:05:30.333] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:05:30.333] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:05:30.333] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:05:30.333] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:05:33.809] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:05:33.809] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:05:33.809] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:05:33.809] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:05:33.809] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:05:37.757] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:05:37.757] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:05:37.757] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:05:37.757] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:05:37.757] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:05:48.346] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:05:48.346] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:05:48.346] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:05:48.346] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:05:48.346] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:05:49.908] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:05:49.908] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:05:49.908] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:05:49.908] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:05:49.908] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:05:54.573] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:05:54.573] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:05:54.573] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:05:54.573] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:05:54.573] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:06:00.031] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:06:00.032] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:06:00.032] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:06:00.338] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:06:00.338] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:06:00.338] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:06:00.338] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:06:00.338] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:06:03.818] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:06:03.819] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:06:03.819] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:06:03.819] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:06:03.819] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:06:07.766] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:06:07.766] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:06:07.766] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:06:07.766] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:06:07.766] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:06:18.354] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:06:18.362] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:06:18.362] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:06:18.362] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:06:18.362] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:06:19.920] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:06:19.921] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:06:19.921] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:06:19.921] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:06:19.921] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:06:24.580] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:06:24.580] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:06:24.581] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:06:24.581] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:06:24.581] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:06:29.972] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[22:06:29.973] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[22:06:30.036] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:06:30.036] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:06:30.037] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[22:06:30.037] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_6_
[22:06:30.037] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:06:30.037] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:06:30.039] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_6_
[22:06:30.347] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:06:30.347] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:06:30.347] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:06:30.347] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:06:30.347] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:06:33.831] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:06:33.831] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:06:33.831] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:06:33.831] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:06:33.831] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:06:37.779] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:06:37.779] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:06:37.779] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:06:37.779] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:06:37.779] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:06:48.372] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:06:48.372] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:06:48.372] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:06:48.373] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:06:48.373] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:06:49.931] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:06:49.931] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:06:49.932] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:06:49.932] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:06:49.932] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:06:54.591] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:06:54.591] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:06:54.591] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:06:54.591] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:06:54.591] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:07:00.044] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:07:00.044] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:07:00.044] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:07:00.359] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:07:00.359] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:07:00.360] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:07:00.360] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:07:00.360] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:07:03.844] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:07:03.844] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:07:03.844] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:07:03.844] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:07:03.844] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:07:07.786] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:07:07.786] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:07:07.786] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:07:07.787] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:07:07.787] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:07:18.378] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:07:18.378] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:07:18.378] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:07:18.379] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:07:18.379] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:07:19.943] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:07:19.943] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:07:19.943] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:07:19.943] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:07:19.943] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:07:24.600] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:07:24.600] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:07:24.600] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:07:24.600] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:07:24.600] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:07:29.981] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[22:07:29.981] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[22:07:30.048] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:07:30.048] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:07:30.048] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:07:30.367] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:07:30.367] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:07:30.367] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:07:30.368] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:07:30.368] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:07:33.855] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:07:33.855] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:07:33.855] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:07:33.855] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:07:33.855] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:07:37.795] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:07:37.795] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:07:37.795] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:07:37.795] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:07:37.795] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:07:48.387] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:07:48.387] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:07:48.387] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:07:48.387] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:07:48.387] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:07:49.949] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:07:49.949] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:07:49.949] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:07:49.949] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:07:49.949] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:07:54.608] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:07:54.608] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:07:54.608] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:07:54.608] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:07:54.608] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:08:00.050] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:08:00.050] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:08:00.050] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:08:00.377] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:08:00.377] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:08:00.377] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:08:00.377] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:08:00.377] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:08:03.863] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:08:03.863] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:08:03.863] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:08:03.863] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:08:03.863] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:08:07.806] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:08:07.806] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:08:07.806] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:08:07.806] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:08:07.806] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:08:18.393] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:08:18.393] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:08:18.393] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:08:18.394] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:08:18.394] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:08:19.958] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:08:19.958] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:08:19.959] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:08:19.959] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:08:19.959] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:08:24.618] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:08:24.618] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:08:24.618] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:08:24.618] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:08:24.618] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:08:29.984] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[22:08:29.984] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[22:08:30.054] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:08:30.054] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:08:30.054] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:08:30.387] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:08:30.387] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:08:30.387] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:08:30.387] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:08:30.387] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:08:33.874] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:08:33.874] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:08:33.874] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:08:33.874] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:08:33.874] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:08:37.813] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:08:37.813] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:08:37.813] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:08:37.813] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:08:37.814] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:08:48.402] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:08:48.402] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:08:48.402] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:08:48.402] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:08:48.403] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:08:49.966] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:08:49.966] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:08:49.966] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:08:49.966] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:08:49.967] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:08:54.627] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:08:54.627] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:08:54.627] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:08:54.627] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:08:54.627] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:09:00.059] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:09:00.059] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:09:00.059] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:09:00.396] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:09:00.396] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:09:00.396] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:09:00.396] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:09:00.397] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:09:03.885] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:09:03.885] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:09:03.885] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:09:03.885] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:09:03.885] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:09:07.822] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:09:07.822] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:09:07.822] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:09:07.822] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:09:07.822] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:09:18.410] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:09:18.410] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:09:18.410] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:09:18.411] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:09:18.411] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:09:19.974] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:09:19.975] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:09:19.975] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:09:19.975] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:09:19.975] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:09:24.636] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:09:24.636] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:09:24.636] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:09:24.636] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:09:24.636] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:09:29.990] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[22:09:29.990] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[22:09:30.060] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:09:30.061] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:09:30.061] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[22:09:30.061] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_6_
[22:09:30.061] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:09:30.062] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:09:30.063] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_6_
[22:09:30.404] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:09:30.404] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:09:30.405] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:09:30.405] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:09:30.405] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:09:33.892] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:09:33.892] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:09:33.892] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:09:33.892] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:09:33.892] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:09:37.830] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:09:37.830] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:09:37.830] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:09:37.830] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:09:37.830] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:09:48.419] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:09:48.419] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:09:48.419] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:09:48.419] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:09:48.419] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:09:49.982] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:09:49.982] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:09:49.982] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:09:49.982] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:09:49.982] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:09:54.644] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:09:54.644] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:09:54.644] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:09:54.644] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:09:54.645] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:10:00.064] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:10:00.065] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:10:00.065] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:10:00.410] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:10:00.410] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:10:00.410] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:10:00.410] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:10:00.410] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:10:03.900] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:10:03.900] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:10:03.901] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:10:03.901] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:10:03.901] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:10:07.837] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:10:07.837] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:10:07.837] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:10:07.837] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:10:07.837] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:10:18.426] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:10:18.426] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:10:18.426] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:10:18.426] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:10:18.426] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:10:19.991] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:10:19.991] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:10:19.992] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:10:19.992] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:10:19.992] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:10:24.652] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:10:24.652] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:10:24.652] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:10:24.652] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:10:24.652] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:10:29.994] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[22:10:29.995] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[22:10:30.069] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:10:30.070] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:10:30.070] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:10:30.417] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:10:30.417] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:10:30.417] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:10:30.417] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:10:30.417] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:10:33.910] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:10:33.911] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:10:33.911] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:10:33.911] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:10:33.911] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:10:37.847] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:10:37.847] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:10:37.847] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:10:37.847] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:10:37.847] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:10:48.432] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:10:48.432] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:10:48.433] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:10:48.433] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:10:48.433] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:10:50.003] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:10:50.003] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:10:50.003] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:10:50.003] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:10:50.004] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:10:54.660] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:10:54.660] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:10:54.660] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:10:54.660] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:10:54.660] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:11:00.071] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:11:00.071] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:11:00.071] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:11:00.425] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:11:00.425] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:11:00.425] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:11:00.425] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:11:00.426] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:11:03.919] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:11:03.919] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:11:03.919] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:11:03.919] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:11:03.919] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:11:07.855] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:11:07.855] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:11:07.855] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:11:07.855] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:11:07.855] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:11:18.440] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:11:18.440] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:11:18.440] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:11:18.440] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:11:18.440] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:11:20.013] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:11:20.013] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:11:20.014] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:11:20.014] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:11:20.014] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:11:24.665] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:11:24.665] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:11:24.666] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:11:24.666] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:11:24.666] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:11:29.996] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[22:11:29.996] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[22:11:30.072] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:11:30.072] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:11:30.072] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:11:30.432] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:11:30.433] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:11:30.433] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:11:30.433] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:11:30.433] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:11:33.925] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:11:33.925] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:11:33.926] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:11:33.926] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:11:33.926] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:11:37.864] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:11:37.864] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:11:37.864] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:11:37.864] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:11:37.864] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:11:48.445] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:11:48.445] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:11:48.446] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:11:48.446] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:11:48.446] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:11:50.023] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:11:50.023] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:11:50.023] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:11:50.023] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:11:50.023] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:11:54.670] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:11:54.670] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:11:54.670] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:11:54.670] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:11:54.670] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:12:00.073] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:12:00.073] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:12:00.073] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:12:00.440] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:12:00.440] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:12:00.440] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:12:00.440] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:12:00.440] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:12:03.934] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:12:03.934] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:12:03.934] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:12:03.934] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:12:03.934] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:12:07.870] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:12:07.871] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:12:07.871] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:12:07.871] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:12:07.871] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:12:18.453] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:12:18.453] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:12:18.453] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:12:18.453] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:12:18.453] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:12:20.030] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:12:20.030] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:12:20.030] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:12:20.030] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:12:20.030] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:12:24.679] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:12:24.679] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:12:24.679] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:12:24.679] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:12:24.679] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:12:29.838] DEBUG [Eureka-PeerNodesUpdater]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[22:12:29.838] WARN  [Eureka-PeerNodesUpdater]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[22:12:30.000] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[22:12:30.001] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[22:12:30.076] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:12:30.076] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:12:30.076] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[22:12:30.076] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_6_
[22:12:30.077] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:12:30.077] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:12:30.078] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_6_
[22:12:30.451] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:12:30.451] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:12:30.451] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:12:30.451] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:12:30.451] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:12:33.944] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:12:33.944] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:12:33.945] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:12:33.945] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:12:33.945] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:12:37.880] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:12:37.880] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:12:37.880] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:12:37.880] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:12:37.880] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:12:48.462] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:12:48.462] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:12:48.462] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:12:48.462] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:12:48.462] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:12:50.041] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:12:50.041] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:12:50.041] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:12:50.041] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:12:50.041] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:12:54.685] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:12:54.685] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:12:54.685] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:12:54.685] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:12:54.685] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:13:00.079] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:13:00.079] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:13:00.079] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:13:00.458] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:13:00.458] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:13:00.458] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:13:00.458] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:13:00.458] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:13:03.952] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:13:03.952] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:13:03.952] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:13:03.952] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:13:03.953] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:13:07.887] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:13:07.887] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:13:07.888] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:13:07.888] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:13:07.888] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:13:18.471] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:13:18.471] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:13:18.471] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:13:18.471] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:13:18.471] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:13:20.047] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:13:20.047] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:13:20.047] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:13:20.047] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:13:20.048] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:13:24.694] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:13:24.694] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:13:24.694] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:13:24.694] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:13:24.694] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:13:30.005] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[22:13:30.006] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[22:13:30.084] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:13:30.084] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:13:30.084] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:13:30.463] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:13:30.463] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:13:30.463] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:13:30.463] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:13:30.463] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:13:33.962] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:13:33.962] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:13:33.962] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:13:33.962] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:13:33.962] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:13:37.895] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:13:37.896] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:13:37.896] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:13:37.896] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:13:37.896] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:13:48.481] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:13:48.481] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:13:48.481] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:13:48.481] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:13:48.481] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:13:50.055] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:13:50.055] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:13:50.055] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:13:50.055] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:13:50.055] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:13:54.700] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:13:54.700] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:13:54.700] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:13:54.700] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:13:54.700] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:14:00.086] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:14:00.086] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:14:00.086] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:14:00.472] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:14:00.472] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:14:00.473] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:14:00.473] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:14:00.473] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:14:03.970] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:14:03.970] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:14:03.970] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:14:03.970] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:14:03.970] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:14:07.903] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:14:07.903] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:14:07.903] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:14:07.903] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:14:07.903] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:14:18.487] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:14:18.487] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:14:18.487] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:14:18.487] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:14:18.487] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:14:20.065] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:14:20.065] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:14:20.065] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:14:20.065] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:14:20.065] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:14:24.707] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:14:24.707] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:14:24.708] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:14:24.708] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:14:24.708] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:14:30.006] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[22:14:30.006] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[22:14:30.090] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:14:30.090] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:14:30.090] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:14:30.482] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:14:30.482] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:14:30.482] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:14:30.482] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:14:30.482] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:14:33.983] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:14:33.983] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:14:33.983] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:14:33.983] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:14:33.983] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:14:37.910] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:14:37.910] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:14:37.910] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:14:37.910] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:14:37.910] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:14:48.494] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:14:48.494] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:14:48.494] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:14:48.494] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:14:48.494] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:14:50.072] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:14:50.072] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:14:50.072] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:14:50.072] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:14:50.072] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:14:54.716] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:14:54.717] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:14:54.717] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:14:54.717] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:14:54.717] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:15:00.096] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:15:00.096] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:15:00.096] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:15:00.490] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:15:00.490] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:15:00.490] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:15:00.490] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:15:00.490] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:15:03.996] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:15:03.996] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:15:03.996] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:15:03.996] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:15:03.996] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:15:07.919] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:15:07.920] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:15:07.920] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:15:07.920] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:15:07.920] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:15:18.503] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:15:18.503] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:15:18.504] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:15:18.504] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:15:18.504] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:15:20.179] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:15:20.179] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:15:20.179] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:15:20.179] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:15:20.179] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:15:24.727] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:15:24.727] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:15:24.727] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:15:24.727] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:15:24.727] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:15:30.012] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[22:15:30.012] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[22:15:30.099] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:15:30.099] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:15:30.100] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[22:15:30.100] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_6_
[22:15:30.100] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:15:30.100] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:15:30.101] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_6_
[22:15:30.499] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:15:30.499] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:15:30.499] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:15:30.499] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:15:30.499] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:15:34.006] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:15:34.006] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:15:34.006] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:15:34.006] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:15:34.006] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:15:37.930] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:15:37.930] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:15:37.930] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:15:37.930] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:15:37.930] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:15:48.511] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:15:48.511] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:15:48.511] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:15:48.511] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:15:48.511] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:15:50.189] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:15:50.190] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:15:50.190] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:15:50.190] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:15:50.190] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:15:54.736] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:15:54.736] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:15:54.736] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:15:54.736] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:15:54.736] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:16:00.104] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:16:00.104] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:16:00.104] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:16:00.505] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:16:00.505] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:16:00.505] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:16:00.505] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:16:00.505] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:16:04.014] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:16:04.014] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:16:04.014] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:16:04.014] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:16:04.014] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:16:07.938] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:16:07.938] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:16:07.938] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:16:07.939] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:16:07.939] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:16:18.520] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:16:18.520] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:16:18.520] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:16:18.520] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:16:18.521] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:16:20.197] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:16:20.197] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:16:20.198] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:16:20.198] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:16:20.198] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:16:24.743] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:16:24.743] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:16:24.743] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:16:24.743] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:16:24.743] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:16:30.017] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[22:16:30.017] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[22:16:30.107] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:16:30.107] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:16:30.108] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:16:30.513] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:16:30.513] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:16:30.513] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:16:30.513] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:16:30.513] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:16:34.023] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:16:34.023] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:16:34.024] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:16:34.024] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:16:34.024] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:16:37.946] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:16:37.946] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:16:37.946] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:16:37.947] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:16:37.947] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:16:48.530] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:16:48.530] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:16:48.531] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:16:48.531] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:16:48.531] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:16:50.206] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:16:50.206] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:16:50.207] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:16:50.207] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:16:50.207] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:16:54.753] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:16:54.754] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:16:54.754] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:16:54.754] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:16:54.754] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:17:00.109] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:17:00.109] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:17:00.109] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:17:00.522] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:17:00.522] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:17:00.522] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:17:00.522] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:17:00.522] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:17:04.034] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:17:04.034] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:17:04.034] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:17:04.034] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:17:04.034] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:17:07.954] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:17:07.955] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:17:07.955] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:17:07.955] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:17:07.955] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:17:18.539] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:17:18.540] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:17:18.540] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:17:18.540] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:17:18.540] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:17:20.217] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:17:20.217] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:17:20.217] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:17:20.217] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:17:20.217] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:17:24.762] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:17:24.762] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:17:24.762] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:17:24.763] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:17:24.763] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:17:29.867] INFO  [ReplicaAwareInstanceRegistry - RenewalThresholdUpdater]c.n.e.r.PeerAwareInstanceRegistryImpl - Current renewal threshold is : 11
[22:17:30.020] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[22:17:30.020] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[22:17:30.113] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:17:30.113] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:17:30.113] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:17:30.528] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:17:30.528] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:17:30.528] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:17:30.528] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:17:30.528] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:17:34.040] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:17:34.040] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:17:34.040] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:17:34.040] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:17:34.040] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:17:37.964] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:17:37.964] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:17:37.965] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:17:37.965] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:17:37.965] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:17:48.547] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:17:48.547] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:17:48.547] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:17:48.547] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:17:48.547] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:17:50.225] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:17:50.225] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:17:50.226] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:17:50.226] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:17:50.226] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:17:54.769] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:17:54.770] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:17:54.770] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:17:54.770] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:17:54.770] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:18:00.116] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:18:00.116] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:18:00.116] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:18:00.535] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:18:00.535] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:18:00.535] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:18:00.535] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:18:00.535] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:18:04.049] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:18:04.049] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:18:04.049] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:18:04.049] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:18:04.049] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:18:07.970] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:18:07.970] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:18:07.970] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:18:07.970] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:18:07.970] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:18:18.555] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:18:18.555] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:18:18.555] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:18:18.556] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:18:18.556] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:18:20.238] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:18:20.238] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:18:20.238] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:18:20.238] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:18:20.238] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:18:24.779] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:18:24.779] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:18:24.779] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:18:24.779] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:18:24.779] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:18:30.027] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 5ms
[22:18:30.027] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[22:18:30.119] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:18:30.120] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:18:30.120] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[22:18:30.120] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_6_
[22:18:30.120] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:18:30.120] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:18:30.121] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_6_
[22:18:30.542] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:18:30.542] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:18:30.542] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:18:30.542] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:18:30.542] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:18:34.060] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:18:34.060] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:18:34.060] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:18:34.060] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:18:34.060] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:18:37.979] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:18:37.979] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:18:37.979] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:18:37.979] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:18:37.979] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:18:48.564] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:18:48.564] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:18:48.565] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:18:48.565] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:18:48.565] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:18:50.247] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:18:50.247] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:18:50.247] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:18:50.247] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:18:50.248] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:18:54.787] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:18:54.787] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:18:54.787] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:18:54.788] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:18:54.788] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:19:00.123] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:19:00.123] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:19:00.123] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:19:00.551] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:19:00.551] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:19:00.551] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:19:00.551] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:19:00.551] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:19:04.070] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:19:04.070] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:19:04.070] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:19:04.070] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:19:04.070] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:19:07.986] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:19:07.986] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:19:07.986] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:19:07.986] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:19:07.986] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:19:18.571] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:19:18.571] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:19:18.571] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:19:18.571] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:19:18.571] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:19:20.257] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:19:20.257] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:19:20.257] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:19:20.257] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:19:20.257] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:19:24.797] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:19:24.797] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:19:24.797] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:19:24.797] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:19:24.797] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:19:30.032] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[22:19:30.032] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[22:19:30.129] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:19:30.129] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:19:30.129] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:19:30.559] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:19:30.559] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:19:30.559] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:19:30.559] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:19:30.559] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:19:34.082] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:19:34.082] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:19:34.082] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:19:34.082] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:19:34.082] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:19:37.992] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:19:37.992] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:19:37.992] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:19:37.992] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:19:37.992] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:19:48.577] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:19:48.577] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:19:48.577] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:19:48.577] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:19:48.577] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:19:50.268] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:19:50.268] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:19:50.268] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:19:50.268] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:19:50.269] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:19:54.804] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:19:54.805] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:19:54.805] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:19:54.805] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:19:54.805] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:20:00.134] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:20:00.134] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:20:00.134] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:20:00.568] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:20:00.568] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:20:00.568] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:20:00.568] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:20:00.568] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:20:04.094] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:20:04.094] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:20:04.094] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:20:04.094] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:20:04.094] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:20:08.002] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:20:08.002] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:20:08.002] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:20:08.002] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:20:08.002] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:20:18.583] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:20:18.583] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:20:18.583] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:20:18.583] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:20:18.583] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:20:20.275] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:20:20.275] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:20:20.275] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:20:20.275] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:20:20.275] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:20:24.812] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:20:24.812] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:20:24.813] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:20:24.813] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:20:24.813] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:20:30.036] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[22:20:30.036] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[22:20:30.136] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:20:30.136] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:20:30.136] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:20:30.577] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:20:30.577] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:20:30.577] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:20:30.577] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:20:30.577] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:20:34.104] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:20:34.105] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:20:34.105] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:20:34.105] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:20:34.105] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:20:38.007] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:20:38.007] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:20:38.007] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:20:38.007] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:20:38.007] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:20:48.589] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:20:48.589] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:20:48.589] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:20:48.589] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:20:48.589] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:20:50.284] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:20:50.284] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:20:50.284] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:20:50.284] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:20:50.284] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:20:54.820] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:20:54.820] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:20:54.820] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:20:54.820] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:20:54.820] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:21:00.138] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:21:00.138] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:21:00.138] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:21:00.583] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:21:00.583] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:21:00.583] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:21:00.583] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:21:00.583] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:21:04.114] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:21:04.115] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:21:04.115] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:21:04.115] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:21:04.115] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:21:08.013] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:21:08.013] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:21:08.013] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:21:08.013] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:21:08.013] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:21:18.594] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:21:18.594] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:21:18.594] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:21:18.594] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:21:18.594] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:21:20.295] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:21:20.296] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:21:20.296] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:21:20.296] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:21:20.296] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:21:24.827] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:21:24.827] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:21:24.828] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:21:24.828] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:21:24.828] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:21:30.040] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 3ms
[22:21:30.040] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[22:21:30.141] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:21:30.142] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:21:30.142] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[22:21:30.142] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_6_
[22:21:30.143] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:21:30.143] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:21:30.144] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_6_
[22:21:30.589] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:21:30.589] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:21:30.589] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:21:30.589] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:21:30.589] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:21:34.120] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:21:34.120] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:21:34.120] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:21:34.120] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:21:34.120] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:21:38.018] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:21:38.018] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:21:38.018] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:21:38.018] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:21:38.018] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:21:48.595] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:21:48.595] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:21:48.595] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:21:48.595] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:21:48.595] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:21:50.302] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:21:50.302] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:21:50.302] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:21:50.302] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:21:50.302] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:21:54.829] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:21:54.829] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:21:54.829] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:21:54.829] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:21:54.829] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:22:00.142] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:22:00.142] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:22:00.142] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:22:00.591] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:22:00.592] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:22:00.592] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:22:00.592] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:22:00.592] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:22:04.127] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:22:04.127] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:22:04.127] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:22:04.127] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:22:04.127] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:22:08.022] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:22:08.022] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:22:08.023] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:22:08.023] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:22:08.023] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:22:18.602] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:22:18.602] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:22:18.602] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:22:18.602] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:22:18.602] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:22:20.310] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:22:20.310] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:22:20.310] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:22:20.310] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:22:20.310] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:22:24.836] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:22:24.836] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:22:24.837] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:22:24.837] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:22:24.837] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:22:29.848] DEBUG [Eureka-PeerNodesUpdater]c.n.d.e.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
[22:22:29.848] WARN  [Eureka-PeerNodesUpdater]c.n.e.c.PeerEurekaNodes - The replica size seems to be empty. Check the route 53 DNS Registry
[22:22:30.042] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[22:22:30.042] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[22:22:30.144] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:22:30.144] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:22:30.144] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:22:30.598] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:22:30.598] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:22:30.598] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:22:30.598] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:22:30.598] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:22:34.135] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:22:34.135] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:22:34.135] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:22:34.135] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:22:34.135] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:22:38.027] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:22:38.027] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:22:38.027] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:22:38.027] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:22:38.027] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:22:48.611] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:22:48.611] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:22:48.611] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:22:48.611] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:22:48.611] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:22:50.319] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:22:50.320] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:22:50.320] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:22:50.320] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:22:50.320] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:22:54.843] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:22:54.843] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:22:54.843] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:22:54.843] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:22:54.843] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:23:00.148] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:23:00.148] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:23:00.148] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:23:00.603] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:23:00.603] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:23:00.603] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:23:00.603] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:23:00.604] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:23:04.146] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:23:04.146] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:23:04.147] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:23:04.147] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:23:04.147] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:23:08.035] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:23:08.035] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:23:08.035] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:23:08.035] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:23:08.035] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:23:18.617] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:23:18.617] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:23:18.618] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:23:18.618] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:23:18.618] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:23:20.331] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:23:20.331] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:23:20.331] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:23:20.331] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:23:20.331] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:23:24.851] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:23:24.851] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:23:24.851] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:23:24.851] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:23:24.851] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:23:30.044] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[22:23:30.044] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[22:23:30.149] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:23:30.149] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:23:30.149] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:23:30.612] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:23:30.612] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:23:30.612] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:23:30.612] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:23:30.612] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:23:34.155] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:23:34.155] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:23:34.155] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:23:34.155] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:23:34.155] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:23:38.043] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:23:38.043] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:23:38.043] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:23:38.044] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:23:38.044] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:23:48.626] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:23:48.626] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:23:48.626] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:23:48.626] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:23:48.626] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:23:50.336] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:23:50.336] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:23:50.336] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:23:50.336] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:23:50.337] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:23:54.860] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:23:54.860] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:23:54.860] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:23:54.860] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:23:54.860] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:24:00.150] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:24:00.150] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:24:00.150] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:24:00.621] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:24:00.621] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:24:00.621] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:24:00.621] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:24:00.621] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:24:04.164] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:24:04.164] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:24:04.164] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:24:04.164] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:24:04.164] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:24:08.049] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:24:08.049] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:24:08.049] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:24:08.049] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:24:08.049] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:24:18.631] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:24:18.631] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:24:18.631] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:24:18.631] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:24:18.631] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:24:20.346] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:24:20.347] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:24:20.347] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:24:20.347] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:24:20.347] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:24:24.868] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:24:24.869] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:24:24.869] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:24:24.869] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:24:24.869] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:24:27.319] DEBUG [http-nio-20000-exec-1]o.s.w.s.DispatcherServlet - GET "/", parameters={}
[22:24:27.320] DEBUG [http-nio-20000-exec-1]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public java.lang.String org.springframework.cloud.netflix.eureka.server.EurekaController.status(javax.servlet.http.HttpServletRequest,java.util.Map<java.lang.String, java.lang.Object>)
[22:24:27.321] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:24:27.322] DEBUG [http-nio-20000-exec-1]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/status_zh.ftl]
[22:24:27.323] DEBUG [http-nio-20000-exec-1]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/status.ftl]
[22:24:27.323] DEBUG [http-nio-20000-exec-1]o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, application/signed-exchange;v=b3;q=0.9, */*;q=0.8]
[22:24:27.323] DEBUG [http-nio-20000-exec-1]o.s.w.s.v.f.FreeMarkerView - View name 'eureka/status', model {time=Sun Nov 29 22:24:27 CST 2020, basePath=/, dashboardPath=, currentTime=2020-11-29T22:24:27 +0800, upTime=00:22, environment=test, datacenter=default, registry=org.springframework.cloud.netflix.eureka.server.InstanceRegistry@54906dee, isBelowRenewThresold=false, replicas=[], apps=[{name=EUREKA-CLIENT, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:eureka-client:30002, url=http://192.168.31.38:30002/actuator/info, isHref=true}], isNotUp=false}]}, {name=RIBBON-CONSUMER, amiCounts=[n/a=2], zoneCounts=[=2], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:ribbon-consumer:31000, url=http://192.168.31.38:31000/actuator/info, isHref=true}, {id=192.168.31.38:ribbon-consumer:31001, url=http://192.168.31.38:31001/actuator/info, isHref=true}], isNotUp=false}]}, {name=SHOP-CLOUD-ITEM-SERVICE, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:shop-cloud-item-service:10001, url=http://192.168.31.38:10001/actuator/info, isHref=true}], isNotUp=false}]}, {name=SHOP-CLOUD-ORDER-SERVICE, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:shop-cloud-order-service:10003, url=http://192.168.31.38:10003/actuator/info, isHref=true}], isNotUp=false}]}, {name=SHOP-CLOUD-USER-SERVICE, amiCounts=[n/a=1], zoneCounts=[=1], instanceInfos=[{status=UP, instances=[{id=192.168.31.38:shop-cloud-user-service:10002, url=http://192.168.31.38:10002/actuator/info, isHref=true}], isNotUp=false}]}], statusInfo=com.netflix.eureka.util.StatusInfo@5a58c614, instanceInfo={ipAddr=192.168.31.38, status=UP}, applicationStats={registered-replicas=, available-replicas=, unavailable-replicas=}, org.springframework.validation.BindingResult.registry=org.springframework.validation.BeanPropertyBindingResult: 0 errors, org.springframework.validation.BindingResult.statusInfo=org.springframework.validation.BeanPropertyBindingResult: 0 errors}
[22:24:27.323] DEBUG [http-nio-20000-exec-1]o.s.w.s.v.f.FreeMarkerView - Rendering [eureka/status.ftl]
[22:24:27.323] DEBUG [http-nio-20000-exec-1]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [spring_zh.ftl]
[22:24:27.324] DEBUG [http-nio-20000-exec-1]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/header_zh.ftl]
[22:24:27.324] DEBUG [http-nio-20000-exec-1]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/header.ftl]
[22:24:27.325] DEBUG [http-nio-20000-exec-1]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/navbar_zh.ftl]
[22:24:27.325] DEBUG [http-nio-20000-exec-1]o.s.u.f.SpringTemplateLoader - Looking for FreeMarker template with name [eureka/navbar.ftl]
[22:24:27.326] DEBUG [http-nio-20000-exec-1]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:24:27.353] DEBUG [http-nio-20000-exec-3]o.s.w.s.DispatcherServlet - GET "/eureka/js/wro.js", parameters={}
[22:24:27.353] DEBUG [http-nio-20000-exec-8]o.s.w.s.DispatcherServlet - GET "/eureka/css/wro.css", parameters={}
[22:24:27.354] DEBUG [http-nio-20000-exec-3]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler ["classpath:/META-INF/resources/", "classpath:/resources/", "classpath:/static/", "classpath:/public/", "/"]
[22:24:27.354] DEBUG [http-nio-20000-exec-8]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler ["classpath:/META-INF/resources/", "classpath:/resources/", "classpath:/static/", "classpath:/public/", "/"]
[22:24:27.355] DEBUG [http-nio-20000-exec-3]o.s.w.s.DispatcherServlet - Completed 304 NOT_MODIFIED
[22:24:27.355] DEBUG [http-nio-20000-exec-8]o.s.w.s.DispatcherServlet - Completed 304 NOT_MODIFIED
[22:24:27.368] DEBUG [http-nio-20000-exec-6]o.s.w.s.DispatcherServlet - GET "/eureka/images/spring-logo-eureka.png", parameters={}
[22:24:27.369] DEBUG [http-nio-20000-exec-6]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler ["classpath:/META-INF/resources/", "classpath:/resources/", "classpath:/static/", "classpath:/public/", "/"]
[22:24:27.369] DEBUG [http-nio-20000-exec-2]o.s.w.s.DispatcherServlet - GET "/eureka/fonts/montserrat-webfont.woff", parameters={}
[22:24:27.369] DEBUG [http-nio-20000-exec-5]o.s.w.s.DispatcherServlet - GET "/eureka/fonts/varela_round-webfont.woff", parameters={}
[22:24:27.370] DEBUG [http-nio-20000-exec-2]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler ["classpath:/META-INF/resources/", "classpath:/resources/", "classpath:/static/", "classpath:/public/", "/"]
[22:24:27.370] DEBUG [http-nio-20000-exec-5]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler ["classpath:/META-INF/resources/", "classpath:/resources/", "classpath:/static/", "classpath:/public/", "/"]
[22:24:27.370] DEBUG [http-nio-20000-exec-6]o.s.w.s.DispatcherServlet - Completed 304 NOT_MODIFIED
[22:24:27.371] DEBUG [http-nio-20000-exec-5]o.s.w.s.DispatcherServlet - Completed 304 NOT_MODIFIED
[22:24:27.371] DEBUG [http-nio-20000-exec-2]o.s.w.s.DispatcherServlet - Completed 304 NOT_MODIFIED
[22:24:27.405] DEBUG [http-nio-20000-exec-7]o.s.w.s.DispatcherServlet - GET "/favicon.ico", parameters={}
[22:24:27.406] DEBUG [http-nio-20000-exec-7]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [class path resource [META-INF/resources/], class path resource [resources/], class path resource [static/], class path resource [public/], ServletContext resource [/], class path resource []]
[22:24:27.446] DEBUG [http-nio-20000-exec-7]o.s.w.s.DispatcherServlet - Completed 200 OK
[22:24:27.659] DEBUG [http-nio-20000-exec-9]o.s.w.s.DispatcherServlet - GET "/eureka/js/wro.js.map", parameters={}
[22:24:27.659] DEBUG [http-nio-20000-exec-9]o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler ["classpath:/META-INF/resources/", "classpath:/resources/", "classpath:/static/", "classpath:/public/", "/"]
[22:24:27.661] DEBUG [http-nio-20000-exec-9]o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
[22:24:27.661] DEBUG [http-nio-20000-exec-9]o.s.w.s.DispatcherServlet - Completed 404 NOT_FOUND
[22:24:27.662] DEBUG [http-nio-20000-exec-9]o.s.w.s.DispatcherServlet - "ERROR" dispatch for GET "/error", parameters={}
[22:24:27.662] DEBUG [http-nio-20000-exec-9]o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
[22:24:27.663] DEBUG [http-nio-20000-exec-9]o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/json, application/*+json, application/xml, text/xml, application/*+xml, application/xml, text/xml, application/*+xml]
[22:24:27.664] DEBUG [http-nio-20000-exec-9]o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{timestamp=Sun Nov 29 22:24:27 CST 2020, status=404, error=Not Found, message=No message available,  (truncated)...]
[22:24:27.664] DEBUG [http-nio-20000-exec-9]o.s.w.s.DispatcherServlet - Exiting from "ERROR" dispatch, status 404
[22:24:30.047] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 1ms
[22:24:30.048] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[22:24:30.151] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:24:30.151] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:24:30.151] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[22:24:30.151] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_6_
[22:24:30.151] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:24:30.151] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:24:30.152] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_6_
[22:24:30.630] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:24:30.630] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:24:30.630] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:24:30.630] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:24:30.630] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:24:34.175] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:24:34.176] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:24:34.176] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:24:34.176] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:24:34.176] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:24:38.056] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:24:38.056] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:24:38.056] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:24:38.056] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:24:38.056] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:24:48.639] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:24:48.639] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:24:48.639] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:24:48.639] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:24:48.639] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:24:50.354] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:24:50.354] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:24:50.354] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:24:50.354] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:24:50.354] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:24:54.875] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:24:54.875] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:24:54.875] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:24:54.875] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:24:54.875] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:25:00.156] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:25:00.156] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:25:00.156] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:25:00.639] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:25:00.639] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:25:00.639] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:25:00.639] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:25:00.639] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:25:04.186] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:25:04.186] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:25:04.186] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:25:04.186] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:25:04.186] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:25:08.063] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:25:08.063] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:25:08.063] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:25:08.063] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:25:08.063] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:25:18.645] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:25:18.645] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:25:18.645] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:25:18.646] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:25:18.646] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:25:20.363] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:25:20.363] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:25:20.363] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:25:20.363] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:25:20.363] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:25:24.882] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:25:24.882] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:25:24.882] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:25:24.882] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:25:24.882] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:25:30.049] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[22:25:30.050] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[22:25:30.157] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:25:30.157] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:25:30.157] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:25:30.647] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:25:30.647] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:25:30.647] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:25:30.647] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:25:30.647] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:25:34.195] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:25:34.195] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:25:34.195] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:25:34.196] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:25:34.196] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:25:38.072] DEBUG [http-nio-20000-exec-4]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:25:38.072] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:25:38.072] DEBUG [http-nio-20000-exec-4]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:25:38.072] DEBUG [http-nio-20000-exec-4]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:25:38.072] DEBUG [http-nio-20000-exec-4]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:25:48.652] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:25:48.652] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:25:48.653] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:25:48.653] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:25:48.653] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:25:50.367] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:25:50.367] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:25:50.367] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:25:50.367] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:25:50.367] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:25:54.890] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:25:54.890] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:25:54.891] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:25:54.891] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:25:54.891] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:26:00.159] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:26:00.159] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:26:00.159] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:26:00.653] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:26:00.653] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:26:00.653] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:26:00.653] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:26:00.653] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:26:04.205] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:26:04.205] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:26:04.205] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:26:04.205] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:26:04.205] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:26:08.079] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:26:08.079] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:26:08.079] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:26:08.079] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:26:08.079] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:26:18.660] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:26:18.660] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:26:18.660] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:26:18.661] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:26:18.661] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:26:20.376] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:26:20.376] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:26:20.376] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:26:20.376] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:26:20.376] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:26:24.895] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:26:24.895] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:26:24.896] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:26:24.896] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:26:24.896] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:26:30.052] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[22:26:30.052] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[22:26:30.163] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:26:30.163] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:26:30.163] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:26:30.661] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:26:30.661] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:26:30.661] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:26:30.661] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:26:30.661] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:26:34.214] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:26:34.214] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:26:34.214] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:26:34.214] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:26:34.214] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:26:38.087] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:26:38.087] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:26:38.087] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:26:38.088] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:26:38.088] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:26:48.668] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:26:48.668] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:26:48.668] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:26:48.668] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:26:48.668] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:26:50.383] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:26:50.383] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:26:50.383] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:26:50.383] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:26:50.383] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:26:54.903] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:26:54.903] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:26:54.903] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:26:54.903] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:26:54.903] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:27:00.168] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:27:00.168] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:27:00.168] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:27:00.666] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:27:00.666] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:27:00.666] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:27:00.666] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:27:00.666] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:27:04.222] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:27:04.222] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:27:04.222] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:27:04.222] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:27:04.222] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:27:08.094] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:27:08.094] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:27:08.094] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:27:08.094] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:27:08.095] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:27:18.677] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:27:18.677] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:27:18.677] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:27:18.677] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:27:18.677] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:27:20.392] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:27:20.392] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:27:20.392] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:27:20.392] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:27:20.392] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:27:24.908] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:27:24.908] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:27:24.908] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:27:24.908] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:27:24.908] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:27:30.056] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 2ms
[22:27:30.056] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[22:27:30.172] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:27:30.172] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:27:30.172] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - The number of elements in the delta queue is : 0
[22:27:30.172] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS_DELTA, type=Application, format=JSON} with apps hashcode UP_6_
[22:27:30.172] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:27:30.172] DEBUG [Eureka-CacheFillTimer]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:27:30.173] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - New application cache entry {name=ALL_APPS, type=Application, format=JSON} with apps hashcode UP_6_
[22:27:30.675] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:27:30.675] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:27:30.675] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:27:30.675] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:27:30.675] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:27:34.231] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:27:34.231] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:27:34.231] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:27:34.231] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:27:34.231] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:27:38.102] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:27:38.103] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:27:38.103] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:27:38.103] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:27:38.103] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:27:48.685] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:27:48.686] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:27:48.686] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:27:48.686] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:27:48.686] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:27:50.401] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:27:50.401] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:27:50.401] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:27:50.401] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:27:50.401] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:27:54.913] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:27:54.914] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:27:54.914] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:27:54.914] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:27:54.914] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:28:00.173] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:28:00.174] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:28:00.174] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:28:00.682] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:28:00.682] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:28:00.682] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:28:00.682] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:28:00.682] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:28:04.240] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:28:04.240] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:28:04.240] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:28:04.240] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:28:04.240] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:28:08.110] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:28:08.110] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:28:08.111] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:28:08.111] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:28:08.111] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:28:18.693] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:28:18.693] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:28:18.693] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:28:18.693] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:28:18.693] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:28:20.409] DEBUG [http-nio-20000-exec-6]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:28:20.409] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:28:20.409] DEBUG [http-nio-20000-exec-6]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:28:20.409] DEBUG [http-nio-20000-exec-6]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:28:20.409] DEBUG [http-nio-20000-exec-6]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:28:24.919] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:28:24.919] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:28:24.919] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:28:24.919] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:28:24.919] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:28:30.061] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 4ms
[22:28:30.062] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[22:28:30.175] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:28:30.175] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:28:30.175] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:28:30.692] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:28:30.692] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:28:30.692] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:28:30.692] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:28:30.692] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:28:34.246] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:28:34.247] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:28:34.247] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:28:34.247] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:28:34.247] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:28:38.118] DEBUG [http-nio-20000-exec-1]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:28:38.118] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:28:38.118] DEBUG [http-nio-20000-exec-1]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:28:38.118] DEBUG [http-nio-20000-exec-1]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:28:38.118] DEBUG [http-nio-20000-exec-1]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:28:48.697] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:28:48.697] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:28:48.698] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:28:48.698] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:28:48.698] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:28:50.421] DEBUG [http-nio-20000-exec-9]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:28:50.421] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:28:50.421] DEBUG [http-nio-20000-exec-9]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:28:50.421] DEBUG [http-nio-20000-exec-9]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:28:50.421] DEBUG [http-nio-20000-exec-9]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:28:54.925] DEBUG [http-nio-20000-exec-10]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:28:54.925] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:28:54.925] DEBUG [http-nio-20000-exec-10]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:28:54.925] DEBUG [http-nio-20000-exec-10]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:28:54.925] DEBUG [http-nio-20000-exec-10]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:29:00.177] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:29:00.177] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:29:00.177] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:29:00.697] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:29:00.697] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:29:00.697] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:29:00.697] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:29:00.697] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
[22:29:04.255] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew EUREKA-CLIENT serverId 192.168.31.38:eureka-client:30002, isReplication {}false
[22:29:04.255] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:29:04.255] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:29:04.255] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:eureka-client:30002
[22:29:04.256] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): EUREKA-CLIENT - 192.168.31.38:eureka-client:30002; reply status=200
[22:29:08.125] DEBUG [http-nio-20000-exec-2]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ORDER-SERVICE serverId 192.168.31.38:shop-cloud-order-service:10003, isReplication {}false
[22:29:08.125] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:29:08.125] DEBUG [http-nio-20000-exec-2]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:29:08.125] DEBUG [http-nio-20000-exec-2]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-order-service:10003
[22:29:08.125] DEBUG [http-nio-20000-exec-2]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ORDER-SERVICE - 192.168.31.38:shop-cloud-order-service:10003; reply status=200
[22:29:18.703] DEBUG [http-nio-20000-exec-5]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-ITEM-SERVICE serverId 192.168.31.38:shop-cloud-item-service:10001, isReplication {}false
[22:29:18.703] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:29:18.704] DEBUG [http-nio-20000-exec-5]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:29:18.704] DEBUG [http-nio-20000-exec-5]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-item-service:10001
[22:29:18.704] DEBUG [http-nio-20000-exec-5]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-ITEM-SERVICE - 192.168.31.38:shop-cloud-item-service:10001; reply status=200
[22:29:20.429] DEBUG [http-nio-20000-exec-7]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31000, isReplication {}false
[22:29:20.429] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:29:20.429] DEBUG [http-nio-20000-exec-7]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:29:20.429] DEBUG [http-nio-20000-exec-7]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31000
[22:29:20.429] DEBUG [http-nio-20000-exec-7]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31000; reply status=200
[22:29:24.929] DEBUG [http-nio-20000-exec-3]o.s.c.n.e.s.InstanceRegistry - renew SHOP-CLOUD-USER-SERVICE serverId 192.168.31.38:shop-cloud-user-service:10002, isReplication {}false
[22:29:24.929] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:29:24.929] DEBUG [http-nio-20000-exec-3]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:29:24.930] DEBUG [http-nio-20000-exec-3]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:shop-cloud-user-service:10002
[22:29:24.930] DEBUG [http-nio-20000-exec-3]c.n.e.r.InstanceResource - Found (Renew): SHOP-CLOUD-USER-SERVICE - 192.168.31.38:shop-cloud-user-service:10002; reply status=200
[22:29:30.063] INFO  [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
[22:29:30.063] DEBUG [Eureka-EvictionTimer]c.n.e.r.AbstractInstanceRegistry - Running the evict task
[22:29:30.178] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache
[22:29:30.178] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS_DELTA V2 JSON
[22:29:30.178] DEBUG [Eureka-CacheFillTimer]c.n.e.r.ResponseCacheImpl - Updating the client cache from response cache for key : Application ALL_APPS V2 JSON
[22:29:30.702] DEBUG [http-nio-20000-exec-8]o.s.c.n.e.s.InstanceRegistry - renew RIBBON-CONSUMER serverId 192.168.31.38:ribbon-consumer:31001, isReplication {}false
[22:29:30.702] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
[22:29:30.702] DEBUG [http-nio-20000-exec-8]c.n.e.r.AbstractInstanceRegistry - Processing override status using rule: [com.netflix.eureka.registry.rule.DownOrStartingRule, com.netflix.eureka.registry.rule.OverrideExistsRule, com.netflix.eureka.registry.rule.LeaseExistsRule, com.netflix.eureka.registry.rule.AlwaysMatchInstanceStatusRule]
[22:29:30.702] DEBUG [http-nio-20000-exec-8]c.n.e.r.r.LeaseExistsRule - There is already an existing lease with status UP  for instance 192.168.31.38:ribbon-consumer:31001
[22:29:30.702] DEBUG [http-nio-20000-exec-8]c.n.e.r.InstanceResource - Found (Renew): RIBBON-CONSUMER - 192.168.31.38:ribbon-consumer:31001; reply status=200
